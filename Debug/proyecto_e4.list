
proyecto_e4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085f8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08008708  08008708  00018708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b54  08008b54  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  08008b54  08008b54  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008b54  08008b54  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b54  08008b54  00018b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b58  08008b58  00018b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08008b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200001fc  08008d58  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08008d58  00020380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc3b  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002176  00000000  00000000  0002de60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  0002ffd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00030dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018eba  00000000  00000000  00031ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010101  00000000  00000000  0004a9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c5b2  00000000  00000000  0005aaa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7055  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ce4  00000000  00000000  000e70a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	080086f0 	.word	0x080086f0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	080086f0 	.word	0x080086f0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__gesf2>:
 8000b7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b80:	e006      	b.n	8000b90 <__cmpsf2+0x4>
 8000b82:	bf00      	nop

08000b84 <__lesf2>:
 8000b84:	f04f 0c01 	mov.w	ip, #1
 8000b88:	e002      	b.n	8000b90 <__cmpsf2+0x4>
 8000b8a:	bf00      	nop

08000b8c <__cmpsf2>:
 8000b8c:	f04f 0c01 	mov.w	ip, #1
 8000b90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b94:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ba0:	bf18      	it	ne
 8000ba2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba6:	d011      	beq.n	8000bcc <__cmpsf2+0x40>
 8000ba8:	b001      	add	sp, #4
 8000baa:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bae:	bf18      	it	ne
 8000bb0:	ea90 0f01 	teqne	r0, r1
 8000bb4:	bf58      	it	pl
 8000bb6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000bba:	bf88      	it	hi
 8000bbc:	17c8      	asrhi	r0, r1, #31
 8000bbe:	bf38      	it	cc
 8000bc0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000bc4:	bf18      	it	ne
 8000bc6:	f040 0001 	orrne.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd0:	d102      	bne.n	8000bd8 <__cmpsf2+0x4c>
 8000bd2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000bd6:	d105      	bne.n	8000be4 <__cmpsf2+0x58>
 8000bd8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000bdc:	d1e4      	bne.n	8000ba8 <__cmpsf2+0x1c>
 8000bde:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000be2:	d0e1      	beq.n	8000ba8 <__cmpsf2+0x1c>
 8000be4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop

08000bec <__aeabi_cfrcmple>:
 8000bec:	4684      	mov	ip, r0
 8000bee:	4608      	mov	r0, r1
 8000bf0:	4661      	mov	r1, ip
 8000bf2:	e7ff      	b.n	8000bf4 <__aeabi_cfcmpeq>

08000bf4 <__aeabi_cfcmpeq>:
 8000bf4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bf6:	f7ff ffc9 	bl	8000b8c <__cmpsf2>
 8000bfa:	2800      	cmp	r0, #0
 8000bfc:	bf48      	it	mi
 8000bfe:	f110 0f00 	cmnmi.w	r0, #0
 8000c02:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c04 <__aeabi_fcmpeq>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff fff4 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c0c:	bf0c      	ite	eq
 8000c0e:	2001      	moveq	r0, #1
 8000c10:	2000      	movne	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_fcmplt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffea 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_fcmple>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffe0 	bl	8000bf4 <__aeabi_cfcmpeq>
 8000c34:	bf94      	ite	ls
 8000c36:	2001      	movls	r0, #1
 8000c38:	2000      	movhi	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fcmpge>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffd2 	bl	8000bec <__aeabi_cfrcmple>
 8000c48:	bf94      	ite	ls
 8000c4a:	2001      	movls	r0, #1
 8000c4c:	2000      	movhi	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_fcmpgt>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff ffc8 	bl	8000bec <__aeabi_cfrcmple>
 8000c5c:	bf34      	ite	cc
 8000c5e:	2001      	movcc	r0, #1
 8000c60:	2000      	movcs	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <readCalibrationData>:

/* === Private function implementation ========================================================= */

/* === Public function implementation ========================================================== */
void readCalibrationData (void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af04      	add	r7, sp, #16
uint8_t calibData[21]={0};
 8000c6e:	2300      	movs	r3, #0
 8000c70:	603b      	str	r3, [r7, #0]
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	741a      	strb	r2, [r3, #16]

//HAL_I2C_Mem_Read(&hi2c1, DevAddress, MemAddress, MemAddSize (por bytes), pData, Size, Timeout)
HAL_I2C_Mem_Read(&hi2c1, devAddRead, 0xAA, 1, calibData, 21, 50);
 8000c80:	2332      	movs	r3, #50	; 0x32
 8000c82:	9302      	str	r3, [sp, #8]
 8000c84:	2315      	movs	r3, #21
 8000c86:	9301      	str	r3, [sp, #4]
 8000c88:	463b      	mov	r3, r7
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	22aa      	movs	r2, #170	; 0xaa
 8000c90:	21ee      	movs	r1, #238	; 0xee
 8000c92:	4836      	ldr	r0, [pc, #216]	; (8000d6c <readCalibrationData+0x104>)
 8000c94:	f002 facc 	bl	8003230 <HAL_I2C_Mem_Read>

AC1 = (calibData[0]<<8 | calibData[1]);
 8000c98:	783b      	ldrb	r3, [r7, #0]
 8000c9a:	021b      	lsls	r3, r3, #8
 8000c9c:	b21a      	sxth	r2, r3
 8000c9e:	787b      	ldrb	r3, [r7, #1]
 8000ca0:	b21b      	sxth	r3, r3
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	b21a      	sxth	r2, r3
 8000ca6:	4b32      	ldr	r3, [pc, #200]	; (8000d70 <readCalibrationData+0x108>)
 8000ca8:	801a      	strh	r2, [r3, #0]
AC2 = (calibData[2]<<8 | calibData[3]);
 8000caa:	78bb      	ldrb	r3, [r7, #2]
 8000cac:	021b      	lsls	r3, r3, #8
 8000cae:	b21a      	sxth	r2, r3
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	b21a      	sxth	r2, r3
 8000cb8:	4b2e      	ldr	r3, [pc, #184]	; (8000d74 <readCalibrationData+0x10c>)
 8000cba:	801a      	strh	r2, [r3, #0]
AC3 = (calibData[4]<<8 | calibData[5]);
 8000cbc:	793b      	ldrb	r3, [r7, #4]
 8000cbe:	021b      	lsls	r3, r3, #8
 8000cc0:	b21a      	sxth	r2, r3
 8000cc2:	797b      	ldrb	r3, [r7, #5]
 8000cc4:	b21b      	sxth	r3, r3
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	b21a      	sxth	r2, r3
 8000cca:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <readCalibrationData+0x110>)
 8000ccc:	801a      	strh	r2, [r3, #0]
AC4 = (calibData[6]<<8 | calibData[7]);
 8000cce:	79bb      	ldrb	r3, [r7, #6]
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	b21a      	sxth	r2, r3
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	b21b      	sxth	r3, r3
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	b21b      	sxth	r3, r3
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <readCalibrationData+0x114>)
 8000ce0:	801a      	strh	r2, [r3, #0]
AC5 = (calibData[8]<<8 | calibData[9]);
 8000ce2:	7a3b      	ldrb	r3, [r7, #8]
 8000ce4:	021b      	lsls	r3, r3, #8
 8000ce6:	b21a      	sxth	r2, r3
 8000ce8:	7a7b      	ldrb	r3, [r7, #9]
 8000cea:	b21b      	sxth	r3, r3
 8000cec:	4313      	orrs	r3, r2
 8000cee:	b21b      	sxth	r3, r3
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	4b23      	ldr	r3, [pc, #140]	; (8000d80 <readCalibrationData+0x118>)
 8000cf4:	801a      	strh	r2, [r3, #0]
AC6 = (calibData[10]<<8 | calibData[11]);
 8000cf6:	7abb      	ldrb	r3, [r7, #10]
 8000cf8:	021b      	lsls	r3, r3, #8
 8000cfa:	b21a      	sxth	r2, r3
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	b21b      	sxth	r3, r3
 8000d00:	4313      	orrs	r3, r2
 8000d02:	b21b      	sxth	r3, r3
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <readCalibrationData+0x11c>)
 8000d08:	801a      	strh	r2, [r3, #0]
B1 = (calibData[12]<<8 | calibData[13]);
 8000d0a:	7b3b      	ldrb	r3, [r7, #12]
 8000d0c:	021b      	lsls	r3, r3, #8
 8000d0e:	b21a      	sxth	r2, r3
 8000d10:	7b7b      	ldrb	r3, [r7, #13]
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <readCalibrationData+0x120>)
 8000d1a:	801a      	strh	r2, [r3, #0]
B2 = (calibData[14]<<8 | calibData[15]);
 8000d1c:	7bbb      	ldrb	r3, [r7, #14]
 8000d1e:	021b      	lsls	r3, r3, #8
 8000d20:	b21a      	sxth	r2, r3
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	b21b      	sxth	r3, r3
 8000d26:	4313      	orrs	r3, r2
 8000d28:	b21a      	sxth	r2, r3
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <readCalibrationData+0x124>)
 8000d2c:	801a      	strh	r2, [r3, #0]
MB = (calibData[16]<<8 | calibData[17]);
 8000d2e:	7c3b      	ldrb	r3, [r7, #16]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	b21a      	sxth	r2, r3
 8000d34:	7c7b      	ldrb	r3, [r7, #17]
 8000d36:	b21b      	sxth	r3, r3
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b21a      	sxth	r2, r3
 8000d3c:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <readCalibrationData+0x128>)
 8000d3e:	801a      	strh	r2, [r3, #0]
MC = (calibData[18]<<8 | calibData[19]);
 8000d40:	7cbb      	ldrb	r3, [r7, #18]
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	b21a      	sxth	r2, r3
 8000d46:	7cfb      	ldrb	r3, [r7, #19]
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	b21a      	sxth	r2, r3
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <readCalibrationData+0x12c>)
 8000d50:	801a      	strh	r2, [r3, #0]
MD = (calibData[20]<<8 | calibData[21]);
 8000d52:	7d3b      	ldrb	r3, [r7, #20]
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	b21a      	sxth	r2, r3
 8000d58:	7d7b      	ldrb	r3, [r7, #21]
 8000d5a:	b21b      	sxth	r3, r3
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	b21a      	sxth	r2, r3
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <readCalibrationData+0x130>)
 8000d62:	801a      	strh	r2, [r3, #0]

}
 8000d64:	bf00      	nop
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000284 	.word	0x20000284
 8000d70:	20000218 	.word	0x20000218
 8000d74:	2000021a 	.word	0x2000021a
 8000d78:	2000021c 	.word	0x2000021c
 8000d7c:	2000021e 	.word	0x2000021e
 8000d80:	20000220 	.word	0x20000220
 8000d84:	20000222 	.word	0x20000222
 8000d88:	20000224 	.word	0x20000224
 8000d8c:	20000226 	.word	0x20000226
 8000d90:	20000228 	.word	0x20000228
 8000d94:	2000022a 	.word	0x2000022a
 8000d98:	2000022c 	.word	0x2000022c

08000d9c <getUncompensatedTemperature>:

uint16_t getUncompensatedTemperature(void){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af04      	add	r7, sp, #16

	uint8_t uTMSB, uTLSB =0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	713b      	strb	r3, [r7, #4]
	uint8_t dataToWrite =0x2E;
 8000da6:	232e      	movs	r3, #46	; 0x2e
 8000da8:	70fb      	strb	r3, [r7, #3]
	uint16_t uT =0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	80fb      	strh	r3, [r7, #6]


	//HAL_I2C_Mem_Write(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
	HAL_I2C_Mem_Write(&hi2c1, devAddWrite, 0xF4, 1, &dataToWrite, 1, 50);
 8000dae:	2332      	movs	r3, #50	; 0x32
 8000db0:	9302      	str	r3, [sp, #8]
 8000db2:	2301      	movs	r3, #1
 8000db4:	9301      	str	r3, [sp, #4]
 8000db6:	1cfb      	adds	r3, r7, #3
 8000db8:	9300      	str	r3, [sp, #0]
 8000dba:	2301      	movs	r3, #1
 8000dbc:	22f4      	movs	r2, #244	; 0xf4
 8000dbe:	21ee      	movs	r1, #238	; 0xee
 8000dc0:	4815      	ldr	r0, [pc, #84]	; (8000e18 <getUncompensatedTemperature+0x7c>)
 8000dc2:	f002 f93b 	bl	800303c <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8000dc6:	2005      	movs	r0, #5
 8000dc8:	f001 fbe0 	bl	800258c <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, devAddRead,0xF6, 1, &uTMSB, 1, 50);
 8000dcc:	2332      	movs	r3, #50	; 0x32
 8000dce:	9302      	str	r3, [sp, #8]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	9301      	str	r3, [sp, #4]
 8000dd4:	1d7b      	adds	r3, r7, #5
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	2301      	movs	r3, #1
 8000dda:	22f6      	movs	r2, #246	; 0xf6
 8000ddc:	21ee      	movs	r1, #238	; 0xee
 8000dde:	480e      	ldr	r0, [pc, #56]	; (8000e18 <getUncompensatedTemperature+0x7c>)
 8000de0:	f002 fa26 	bl	8003230 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, devAddRead, 0xF7, 1, &uTLSB, 1, 50);
 8000de4:	2332      	movs	r3, #50	; 0x32
 8000de6:	9302      	str	r3, [sp, #8]
 8000de8:	2301      	movs	r3, #1
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2301      	movs	r3, #1
 8000df2:	22f7      	movs	r2, #247	; 0xf7
 8000df4:	21ee      	movs	r1, #238	; 0xee
 8000df6:	4808      	ldr	r0, [pc, #32]	; (8000e18 <getUncompensatedTemperature+0x7c>)
 8000df8:	f002 fa1a 	bl	8003230 <HAL_I2C_Mem_Read>

	////////delete this//////////

	/////////////////////////////

	uT = uTMSB << 8 | uTLSB;
 8000dfc:	797b      	ldrb	r3, [r7, #5]
 8000dfe:	021b      	lsls	r3, r3, #8
 8000e00:	b21a      	sxth	r2, r3
 8000e02:	793b      	ldrb	r3, [r7, #4]
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	4313      	orrs	r3, r2
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	80fb      	strh	r3, [r7, #6]

	return uT;
 8000e0c:	88fb      	ldrh	r3, [r7, #6]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000284 	.word	0x20000284

08000e1c <getUncompensatedPressure>:

uint32_t getUncompensatedPressure(char oss){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	; 0x28
 8000e20:	af04      	add	r7, sp, #16
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]

uint8_t uData[2]={0};
 8000e26:	2300      	movs	r3, #0
 8000e28:	823b      	strh	r3, [r7, #16]
uint8_t dataToWrite= 0x34 | (oss<<6);
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	019b      	lsls	r3, r3, #6
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	f043 0334 	orr.w	r3, r3, #52	; 0x34
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	73fb      	strb	r3, [r7, #15]
uint32_t uP=0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]

HAL_I2C_Mem_Write(&hi2c1, devAddWrite, 0xF4, 1, &dataToWrite, 1, 50);
 8000e3e:	2332      	movs	r3, #50	; 0x32
 8000e40:	9302      	str	r3, [sp, #8]
 8000e42:	2301      	movs	r3, #1
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	f107 030f 	add.w	r3, r7, #15
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	22f4      	movs	r2, #244	; 0xf4
 8000e50:	21ee      	movs	r1, #238	; 0xee
 8000e52:	4812      	ldr	r0, [pc, #72]	; (8000e9c <getUncompensatedPressure+0x80>)
 8000e54:	f002 f8f2 	bl	800303c <HAL_I2C_Mem_Write>

HAL_Delay(26); //tomo el delay maximo
 8000e58:	201a      	movs	r0, #26
 8000e5a:	f001 fb97 	bl	800258c <HAL_Delay>

HAL_I2C_Mem_Read(&hi2c1, devAddRead, 0xF6, 1, uData, 3, 50);
 8000e5e:	2332      	movs	r3, #50	; 0x32
 8000e60:	9302      	str	r3, [sp, #8]
 8000e62:	2303      	movs	r3, #3
 8000e64:	9301      	str	r3, [sp, #4]
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	22f6      	movs	r2, #246	; 0xf6
 8000e70:	21ee      	movs	r1, #238	; 0xee
 8000e72:	480a      	ldr	r0, [pc, #40]	; (8000e9c <getUncompensatedPressure+0x80>)
 8000e74:	f002 f9dc 	bl	8003230 <HAL_I2C_Mem_Read>

uP= (uData[0]<<16 | uData[1]<<8 | uData[2]) >> (8-oss);
 8000e78:	7c3b      	ldrb	r3, [r7, #16]
 8000e7a:	041a      	lsls	r2, r3, #16
 8000e7c:	7c7b      	ldrb	r3, [r7, #17]
 8000e7e:	021b      	lsls	r3, r3, #8
 8000e80:	4313      	orrs	r3, r2
 8000e82:	7cba      	ldrb	r2, [r7, #18]
 8000e84:	431a      	orrs	r2, r3
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	f1c3 0308 	rsb	r3, r3, #8
 8000e8c:	fa42 f303 	asr.w	r3, r2, r3
 8000e90:	617b      	str	r3, [r7, #20]

return uP;
 8000e92:	697b      	ldr	r3, [r7, #20]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000284 	.word	0x20000284

08000ea0 <getTemperature>:

float getTemperature(void){
 8000ea0:	b5b0      	push	{r4, r5, r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0

uint16_t UT = getUncompensatedTemperature();
 8000ea6:	f7ff ff79 	bl	8000d9c <getUncompensatedTemperature>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	80fb      	strh	r3, [r7, #6]
X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	4a3c      	ldr	r2, [pc, #240]	; (8000fa4 <getTemperature+0x104>)
 8000eb2:	8812      	ldrh	r2, [r2, #0]
 8000eb4:	1a9b      	subs	r3, r3, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff faae 	bl	8000418 <__aeabi_i2d>
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	460d      	mov	r5, r1
 8000ec0:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <getTemperature+0x108>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff faa7 	bl	8000418 <__aeabi_i2d>
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	4b37      	ldr	r3, [pc, #220]	; (8000fac <getTemperature+0x10c>)
 8000ed0:	f7ff fc36 	bl	8000740 <__aeabi_ddiv>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4620      	mov	r0, r4
 8000eda:	4629      	mov	r1, r5
 8000edc:	f7ff fb06 	bl	80004ec <__aeabi_dmul>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f7ff fdb0 	bl	8000a4c <__aeabi_d2iz>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a30      	ldr	r2, [pc, #192]	; (8000fb0 <getTemperature+0x110>)
 8000ef0:	6013      	str	r3, [r2, #0]
X2 = ((MC*(pow(2,11))) / (X1+MD));
 8000ef2:	4b30      	ldr	r3, [pc, #192]	; (8000fb4 <getTemperature+0x114>)
 8000ef4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fa8d 	bl	8000418 <__aeabi_i2d>
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <getTemperature+0x118>)
 8000f04:	f7ff faf2 	bl	80004ec <__aeabi_dmul>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4614      	mov	r4, r2
 8000f0e:	461d      	mov	r5, r3
 8000f10:	4b2a      	ldr	r3, [pc, #168]	; (8000fbc <getTemperature+0x11c>)
 8000f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f16:	461a      	mov	r2, r3
 8000f18:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <getTemperature+0x110>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fa7a 	bl	8000418 <__aeabi_i2d>
 8000f24:	4602      	mov	r2, r0
 8000f26:	460b      	mov	r3, r1
 8000f28:	4620      	mov	r0, r4
 8000f2a:	4629      	mov	r1, r5
 8000f2c:	f7ff fc08 	bl	8000740 <__aeabi_ddiv>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4610      	mov	r0, r2
 8000f36:	4619      	mov	r1, r3
 8000f38:	f7ff fd88 	bl	8000a4c <__aeabi_d2iz>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <getTemperature+0x120>)
 8000f40:	6013      	str	r3, [r2, #0]
B5 = X1+X2;
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <getTemperature+0x110>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <getTemperature+0x120>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a1d      	ldr	r2, [pc, #116]	; (8000fc4 <getTemperature+0x124>)
 8000f4e:	6013      	str	r3, [r2, #0]
T = (B5+8)/(pow(2,4));
 8000f50:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <getTemperature+0x124>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	3308      	adds	r3, #8
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fa5e 	bl	8000418 <__aeabi_i2d>
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <getTemperature+0x128>)
 8000f62:	f7ff fbed 	bl	8000740 <__aeabi_ddiv>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fd6d 	bl	8000a4c <__aeabi_d2iz>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <getTemperature+0x12c>)
 8000f76:	6013      	str	r3, [r2, #0]
return T/10.0;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <getTemperature+0x12c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fa4b 	bl	8000418 <__aeabi_i2d>
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <getTemperature+0x130>)
 8000f88:	f7ff fbda 	bl	8000740 <__aeabi_ddiv>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	f7ff fda2 	bl	8000adc <__aeabi_d2f>
 8000f98:	4603      	mov	r3, r0

}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000222 	.word	0x20000222
 8000fa8:	20000220 	.word	0x20000220
 8000fac:	40e00000 	.word	0x40e00000
 8000fb0:	20000230 	.word	0x20000230
 8000fb4:	2000022a 	.word	0x2000022a
 8000fb8:	40a00000 	.word	0x40a00000
 8000fbc:	2000022c 	.word	0x2000022c
 8000fc0:	20000234 	.word	0x20000234
 8000fc4:	20000240 	.word	0x20000240
 8000fc8:	40300000 	.word	0x40300000
 8000fcc:	2000024c 	.word	0x2000024c
 8000fd0:	40240000 	.word	0x40240000

08000fd4 <getPressure>:


float getPressure(char oss){
 8000fd4:	b5b0      	push	{r4, r5, r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]

	uint32_t UP = getUncompensatedPressure(oss);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff1b 	bl	8000e1c <getUncompensatedPressure>
 8000fe6:	60f8      	str	r0, [r7, #12]
	B6 = B5-4000;
 8000fe8:	4b7d      	ldr	r3, [pc, #500]	; (80011e0 <getPressure+0x20c>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8000ff0:	4a7c      	ldr	r2, [pc, #496]	; (80011e4 <getPressure+0x210>)
 8000ff2:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8000ff4:	4b7c      	ldr	r3, [pc, #496]	; (80011e8 <getPressure+0x214>)
 8000ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fa0c 	bl	8000418 <__aeabi_i2d>
 8001000:	4604      	mov	r4, r0
 8001002:	460d      	mov	r5, r1
 8001004:	4b77      	ldr	r3, [pc, #476]	; (80011e4 <getPressure+0x210>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a76      	ldr	r2, [pc, #472]	; (80011e4 <getPressure+0x210>)
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	fb02 f303 	mul.w	r3, r2, r3
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff fa01 	bl	8000418 <__aeabi_i2d>
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	4b74      	ldr	r3, [pc, #464]	; (80011ec <getPressure+0x218>)
 800101c:	f7ff fb90 	bl	8000740 <__aeabi_ddiv>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4620      	mov	r0, r4
 8001026:	4629      	mov	r1, r5
 8001028:	f7ff fa60 	bl	80004ec <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	4b6d      	ldr	r3, [pc, #436]	; (80011f0 <getPressure+0x21c>)
 800103a:	f7ff fb81 	bl	8000740 <__aeabi_ddiv>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff fd01 	bl	8000a4c <__aeabi_d2iz>
 800104a:	4603      	mov	r3, r0
 800104c:	4a69      	ldr	r2, [pc, #420]	; (80011f4 <getPressure+0x220>)
 800104e:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 8001050:	4b69      	ldr	r3, [pc, #420]	; (80011f8 <getPressure+0x224>)
 8001052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001056:	461a      	mov	r2, r3
 8001058:	4b62      	ldr	r3, [pc, #392]	; (80011e4 <getPressure+0x210>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	fb02 f303 	mul.w	r3, r2, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff f9d9 	bl	8000418 <__aeabi_i2d>
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	4b61      	ldr	r3, [pc, #388]	; (80011f0 <getPressure+0x21c>)
 800106c:	f7ff fb68 	bl	8000740 <__aeabi_ddiv>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f7ff fce8 	bl	8000a4c <__aeabi_d2iz>
 800107c:	4603      	mov	r3, r0
 800107e:	4a5f      	ldr	r2, [pc, #380]	; (80011fc <getPressure+0x228>)
 8001080:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 8001082:	4b5c      	ldr	r3, [pc, #368]	; (80011f4 <getPressure+0x220>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b5d      	ldr	r3, [pc, #372]	; (80011fc <getPressure+0x228>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a5c      	ldr	r2, [pc, #368]	; (8001200 <getPressure+0x22c>)
 800108e:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 8001090:	4b5c      	ldr	r3, [pc, #368]	; (8001204 <getPressure+0x230>)
 8001092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001096:	009a      	lsls	r2, r3, #2
 8001098:	4b59      	ldr	r3, [pc, #356]	; (8001200 <getPressure+0x22c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	441a      	add	r2, r3
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	3302      	adds	r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	da00      	bge.n	80010ac <getPressure+0xd8>
 80010aa:	3303      	adds	r3, #3
 80010ac:	109b      	asrs	r3, r3, #2
 80010ae:	461a      	mov	r2, r3
 80010b0:	4b55      	ldr	r3, [pc, #340]	; (8001208 <getPressure+0x234>)
 80010b2:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 80010b4:	4b55      	ldr	r3, [pc, #340]	; (800120c <getPressure+0x238>)
 80010b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ba:	461a      	mov	r2, r3
 80010bc:	4b49      	ldr	r3, [pc, #292]	; (80011e4 <getPressure+0x210>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	fb02 f303 	mul.w	r3, r2, r3
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f9a7 	bl	8000418 <__aeabi_i2d>
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b50      	ldr	r3, [pc, #320]	; (8001210 <getPressure+0x23c>)
 80010d0:	f7ff fb36 	bl	8000740 <__aeabi_ddiv>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fcb6 	bl	8000a4c <__aeabi_d2iz>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a44      	ldr	r2, [pc, #272]	; (80011f4 <getPressure+0x220>)
 80010e4:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 80010e6:	4b4b      	ldr	r3, [pc, #300]	; (8001214 <getPressure+0x240>)
 80010e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f993 	bl	8000418 <__aeabi_i2d>
 80010f2:	4604      	mov	r4, r0
 80010f4:	460d      	mov	r5, r1
 80010f6:	4b3b      	ldr	r3, [pc, #236]	; (80011e4 <getPressure+0x210>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a3a      	ldr	r2, [pc, #232]	; (80011e4 <getPressure+0x210>)
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	fb02 f303 	mul.w	r3, r2, r3
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f988 	bl	8000418 <__aeabi_i2d>
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	4b37      	ldr	r3, [pc, #220]	; (80011ec <getPressure+0x218>)
 800110e:	f7ff fb17 	bl	8000740 <__aeabi_ddiv>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4620      	mov	r0, r4
 8001118:	4629      	mov	r1, r5
 800111a:	f7ff f9e7 	bl	80004ec <__aeabi_dmul>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <getPressure+0x244>)
 800112c:	f7ff fb08 	bl	8000740 <__aeabi_ddiv>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	f7ff fc88 	bl	8000a4c <__aeabi_d2iz>
 800113c:	4603      	mov	r3, r0
 800113e:	4a2f      	ldr	r2, [pc, #188]	; (80011fc <getPressure+0x228>)
 8001140:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <getPressure+0x220>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <getPressure+0x228>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	3302      	adds	r3, #2
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f962 	bl	8000418 <__aeabi_i2d>
 8001154:	f04f 0200 	mov.w	r2, #0
 8001158:	4b30      	ldr	r3, [pc, #192]	; (800121c <getPressure+0x248>)
 800115a:	f7ff faf1 	bl	8000740 <__aeabi_ddiv>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4610      	mov	r0, r2
 8001164:	4619      	mov	r1, r3
 8001166:	f7ff fc71 	bl	8000a4c <__aeabi_d2iz>
 800116a:	4603      	mov	r3, r0
 800116c:	4a24      	ldr	r2, [pc, #144]	; (8001200 <getPressure+0x22c>)
 800116e:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 8001170:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <getPressure+0x24c>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <getPressure+0x22c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f938 	bl	80003f8 <__aeabi_ui2d>
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <getPressure+0x250>)
 800118e:	f7ff fad7 	bl	8000740 <__aeabi_ddiv>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	f7ff fc7f 	bl	8000a9c <__aeabi_d2uiz>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a21      	ldr	r2, [pc, #132]	; (8001228 <getPressure+0x254>)
 80011a2:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <getPressure+0x234>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1a9b      	subs	r3, r3, r2
 80011ae:	79fa      	ldrb	r2, [r7, #7]
 80011b0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80011b4:	fa41 f202 	asr.w	r2, r1, r2
 80011b8:	fb02 f303 	mul.w	r3, r2, r3
 80011bc:	4a1b      	ldr	r2, [pc, #108]	; (800122c <getPressure+0x258>)
 80011be:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) P = (B7*2)/B4;
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <getPressure+0x258>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db35      	blt.n	8001234 <getPressure+0x260>
 80011c8:	4b18      	ldr	r3, [pc, #96]	; (800122c <getPressure+0x258>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	005a      	lsls	r2, r3, #1
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <getPressure+0x254>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <getPressure+0x25c>)
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e034      	b.n	8001248 <getPressure+0x274>
 80011de:	bf00      	nop
 80011e0:	20000240 	.word	0x20000240
 80011e4:	20000244 	.word	0x20000244
 80011e8:	20000226 	.word	0x20000226
 80011ec:	40b00000 	.word	0x40b00000
 80011f0:	40a00000 	.word	0x40a00000
 80011f4:	20000230 	.word	0x20000230
 80011f8:	2000021a 	.word	0x2000021a
 80011fc:	20000234 	.word	0x20000234
 8001200:	20000238 	.word	0x20000238
 8001204:	20000218 	.word	0x20000218
 8001208:	2000023c 	.word	0x2000023c
 800120c:	2000021c 	.word	0x2000021c
 8001210:	40c00000 	.word	0x40c00000
 8001214:	20000224 	.word	0x20000224
 8001218:	40f00000 	.word	0x40f00000
 800121c:	40100000 	.word	0x40100000
 8001220:	2000021e 	.word	0x2000021e
 8001224:	40e00000 	.word	0x40e00000
 8001228:	20000250 	.word	0x20000250
 800122c:	20000254 	.word	0x20000254
 8001230:	20000248 	.word	0x20000248
	else P = (B7/B4)*2;
 8001234:	4b4b      	ldr	r3, [pc, #300]	; (8001364 <getPressure+0x390>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <getPressure+0x394>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	461a      	mov	r2, r3
 8001244:	4b49      	ldr	r3, [pc, #292]	; (800136c <getPressure+0x398>)
 8001246:	601a      	str	r2, [r3, #0]
	X1 = (P/(pow(2,8)))*(P/(pow(2,8)));
 8001248:	4b48      	ldr	r3, [pc, #288]	; (800136c <getPressure+0x398>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f8e3 	bl	8000418 <__aeabi_i2d>
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	4b46      	ldr	r3, [pc, #280]	; (8001370 <getPressure+0x39c>)
 8001258:	f7ff fa72 	bl	8000740 <__aeabi_ddiv>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4614      	mov	r4, r2
 8001262:	461d      	mov	r5, r3
 8001264:	4b41      	ldr	r3, [pc, #260]	; (800136c <getPressure+0x398>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f8d5 	bl	8000418 <__aeabi_i2d>
 800126e:	f04f 0200 	mov.w	r2, #0
 8001272:	4b3f      	ldr	r3, [pc, #252]	; (8001370 <getPressure+0x39c>)
 8001274:	f7ff fa64 	bl	8000740 <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4620      	mov	r0, r4
 800127e:	4629      	mov	r1, r5
 8001280:	f7ff f934 	bl	80004ec <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fbde 	bl	8000a4c <__aeabi_d2iz>
 8001290:	4603      	mov	r3, r0
 8001292:	4a38      	ldr	r2, [pc, #224]	; (8001374 <getPressure+0x3a0>)
 8001294:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 8001296:	4b37      	ldr	r3, [pc, #220]	; (8001374 <getPressure+0x3a0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f640 32de 	movw	r2, #3038	; 0xbde
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f8b8 	bl	8000418 <__aeabi_i2d>
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	4b32      	ldr	r3, [pc, #200]	; (8001378 <getPressure+0x3a4>)
 80012ae:	f7ff fa47 	bl	8000740 <__aeabi_ddiv>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	f7ff fbc7 	bl	8000a4c <__aeabi_d2iz>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a2c      	ldr	r2, [pc, #176]	; (8001374 <getPressure+0x3a0>)
 80012c2:	6013      	str	r3, [r2, #0]
	X2 = (-7357*P)/(pow(2,16));
 80012c4:	4b29      	ldr	r3, [pc, #164]	; (800136c <getPressure+0x398>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a2c      	ldr	r2, [pc, #176]	; (800137c <getPressure+0x3a8>)
 80012ca:	fb02 f303 	mul.w	r3, r2, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f8a2 	bl	8000418 <__aeabi_i2d>
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b27      	ldr	r3, [pc, #156]	; (8001378 <getPressure+0x3a4>)
 80012da:	f7ff fa31 	bl	8000740 <__aeabi_ddiv>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fbb1 	bl	8000a4c <__aeabi_d2iz>
 80012ea:	4603      	mov	r3, r0
 80012ec:	4a24      	ldr	r2, [pc, #144]	; (8001380 <getPressure+0x3ac>)
 80012ee:	6013      	str	r3, [r2, #0]
	P = P + (X1+X2+3791)/(pow(2,4));
 80012f0:	4b1e      	ldr	r3, [pc, #120]	; (800136c <getPressure+0x398>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f88f 	bl	8000418 <__aeabi_i2d>
 80012fa:	4604      	mov	r4, r0
 80012fc:	460d      	mov	r5, r1
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <getPressure+0x3a0>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <getPressure+0x3ac>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f883 	bl	8000418 <__aeabi_i2d>
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <getPressure+0x3b0>)
 8001318:	f7ff fa12 	bl	8000740 <__aeabi_ddiv>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4620      	mov	r0, r4
 8001322:	4629      	mov	r1, r5
 8001324:	f7fe ff2c 	bl	8000180 <__adddf3>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fb8c 	bl	8000a4c <__aeabi_d2iz>
 8001334:	4603      	mov	r3, r0
 8001336:	4a0d      	ldr	r2, [pc, #52]	; (800136c <getPressure+0x398>)
 8001338:	6013      	str	r3, [r2, #0]

	return P/100.0;
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <getPressure+0x398>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff f86a 	bl	8000418 <__aeabi_i2d>
 8001344:	f04f 0200 	mov.w	r2, #0
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <getPressure+0x3b4>)
 800134a:	f7ff f9f9 	bl	8000740 <__aeabi_ddiv>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	4610      	mov	r0, r2
 8001354:	4619      	mov	r1, r3
 8001356:	f7ff fbc1 	bl	8000adc <__aeabi_d2f>
 800135a:	4603      	mov	r3, r0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bdb0      	pop	{r4, r5, r7, pc}
 8001364:	20000254 	.word	0x20000254
 8001368:	20000250 	.word	0x20000250
 800136c:	20000248 	.word	0x20000248
 8001370:	40700000 	.word	0x40700000
 8001374:	20000230 	.word	0x20000230
 8001378:	40f00000 	.word	0x40f00000
 800137c:	ffffe343 	.word	0xffffe343
 8001380:	20000234 	.word	0x20000234
 8001384:	40300000 	.word	0x40300000
 8001388:	40590000 	.word	0x40590000

0800138c <bmpInit>:

void bmpInit (void){
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0

	readCalibrationData();
 8001390:	f7ff fc6a 	bl	8000c68 <readCalibrationData>

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}

08001398 <lcdSendCmd>:
/* === Private function implementation ========================================================= */

/* === Public function implementation ========================================================== */

void lcdSendCmd (char cmd)	//cmd=10111010
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af02      	add	r7, sp, #8
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);	  //data_u=10110000		&: and bit a bit
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	f023 030f 	bic.w	r3, r3, #15
 80013a8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0); //data_1=10100000		|: or bit a bit
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	f043 030c 	orr.w	r3, r3, #12
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80013c4:	7bbb      	ldrb	r3, [r7, #14]
 80013c6:	f043 030c 	orr.w	r3, r3, #12
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 20);
 80013d8:	f107 0208 	add.w	r2, r7, #8
 80013dc:	2314      	movs	r3, #20
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	2304      	movs	r3, #4
 80013e2:	214e      	movs	r1, #78	; 0x4e
 80013e4:	4803      	ldr	r0, [pc, #12]	; (80013f4 <lcdSendCmd+0x5c>)
 80013e6:	f001 fd2b 	bl	8002e40 <HAL_I2C_Master_Transmit>
}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000284 	.word	0x20000284

080013f8 <lcdSendData>:

void lcdSendData (char data)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af02      	add	r7, sp, #8
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f023 030f 	bic.w	r3, r3, #15
 8001408:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	011b      	lsls	r3, r3, #4
 800140e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	f043 030d 	orr.w	r3, r3, #13
 8001416:	b2db      	uxtb	r3, r3
 8001418:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	f043 0309 	orr.w	r3, r3, #9
 8001420:	b2db      	uxtb	r3, r3
 8001422:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	f043 030d 	orr.w	r3, r3, #13
 800142a:	b2db      	uxtb	r3, r3
 800142c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800142e:	7bbb      	ldrb	r3, [r7, #14]
 8001430:	f043 0309 	orr.w	r3, r3, #9
 8001434:	b2db      	uxtb	r3, r3
 8001436:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 20);
 8001438:	f107 0208 	add.w	r2, r7, #8
 800143c:	2314      	movs	r3, #20
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2304      	movs	r3, #4
 8001442:	214e      	movs	r1, #78	; 0x4e
 8001444:	4803      	ldr	r0, [pc, #12]	; (8001454 <lcdSendData+0x5c>)
 8001446:	f001 fcfb 	bl	8002e40 <HAL_I2C_Master_Transmit>
}
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000284 	.word	0x20000284

08001458 <lcdClear>:

void lcdClear(void)		//Tiene una bandera de activacion
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
	//if (flag_clear == 1){
		lcdSendCmd (0x80);
 800145e:	2080      	movs	r0, #128	; 0x80
 8001460:	f7ff ff9a 	bl	8001398 <lcdSendCmd>
		for (int i=0; i<70; i++)
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	e005      	b.n	8001476 <lcdClear+0x1e>
		{
			lcdSendData (' ');
 800146a:	2020      	movs	r0, #32
 800146c:	f7ff ffc4 	bl	80013f8 <lcdSendData>
		for (int i=0; i<70; i++)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3301      	adds	r3, #1
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b45      	cmp	r3, #69	; 0x45
 800147a:	ddf6      	ble.n	800146a <lcdClear+0x12>
		}
	//}
	//flag_clear=0;
	}
 800147c:	bf00      	nop
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <lcdCursor>:



void lcdCursor(int row, int col)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	6039      	str	r1, [r7, #0]
    switch (row)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <lcdCursor+0x18>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d005      	beq.n	80014a8 <lcdCursor+0x22>
 800149c:	e009      	b.n	80014b2 <lcdCursor+0x2c>
    {
        case 0:
            col |= 0x80;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a4:	603b      	str	r3, [r7, #0]
            break;
 80014a6:	e004      	b.n	80014b2 <lcdCursor+0x2c>
        case 1:
            col |= 0xC0;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80014ae:	603b      	str	r3, [r7, #0]
            break;
 80014b0:	bf00      	nop
    }

    lcdSendCmd (col);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff ff6e 	bl	8001398 <lcdSendCmd>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <lcdInit>:


void lcdInit (void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	// 4 bit initialization
	HAL_Delay(50);  // wait for >40ms
 80014c8:	2032      	movs	r0, #50	; 0x32
 80014ca:	f001 f85f 	bl	800258c <HAL_Delay>
	lcdSendCmd (0x30);
 80014ce:	2030      	movs	r0, #48	; 0x30
 80014d0:	f7ff ff62 	bl	8001398 <lcdSendCmd>
	HAL_Delay(5);  // wait for >4.1ms
 80014d4:	2005      	movs	r0, #5
 80014d6:	f001 f859 	bl	800258c <HAL_Delay>
	lcdSendCmd (0x30);
 80014da:	2030      	movs	r0, #48	; 0x30
 80014dc:	f7ff ff5c 	bl	8001398 <lcdSendCmd>
	HAL_Delay(1);  // wait for >100us
 80014e0:	2001      	movs	r0, #1
 80014e2:	f001 f853 	bl	800258c <HAL_Delay>
	lcdSendCmd (0x30);
 80014e6:	2030      	movs	r0, #48	; 0x30
 80014e8:	f7ff ff56 	bl	8001398 <lcdSendCmd>
	HAL_Delay(10);
 80014ec:	200a      	movs	r0, #10
 80014ee:	f001 f84d 	bl	800258c <HAL_Delay>
	lcdSendCmd (0x20);  // 4bit mode
 80014f2:	2020      	movs	r0, #32
 80014f4:	f7ff ff50 	bl	8001398 <lcdSendCmd>
	HAL_Delay(10);
 80014f8:	200a      	movs	r0, #10
 80014fa:	f001 f847 	bl	800258c <HAL_Delay>

  // display initialization
	lcdSendCmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80014fe:	2028      	movs	r0, #40	; 0x28
 8001500:	f7ff ff4a 	bl	8001398 <lcdSendCmd>
	HAL_Delay(1);
 8001504:	2001      	movs	r0, #1
 8001506:	f001 f841 	bl	800258c <HAL_Delay>
	lcdSendCmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800150a:	2008      	movs	r0, #8
 800150c:	f7ff ff44 	bl	8001398 <lcdSendCmd>
	HAL_Delay(1);
 8001510:	2001      	movs	r0, #1
 8001512:	f001 f83b 	bl	800258c <HAL_Delay>
	lcdSendCmd (0x01);  // clear display
 8001516:	2001      	movs	r0, #1
 8001518:	f7ff ff3e 	bl	8001398 <lcdSendCmd>
	HAL_Delay(1);
 800151c:	2001      	movs	r0, #1
 800151e:	f001 f835 	bl	800258c <HAL_Delay>
	HAL_Delay(1);
 8001522:	2001      	movs	r0, #1
 8001524:	f001 f832 	bl	800258c <HAL_Delay>
	lcdSendCmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001528:	2006      	movs	r0, #6
 800152a:	f7ff ff35 	bl	8001398 <lcdSendCmd>
	HAL_Delay(1);
 800152e:	2001      	movs	r0, #1
 8001530:	f001 f82c 	bl	800258c <HAL_Delay>
	lcdSendCmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001534:	200c      	movs	r0, #12
 8001536:	f7ff ff2f 	bl	8001398 <lcdSendCmd>
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}

0800153e <lcdSendString>:

void lcdSendString (char *str)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
	while (*str) lcdSendData (*str++);
 8001546:	e006      	b.n	8001556 <lcdSendString+0x18>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff51 	bl	80013f8 <lcdSendData>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1f4      	bne.n	8001548 <lcdSendString+0xa>
}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <floatToString>:



/* ***FLOAT TO STRING *** */

void floatToString (float number, char* floatString){
 8001568:	b580      	push	{r7, lr}
 800156a:	b08a      	sub	sp, #40	; 0x28
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]

	int limit=0;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
	int cnt=1;
 8001576:	2301      	movs	r3, #1
 8001578:	623b      	str	r3, [r7, #32]
	char *p;
	char cadena[17]={0};
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	731a      	strb	r2, [r3, #12]

	memset(floatString,0,17);
 800158c:	2211      	movs	r2, #17
 800158e:	2100      	movs	r1, #0
 8001590:	6838      	ldr	r0, [r7, #0]
 8001592:	f004 f9ab 	bl	80058ec <memset>


	sprintf(cadena, "%.2f",number);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7fe ff50 	bl	800043c <__aeabi_f2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	f107 0008 	add.w	r0, r7, #8
 80015a4:	4918      	ldr	r1, [pc, #96]	; (8001608 <floatToString+0xa0>)
 80015a6:	f004 fe09 	bl	80061bc <siprintf>

	//Busco donde esta el punto flotante para limitar en dos la cantidad de decimales

	p=cadena;
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	61fb      	str	r3, [r7, #28]
	while(*p != '\0'){
 80015b0:	e00b      	b.n	80015ca <floatToString+0x62>
		if(*p == '.'){
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b2e      	cmp	r3, #46	; 0x2e
 80015b8:	d101      	bne.n	80015be <floatToString+0x56>
			limit=cnt;		//limit tiene la posicion del punto flotante
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		p++;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
		cnt++;
 80015c4:	6a3b      	ldr	r3, [r7, #32]
 80015c6:	3301      	adds	r3, #1
 80015c8:	623b      	str	r3, [r7, #32]
	while(*p != '\0'){
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1ef      	bne.n	80015b2 <floatToString+0x4a>
	}

	if(limit<4){    //si el punto flotante esta en la tercera posicion o menor el dato recibido es de temperatura
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	dc09      	bgt.n	80015ec <floatToString+0x84>

	    	strncpy(floatString, cadena, limit+1); //limito en uno los decimales
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	3301      	adds	r3, #1
 80015dc:	461a      	mov	r2, r3
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	4619      	mov	r1, r3
 80015e4:	6838      	ldr	r0, [r7, #0]
 80015e6:	f004 fe18 	bl	800621a <strncpy>
	else{
	    	strncpy(floatString, cadena, limit+2); //limito en dos los decimales
	   }


}
 80015ea:	e008      	b.n	80015fe <floatToString+0x96>
	    	strncpy(floatString, cadena, limit+2); //limito en dos los decimales
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	3302      	adds	r3, #2
 80015f0:	461a      	mov	r2, r3
 80015f2:	f107 0308 	add.w	r3, r7, #8
 80015f6:	4619      	mov	r1, r3
 80015f8:	6838      	ldr	r0, [r7, #0]
 80015fa:	f004 fe0e 	bl	800621a <strncpy>
}
 80015fe:	bf00      	nop
 8001600:	3728      	adds	r7, #40	; 0x28
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	08008708 	.word	0x08008708

0800160c <displayTemp>:



void displayTemp (char* stringTemp){
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]


	char stringToSend[16]="Temp: ";
 8001614:	4a16      	ldr	r2, [pc, #88]	; (8001670 <displayTemp+0x64>)
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800161e:	6018      	str	r0, [r3, #0]
 8001620:	3304      	adds	r3, #4
 8001622:	8019      	strh	r1, [r3, #0]
 8001624:	3302      	adds	r3, #2
 8001626:	0c0a      	lsrs	r2, r1, #16
 8001628:	701a      	strb	r2, [r3, #0]
 800162a:	f107 0317 	add.w	r3, r7, #23
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	721a      	strb	r2, [r3, #8]
	char label[4]={0};
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
	label[0]= 0xDF;
 800163a:	23df      	movs	r3, #223	; 0xdf
 800163c:	733b      	strb	r3, [r7, #12]
	label[1]= 'C';
 800163e:	2343      	movs	r3, #67	; 0x43
 8001640:	737b      	strb	r3, [r7, #13]

	strcat(stringToSend, stringTemp);
 8001642:	f107 0310 	add.w	r3, r7, #16
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	f004 fdd7 	bl	80061fc <strcat>
	strcat(stringToSend, label );
 800164e:	f107 020c 	add.w	r2, r7, #12
 8001652:	f107 0310 	add.w	r3, r7, #16
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f004 fdcf 	bl	80061fc <strcat>

	lcdSendString(stringToSend);
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ff6b 	bl	800153e <lcdSendString>


}
 8001668:	bf00      	nop
 800166a:	3720      	adds	r7, #32
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	08008710 	.word	0x08008710

08001674 <displayPressure>:




void displayPressure(char* stringPress){
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	char stringToSend[16]="P:";
 800167c:	f643 2350 	movw	r3, #14928	; 0x3a50
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	f107 0314 	add.w	r3, r7, #20
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
	char label[4]="hpa";		//tiene que ser 5
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <displayPressure+0x4c>)
 8001690:	60fb      	str	r3, [r7, #12]

	strcat(stringToSend, stringPress);
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	4618      	mov	r0, r3
 800169a:	f004 fdaf 	bl	80061fc <strcat>
	strcat(stringToSend, label );
 800169e:	f107 020c 	add.w	r2, r7, #12
 80016a2:	f107 0310 	add.w	r3, r7, #16
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f004 fda7 	bl	80061fc <strcat>

	lcdSendString(stringToSend);
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff43 	bl	800153e <lcdSendString>

}
 80016b8:	bf00      	nop
 80016ba:	3720      	adds	r7, #32
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	00617068 	.word	0x00617068

080016c4 <displayAlarm>:


void displayAlarm(char* stringAlarm){		//Para mostrar la temperatura que se configura en el modo CONFIG_TEMP
 80016c4:	b5b0      	push	{r4, r5, r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

	char string1Line[17]="Temperatura max:";	//string de la primera linea	//ERA 8 ANTES
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <displayAlarm+0x50>)
 80016ce:	f107 040c 	add.w	r4, r7, #12
 80016d2:	461d      	mov	r5, r3
 80016d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d8:	682b      	ldr	r3, [r5, #0]
 80016da:	7023      	strb	r3, [r4, #0]
	char label[4]={0};
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
	label[0]= 0xDF;	//simbolo de grados (°)
 80016e0:	23df      	movs	r3, #223	; 0xdf
 80016e2:	723b      	strb	r3, [r7, #8]
	label[1]= 'C';
 80016e4:	2343      	movs	r3, #67	; 0x43
 80016e6:	727b      	strb	r3, [r7, #9]

	strcat(stringAlarm, label);		//stringAlarm ahora es la string de la segunda linea.
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	4619      	mov	r1, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f004 fd84 	bl	80061fc <strcat>


	lcdSendString(string1Line);
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff20 	bl	800153e <lcdSendString>
	lcdCursor(1, 0);
 80016fe:	2100      	movs	r1, #0
 8001700:	2001      	movs	r0, #1
 8001702:	f7ff fec0 	bl	8001486 <lcdCursor>
	lcdSendString(stringAlarm);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ff19 	bl	800153e <lcdSendString>

}
 800170c:	bf00      	nop
 800170e:	3720      	adds	r7, #32
 8001710:	46bd      	mov	sp, r7
 8001712:	bdb0      	pop	{r4, r5, r7, pc}
 8001714:	08008720 	.word	0x08008720

08001718 <displayInicioAlarm>:


void displayInicioAlarm(char* stringAlarmFinal){
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]

	char string1Line[16]="Alarma en:";
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <displayInicioAlarm+0x5c>)
 8001722:	f107 0310 	add.w	r3, r7, #16
 8001726:	ca07      	ldmia	r2, {r0, r1, r2}
 8001728:	c303      	stmia	r3!, {r0, r1}
 800172a:	801a      	strh	r2, [r3, #0]
 800172c:	3302      	adds	r3, #2
 800172e:	0c12      	lsrs	r2, r2, #16
 8001730:	701a      	strb	r2, [r3, #0]
 8001732:	f107 031b 	add.w	r3, r7, #27
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	711a      	strb	r2, [r3, #4]
	char label[4]={0};
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
	label[0]= 0xDF;	//simbolo de grados (°)
 8001740:	23df      	movs	r3, #223	; 0xdf
 8001742:	733b      	strb	r3, [r7, #12]
	label[1]= 'C';
 8001744:	2343      	movs	r3, #67	; 0x43
 8001746:	737b      	strb	r3, [r7, #13]

	strcat(stringAlarmFinal, label);
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	4619      	mov	r1, r3
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f004 fd54 	bl	80061fc <strcat>

	lcdSendString(string1Line);
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fef0 	bl	800153e <lcdSendString>
	lcdCursor(1, 0);
 800175e:	2100      	movs	r1, #0
 8001760:	2001      	movs	r0, #1
 8001762:	f7ff fe90 	bl	8001486 <lcdCursor>
	lcdSendString(stringAlarmFinal);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fee9 	bl	800153e <lcdSendString>


}
 800176c:	bf00      	nop
 800176e:	3720      	adds	r7, #32
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	08008734 	.word	0x08008734

08001778 <HAL_GPIO_EXTI_Callback>:
/* === Public variable definitions ============================================================= */

/* === Private variable definitions ============================================================ */

/* === Private function implementation ========================================================= */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]

	while (contReb > 1) {
 8001782:	e005      	b.n	8001790 <HAL_GPIO_EXTI_Callback+0x18>
		contReb--;
 8001784:	4b5a      	ldr	r3, [pc, #360]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x178>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	3b01      	subs	r3, #1
 800178a:	b29a      	uxth	r2, r3
 800178c:	4b58      	ldr	r3, [pc, #352]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x178>)
 800178e:	801a      	strh	r2, [r3, #0]
	while (contReb > 1) {
 8001790:	4b57      	ldr	r3, [pc, #348]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x178>)
 8001792:	881b      	ldrh	r3, [r3, #0]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d8f5      	bhi.n	8001784 <HAL_GPIO_EXTI_Callback+0xc>
	}

	/*   	Rutina boton OK     */
	if (GPIO_Pin == GPIO_PIN_5) {
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	2b20      	cmp	r3, #32
 800179c:	d13e      	bne.n	800181c <HAL_GPIO_EXTI_Callback+0xa4>
		switch (modo) {
 800179e:	4b55      	ldr	r3, [pc, #340]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x17c>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d836      	bhi.n	8001814 <HAL_GPIO_EXTI_Callback+0x9c>
 80017a6:	a201      	add	r2, pc, #4	; (adr r2, 80017ac <HAL_GPIO_EXTI_Callback+0x34>)
 80017a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ac:	080017c9 	.word	0x080017c9
 80017b0:	080017d1 	.word	0x080017d1
 80017b4:	080017d9 	.word	0x080017d9
 80017b8:	080017e7 	.word	0x080017e7
 80017bc:	080017fd 	.word	0x080017fd
 80017c0:	08001805 	.word	0x08001805
 80017c4:	0800180d 	.word	0x0800180d
		case INICIO:
			modo = VER_TEMP;
 80017c8:	4b4a      	ldr	r3, [pc, #296]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x17c>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	701a      	strb	r2, [r3, #0]
			break;
 80017ce:	e022      	b.n	8001816 <HAL_GPIO_EXTI_Callback+0x9e>
		case VER_TEMP:
			modo = VER_PRES;
 80017d0:	4b48      	ldr	r3, [pc, #288]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x17c>)
 80017d2:	2202      	movs	r2, #2
 80017d4:	701a      	strb	r2, [r3, #0]
			break;
 80017d6:	e01e      	b.n	8001816 <HAL_GPIO_EXTI_Callback+0x9e>
		case VER_PRES:
			modo = INICIO;
 80017d8:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x17c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
			act_flag = 1;
 80017de:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x180>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
			break;
 80017e4:	e017      	b.n	8001816 <HAL_GPIO_EXTI_Callback+0x9e>
		case CONFIG_TEMP:
			modo = INICIO_ALARM;
 80017e6:	4b43      	ldr	r3, [pc, #268]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x17c>)
 80017e8:	2204      	movs	r2, #4
 80017ea:	701a      	strb	r2, [r3, #0]
			alarma_final = alarma;
 80017ec:	4b43      	ldr	r3, [pc, #268]	; (80018fc <HAL_GPIO_EXTI_Callback+0x184>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a43      	ldr	r2, [pc, #268]	; (8001900 <HAL_GPIO_EXTI_Callback+0x188>)
 80017f2:	6013      	str	r3, [r2, #0]
			flag_prim_config = 1;
 80017f4:	4b43      	ldr	r3, [pc, #268]	; (8001904 <HAL_GPIO_EXTI_Callback+0x18c>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
			break;
 80017fa:	e00c      	b.n	8001816 <HAL_GPIO_EXTI_Callback+0x9e>
		case INICIO_ALARM:
			modo = VER_TEMP_ALARM;
 80017fc:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x17c>)
 80017fe:	2205      	movs	r2, #5
 8001800:	701a      	strb	r2, [r3, #0]
			break;
 8001802:	e008      	b.n	8001816 <HAL_GPIO_EXTI_Callback+0x9e>
		case VER_TEMP_ALARM:
			modo = VER_PRES_ALARM;
 8001804:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001806:	2206      	movs	r2, #6
 8001808:	701a      	strb	r2, [r3, #0]
			break;
 800180a:	e004      	b.n	8001816 <HAL_GPIO_EXTI_Callback+0x9e>
		case VER_PRES_ALARM:
			modo = INICIO_ALARM;
 800180c:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x17c>)
 800180e:	2204      	movs	r2, #4
 8001810:	701a      	strb	r2, [r3, #0]
			break;
 8001812:	e000      	b.n	8001816 <HAL_GPIO_EXTI_Callback+0x9e>
		default:
			break;
 8001814:	bf00      	nop
		}

		act_flag = 1;
 8001816:	4b38      	ldr	r3, [pc, #224]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x180>)
 8001818:	2201      	movs	r2, #1
 800181a:	701a      	strb	r2, [r3, #0]
	}

	//   	Rutina boton SUBIR     		//Solo sirve para modificar la variable alarma.
	if (GPIO_Pin == GPIO_PIN_2) {
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	2b04      	cmp	r3, #4
 8001820:	d125      	bne.n	800186e <HAL_GPIO_EXTI_Callback+0xf6>
		if (modo == CONFIG_TEMP) {
 8001822:	4b34      	ldr	r3, [pc, #208]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d11e      	bne.n	8001868 <HAL_GPIO_EXTI_Callback+0xf0>
			alarma = alarma + 0.1;
 800182a:	4b34      	ldr	r3, [pc, #208]	; (80018fc <HAL_GPIO_EXTI_Callback+0x184>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fe04 	bl	800043c <__aeabi_f2d>
 8001834:	a32c      	add	r3, pc, #176	; (adr r3, 80018e8 <HAL_GPIO_EXTI_Callback+0x170>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe fca1 	bl	8000180 <__adddf3>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff f949 	bl	8000adc <__aeabi_d2f>
 800184a:	4603      	mov	r3, r0
 800184c:	4a2b      	ldr	r2, [pc, #172]	; (80018fc <HAL_GPIO_EXTI_Callback+0x184>)
 800184e:	6013      	str	r3, [r2, #0]
			if (alarma > 10.0) {
 8001850:	4b2a      	ldr	r3, [pc, #168]	; (80018fc <HAL_GPIO_EXTI_Callback+0x184>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	492c      	ldr	r1, [pc, #176]	; (8001908 <HAL_GPIO_EXTI_Callback+0x190>)
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f9fc 	bl	8000c54 <__aeabi_fcmpgt>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <HAL_GPIO_EXTI_Callback+0xf0>
				alarma = 10.0;
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <HAL_GPIO_EXTI_Callback+0x184>)
 8001864:	4a28      	ldr	r2, [pc, #160]	; (8001908 <HAL_GPIO_EXTI_Callback+0x190>)
 8001866:	601a      	str	r2, [r3, #0]
			}
		}
		act_flag = 1;
 8001868:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x180>)
 800186a:	2201      	movs	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]
	}

	//Rutina boton BAJAR
	if (GPIO_Pin == GPIO_PIN_1) {
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d127      	bne.n	80018c4 <HAL_GPIO_EXTI_Callback+0x14c>
		if (modo == CONFIG_TEMP) {
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b03      	cmp	r3, #3
 800187a:	d120      	bne.n	80018be <HAL_GPIO_EXTI_Callback+0x146>
			alarma = alarma - 0.1;
 800187c:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <HAL_GPIO_EXTI_Callback+0x184>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fddb 	bl	800043c <__aeabi_f2d>
 8001886:	a318      	add	r3, pc, #96	; (adr r3, 80018e8 <HAL_GPIO_EXTI_Callback+0x170>)
 8001888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800188c:	f7fe fc76 	bl	800017c <__aeabi_dsub>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	f7ff f920 	bl	8000adc <__aeabi_d2f>
 800189c:	4603      	mov	r3, r0
 800189e:	4a17      	ldr	r2, [pc, #92]	; (80018fc <HAL_GPIO_EXTI_Callback+0x184>)
 80018a0:	6013      	str	r3, [r2, #0]
			if (alarma < 0) {
 80018a2:	4b16      	ldr	r3, [pc, #88]	; (80018fc <HAL_GPIO_EXTI_Callback+0x184>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f04f 0100 	mov.w	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff f9b4 	bl	8000c18 <__aeabi_fcmplt>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_EXTI_Callback+0x146>
				alarma = 0;
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <HAL_GPIO_EXTI_Callback+0x184>)
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
			}
		}
		act_flag = 1;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x180>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	701a      	strb	r2, [r3, #0]
	}

	// Rutina boton CONFIG
	if (GPIO_Pin == GPIO_PIN_3) {
 80018c4:	88fb      	ldrh	r3, [r7, #6]
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d105      	bne.n	80018d6 <HAL_GPIO_EXTI_Callback+0x15e>
		modo = CONFIG_TEMP;
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x17c>)
 80018cc:	2203      	movs	r2, #3
 80018ce:	701a      	strb	r2, [r3, #0]
		act_flag = 1;
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_GPIO_EXTI_Callback+0x180>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
	}
	contReb = 2000;
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_GPIO_EXTI_Callback+0x178>)
 80018d8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018dc:	801a      	strh	r2, [r3, #0]
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	9999999a 	.word	0x9999999a
 80018ec:	3fb99999 	.word	0x3fb99999
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000271 	.word	0x20000271
 80018f8:	2000001c 	.word	0x2000001c
 80018fc:	20000274 	.word	0x20000274
 8001900:	20000018 	.word	0x20000018
 8001904:	20000278 	.word	0x20000278
 8001908:	41200000 	.word	0x41200000

0800190c <HAL_TIM_IC_CaptureCallback>:



/* === Public function implementation ========================================================== */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]

	while (contReb > 1) {
 8001914:	e005      	b.n	8001922 <HAL_TIM_IC_CaptureCallback+0x16>
		contReb--;
 8001916:	4b29      	ldr	r3, [pc, #164]	; (80019bc <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	3b01      	subs	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	4b27      	ldr	r3, [pc, #156]	; (80019bc <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001920:	801a      	strh	r2, [r3, #0]
	while (contReb > 1) {
 8001922:	4b26      	ldr	r3, [pc, #152]	; (80019bc <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001924:	881b      	ldrh	r3, [r3, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d8f5      	bhi.n	8001916 <HAL_TIM_IC_CaptureCallback+0xa>
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {//Verifica que la interrupcion provenga del channel 1.
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	7f1b      	ldrb	r3, [r3, #28]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d13b      	bne.n	80019aa <HAL_TIM_IC_CaptureCallback+0x9e>

		if (modo < CONFIG_TEMP) {
 8001932:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d803      	bhi.n	8001942 <HAL_TIM_IC_CaptureCallback+0x36>
			modo = INICIO;
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e01e      	b.n	8001980 <HAL_TIM_IC_CaptureCallback+0x74>
			//act_flag = 1;
		} else if ((modo == CONFIG_TEMP) && (flag_prim_config == 0)) {
 8001942:	4b1f      	ldr	r3, [pc, #124]	; (80019c0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b03      	cmp	r3, #3
 8001948:	d107      	bne.n	800195a <HAL_TIM_IC_CaptureCallback+0x4e>
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d103      	bne.n	800195a <HAL_TIM_IC_CaptureCallback+0x4e>
			modo = INICIO;
 8001952:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8001954:	2200      	movs	r2, #0
 8001956:	701a      	strb	r2, [r3, #0]
 8001958:	e012      	b.n	8001980 <HAL_TIM_IC_CaptureCallback+0x74>
			//act_flag = 1;
		} else if ((modo == CONFIG_TEMP) && (flag_prim_config == 1)) {
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b03      	cmp	r3, #3
 8001960:	d10b      	bne.n	800197a <HAL_TIM_IC_CaptureCallback+0x6e>
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d107      	bne.n	800197a <HAL_TIM_IC_CaptureCallback+0x6e>
			modo = INICIO_ALARM;
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800196c:	2204      	movs	r2, #4
 800196e:	701a      	strb	r2, [r3, #0]
			alarma = alarma_final;//Para no perder el valor de alarma que configure.
 8001970:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a15      	ldr	r2, [pc, #84]	; (80019cc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001976:	6013      	str	r3, [r2, #0]
 8001978:	e002      	b.n	8001980 <HAL_TIM_IC_CaptureCallback+0x74>

		} else {
			modo = INICIO_ALARM;
 800197a:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800197c:	2204      	movs	r2, #4
 800197e:	701a      	strb	r2, [r3, #0]

		}

		act_flag = 1;
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001982:	2201      	movs	r2, #1
 8001984:	701a      	strb	r2, [r3, #0]

		ICValue = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8001986:	2100      	movs	r1, #0
 8001988:	4812      	ldr	r0, [pc, #72]	; (80019d4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800198a:	f003 fbfd 	bl	8005188 <HAL_TIM_ReadCapturedValue>
 800198e:	4603      	mov	r3, r0
 8001990:	4a11      	ldr	r2, [pc, #68]	; (80019d8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001992:	6013      	str	r3, [r2, #0]

		if (ICValue != 0) {
 8001994:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d006      	beq.n	80019aa <HAL_TIM_IC_CaptureCallback+0x9e>

			ancho_pulso = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 800199c:	2104      	movs	r1, #4
 800199e:	480d      	ldr	r0, [pc, #52]	; (80019d4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80019a0:	f003 fbf2 	bl	8005188 <HAL_TIM_ReadCapturedValue>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4a0d      	ldr	r2, [pc, #52]	; (80019dc <HAL_TIM_IC_CaptureCallback+0xd0>)
 80019a8:	6013      	str	r3, [r2, #0]

		}

	}

	contReb = 2000;
 80019aa:	4b04      	ldr	r3, [pc, #16]	; (80019bc <HAL_TIM_IC_CaptureCallback+0xb0>)
 80019ac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019b0:	801a      	strh	r2, [r3, #0]
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000271 	.word	0x20000271
 80019c4:	20000278 	.word	0x20000278
 80019c8:	20000018 	.word	0x20000018
 80019cc:	20000274 	.word	0x20000274
 80019d0:	2000001c 	.word	0x2000001c
 80019d4:	20000320 	.word	0x20000320
 80019d8:	2000027c 	.word	0x2000027c
 80019dc:	20000280 	.word	0x20000280

080019e0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a13      	ldr	r2, [pc, #76]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d11e      	bne.n	8001a2e <HAL_TIM_PeriodElapsedCallback+0x4e>

		flag_medicion = 1;//El timer me hace tomar mediciones cada cierto tiempo
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]

		if (flag_alarma == 1) {				//Toglea el led cada 0.5 segundos.
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d105      	bne.n	8001a0a <HAL_TIM_PeriodElapsedCallback+0x2a>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80019fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a02:	4810      	ldr	r0, [pc, #64]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a04:	f001 f8a7 	bl	8002b56 <HAL_GPIO_TogglePin>
				&& HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {	//Para que apague el led una sola vez y no tenga que estar entrando todo el tiempo.
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
		}

	}
}
 8001a08:	e011      	b.n	8001a2e <HAL_TIM_PeriodElapsedCallback+0x4e>
		} else if (flag_alarma == 0
 8001a0a:	4b0d      	ldr	r3, [pc, #52]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10d      	bne.n	8001a2e <HAL_TIM_PeriodElapsedCallback+0x4e>
				&& HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {	//Para que apague el led una sola vez y no tenga que estar entrando todo el tiempo.
 8001a12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a16:	480b      	ldr	r0, [pc, #44]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a18:	f001 f86e 	bl	8002af8 <HAL_GPIO_ReadPin>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d105      	bne.n	8001a2e <HAL_TIM_PeriodElapsedCallback+0x4e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a28:	4806      	ldr	r0, [pc, #24]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001a2a:	f001 f87c 	bl	8002b26 <HAL_GPIO_WritePin>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200002d8 	.word	0x200002d8
 8001a3c:	2000027a 	.word	0x2000027a
 8001a40:	20000279 	.word	0x20000279
 8001a44:	40011000 	.word	0x40011000

08001a48 <MX_I2C1_Init>:

void MX_I2C1_Init(void) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a4e:	4a13      	ldr	r2, [pc, #76]	; (8001a9c <MX_I2C1_Init+0x54>)
 8001a50:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a54:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <MX_I2C1_Init+0x58>)
 8001a56:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a64:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a6a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <MX_I2C1_Init+0x50>)
 8001a86:	f001 f897 	bl	8002bb8 <HAL_I2C_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001a90:	f000 fafe 	bl	8002090 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000284 	.word	0x20000284
 8001a9c:	40005400 	.word	0x40005400
 8001aa0:	000186a0 	.word	0x000186a0

08001aa4 <MX_TIM2_Init>:

void MX_TIM2_Init(void) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ab8:	463b      	mov	r3, r7
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <MX_TIM2_Init+0x98>)
 8001ac2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ac6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8000 - 1;
 8001ac8:	4b1c      	ldr	r3, [pc, #112]	; (8001b3c <MX_TIM2_Init+0x98>)
 8001aca:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001ace:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad0:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <MX_TIM2_Init+0x98>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 500;
 8001ad6:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <MX_TIM2_Init+0x98>)
 8001ad8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001adc:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <MX_TIM2_Init+0x98>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <MX_TIM2_Init+0x98>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001aea:	4814      	ldr	r0, [pc, #80]	; (8001b3c <MX_TIM2_Init+0x98>)
 8001aec:	f002 fdea 	bl	80046c4 <HAL_TIM_Base_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM2_Init+0x56>
		Error_Handler();
 8001af6:	f000 facb 	bl	8002090 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afe:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001b00:	f107 0308 	add.w	r3, r7, #8
 8001b04:	4619      	mov	r1, r3
 8001b06:	480d      	ldr	r0, [pc, #52]	; (8001b3c <MX_TIM2_Init+0x98>)
 8001b08:	f003 fa38 	bl	8004f7c <HAL_TIM_ConfigClockSource>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM2_Init+0x72>
		Error_Handler();
 8001b12:	f000 fabd 	bl	8002090 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b16:	2300      	movs	r3, #0
 8001b18:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001b1e:	463b      	mov	r3, r7
 8001b20:	4619      	mov	r1, r3
 8001b22:	4806      	ldr	r0, [pc, #24]	; (8001b3c <MX_TIM2_Init+0x98>)
 8001b24:	f003 fe48 	bl	80057b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001b2e:	f000 faaf 	bl	8002090 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200002d8 	.word	0x200002d8

08001b40 <MX_TIM3_Init>:

void MX_TIM3_Init(void) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b090      	sub	sp, #64	; 0x40
 8001b44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001b46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001b54:	f107 031c 	add.w	r3, r7, #28
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001b64:	f107 030c 	add.w	r3, r7, #12
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001b7a:	4b3e      	ldr	r3, [pc, #248]	; (8001c74 <MX_TIM3_Init+0x134>)
 8001b7c:	4a3e      	ldr	r2, [pc, #248]	; (8001c78 <MX_TIM3_Init+0x138>)
 8001b7e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 8000 - 1;
 8001b80:	4b3c      	ldr	r3, [pc, #240]	; (8001c74 <MX_TIM3_Init+0x134>)
 8001b82:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001b86:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b88:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <MX_TIM3_Init+0x134>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001b8e:	4b39      	ldr	r3, [pc, #228]	; (8001c74 <MX_TIM3_Init+0x134>)
 8001b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b94:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b96:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <MX_TIM3_Init+0x134>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9c:	4b35      	ldr	r3, [pc, #212]	; (8001c74 <MX_TIM3_Init+0x134>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001ba2:	4834      	ldr	r0, [pc, #208]	; (8001c74 <MX_TIM3_Init+0x134>)
 8001ba4:	f002 fd8e 	bl	80046c4 <HAL_TIM_Base_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM3_Init+0x72>
		Error_Handler();
 8001bae:	f000 fa6f 	bl	8002090 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001bb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	482d      	ldr	r0, [pc, #180]	; (8001c74 <MX_TIM3_Init+0x134>)
 8001bc0:	f003 f9dc 	bl	8004f7c <HAL_TIM_ConfigClockSource>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM3_Init+0x8e>
		Error_Handler();
 8001bca:	f000 fa61 	bl	8002090 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK) {
 8001bce:	4829      	ldr	r0, [pc, #164]	; (8001c74 <MX_TIM3_Init+0x134>)
 8001bd0:	f002 fe1a 	bl	8004808 <HAL_TIM_IC_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM3_Init+0x9e>
		Error_Handler();
 8001bda:	f000 fa59 	bl	8002090 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001bde:	2304      	movs	r3, #4
 8001be0:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001be2:	2350      	movs	r3, #80	; 0x50
 8001be4:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001be6:	2302      	movs	r3, #2
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62bb      	str	r3, [r7, #40]	; 0x28
	sSlaveConfig.TriggerFilter = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK) {
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	481e      	ldr	r0, [pc, #120]	; (8001c74 <MX_TIM3_Init+0x134>)
 8001bfa:	f003 fa83 	bl	8005104 <HAL_TIM_SlaveConfigSynchro>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_TIM3_Init+0xc8>
		Error_Handler();
 8001c04:	f000 fa44 	bl	8002090 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001c18:	f107 030c 	add.w	r3, r7, #12
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4814      	ldr	r0, [pc, #80]	; (8001c74 <MX_TIM3_Init+0x134>)
 8001c22:	f003 f917 	bl	8004e54 <HAL_TIM_IC_ConfigChannel>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM3_Init+0xf0>
		Error_Handler();
 8001c2c:	f000 fa30 	bl	8002090 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001c34:	2302      	movs	r3, #2
 8001c36:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8001c38:	f107 030c 	add.w	r3, r7, #12
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	480c      	ldr	r0, [pc, #48]	; (8001c74 <MX_TIM3_Init+0x134>)
 8001c42:	f003 f907 	bl	8004e54 <HAL_TIM_IC_ConfigChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_TIM3_Init+0x110>
		Error_Handler();
 8001c4c:	f000 fa20 	bl	8002090 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4805      	ldr	r0, [pc, #20]	; (8001c74 <MX_TIM3_Init+0x134>)
 8001c5e:	f003 fdab 	bl	80057b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM3_Init+0x12c>
			!= HAL_OK) {
		Error_Handler();
 8001c68:	f000 fa12 	bl	8002090 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001c6c:	bf00      	nop
 8001c6e:	3740      	adds	r7, #64	; 0x40
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000320 	.word	0x20000320
 8001c78:	40000400 	.word	0x40000400

08001c7c <medirTempPres>:
/* === Private variable definitions ============================================================ */

/* === Private function implementation ========================================================= */

/* === Public function implementation ========================================================== */
void medirTempPres(void) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	if (flag_medicion == 1) {
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <medirTempPres+0x2c>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d10d      	bne.n	8001ca4 <medirTempPres+0x28>

		temp = getTemperature();
 8001c88:	f7ff f90a 	bl	8000ea0 <getTemperature>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4a07      	ldr	r2, [pc, #28]	; (8001cac <medirTempPres+0x30>)
 8001c90:	6013      	str	r3, [r2, #0]
		press = getPressure(1);
 8001c92:	2001      	movs	r0, #1
 8001c94:	f7ff f99e 	bl	8000fd4 <getPressure>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <medirTempPres+0x34>)
 8001c9c:	6013      	str	r3, [r2, #0]

		flag_medicion = 0;
 8001c9e:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <medirTempPres+0x2c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]

	}

}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	2000027a 	.word	0x2000027a
 8001cac:	20000258 	.word	0x20000258
 8001cb0:	2000025c 	.word	0x2000025c

08001cb4 <actualizarPantalla>:

}
*/

/*	Debería tener un forma de que no se actualice hasta que no haya cambios en lo que hay que mostrar	*/
void actualizarPantalla(void) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
	switch (modo) {
 8001cb8:	4b4c      	ldr	r3, [pc, #304]	; (8001dec <actualizarPantalla+0x138>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b06      	cmp	r3, #6
 8001cbe:	f200 8088 	bhi.w	8001dd2 <actualizarPantalla+0x11e>
 8001cc2:	a201      	add	r2, pc, #4	; (adr r2, 8001cc8 <actualizarPantalla+0x14>)
 8001cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc8:	08001ce5 	.word	0x08001ce5
 8001ccc:	08001d07 	.word	0x08001d07
 8001cd0:	08001d3f 	.word	0x08001d3f
 8001cd4:	08001d77 	.word	0x08001d77
 8001cd8:	08001da5 	.word	0x08001da5
 8001cdc:	08001d07 	.word	0x08001d07
 8001ce0:	08001d3f 	.word	0x08001d3f
	case INICIO:
		if (act_flag == 1) {
 8001ce4:	4b42      	ldr	r3, [pc, #264]	; (8001df0 <actualizarPantalla+0x13c>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d174      	bne.n	8001dd6 <actualizarPantalla+0x122>
			lcdClear();
 8001cec:	f7ff fbb4 	bl	8001458 <lcdClear>
			lcdCursor(0, 0);
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f7ff fbc7 	bl	8001486 <lcdCursor>
			lcdSendString("Sin alarma");
 8001cf8:	483e      	ldr	r0, [pc, #248]	; (8001df4 <actualizarPantalla+0x140>)
 8001cfa:	f7ff fc20 	bl	800153e <lcdSendString>
			act_flag = 0;
 8001cfe:	4b3c      	ldr	r3, [pc, #240]	; (8001df0 <actualizarPantalla+0x13c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001d04:	e067      	b.n	8001dd6 <actualizarPantalla+0x122>
	case VER_TEMP_ALARM:
	case VER_TEMP:
		//En el caso de la visualizacion de temp y pres en el display, la actualizacion de pantalla se da solo cuando se detectan
		//cambios en el valor actual
		floatToString(temp, str_temp);
 8001d06:	4b3c      	ldr	r3, [pc, #240]	; (8001df8 <actualizarPantalla+0x144>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	493c      	ldr	r1, [pc, #240]	; (8001dfc <actualizarPantalla+0x148>)
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fc2b 	bl	8001568 <floatToString>
		if (strcmp(str_actual, str_temp)!=0) {
 8001d12:	493a      	ldr	r1, [pc, #232]	; (8001dfc <actualizarPantalla+0x148>)
 8001d14:	483a      	ldr	r0, [pc, #232]	; (8001e00 <actualizarPantalla+0x14c>)
 8001d16:	f7fe fa1b 	bl	8000150 <strcmp>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d05c      	beq.n	8001dda <actualizarPantalla+0x126>

			lcdClear();
 8001d20:	f7ff fb9a 	bl	8001458 <lcdClear>
			lcdCursor(0, 0);
 8001d24:	2100      	movs	r1, #0
 8001d26:	2000      	movs	r0, #0
 8001d28:	f7ff fbad 	bl	8001486 <lcdCursor>
			displayTemp(str_temp);//displayTemp toma el string que contiene el valor de temperatura, le agrega los labels y lo manda por pantalla.
 8001d2c:	4833      	ldr	r0, [pc, #204]	; (8001dfc <actualizarPantalla+0x148>)
 8001d2e:	f7ff fc6d 	bl	800160c <displayTemp>
			strncpy(str_actual, str_temp,17);
 8001d32:	2211      	movs	r2, #17
 8001d34:	4931      	ldr	r1, [pc, #196]	; (8001dfc <actualizarPantalla+0x148>)
 8001d36:	4832      	ldr	r0, [pc, #200]	; (8001e00 <actualizarPantalla+0x14c>)
 8001d38:	f004 fa6f 	bl	800621a <strncpy>
		}

		break;
 8001d3c:	e04d      	b.n	8001dda <actualizarPantalla+0x126>
	case VER_PRES_ALARM:
	case VER_PRES:
		floatToString(press, str_temp);
 8001d3e:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <actualizarPantalla+0x150>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	492e      	ldr	r1, [pc, #184]	; (8001dfc <actualizarPantalla+0x148>)
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fc0f 	bl	8001568 <floatToString>
		if (strcmp(str_actual, str_temp)!=0) {
 8001d4a:	492c      	ldr	r1, [pc, #176]	; (8001dfc <actualizarPantalla+0x148>)
 8001d4c:	482c      	ldr	r0, [pc, #176]	; (8001e00 <actualizarPantalla+0x14c>)
 8001d4e:	f7fe f9ff 	bl	8000150 <strcmp>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d042      	beq.n	8001dde <actualizarPantalla+0x12a>

			lcdClear();
 8001d58:	f7ff fb7e 	bl	8001458 <lcdClear>
			lcdCursor(0, 0);
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f7ff fb91 	bl	8001486 <lcdCursor>
			displayPressure(str_temp);
 8001d64:	4825      	ldr	r0, [pc, #148]	; (8001dfc <actualizarPantalla+0x148>)
 8001d66:	f7ff fc85 	bl	8001674 <displayPressure>
			strncpy(str_actual, str_temp,17);
 8001d6a:	2211      	movs	r2, #17
 8001d6c:	4923      	ldr	r1, [pc, #140]	; (8001dfc <actualizarPantalla+0x148>)
 8001d6e:	4824      	ldr	r0, [pc, #144]	; (8001e00 <actualizarPantalla+0x14c>)
 8001d70:	f004 fa53 	bl	800621a <strncpy>
		}
		break;
 8001d74:	e033      	b.n	8001dde <actualizarPantalla+0x12a>
	case CONFIG_TEMP:
		//Para todos los demas modos, la actualizacion de pantalla se permite cuando la interrupcion externa correspondiente
		//activa la bandera act_flag
		if (act_flag == 1) {
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <actualizarPantalla+0x13c>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d131      	bne.n	8001de2 <actualizarPantalla+0x12e>
			floatToString(alarma, str_temp);
 8001d7e:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <actualizarPantalla+0x154>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	491e      	ldr	r1, [pc, #120]	; (8001dfc <actualizarPantalla+0x148>)
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fbef 	bl	8001568 <floatToString>
			lcdClear();
 8001d8a:	f7ff fb65 	bl	8001458 <lcdClear>
			lcdCursor(0, 0);
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2000      	movs	r0, #0
 8001d92:	f7ff fb78 	bl	8001486 <lcdCursor>
			displayAlarm(str_temp);
 8001d96:	4819      	ldr	r0, [pc, #100]	; (8001dfc <actualizarPantalla+0x148>)
 8001d98:	f7ff fc94 	bl	80016c4 <displayAlarm>
			act_flag = 0;
 8001d9c:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <actualizarPantalla+0x13c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001da2:	e01e      	b.n	8001de2 <actualizarPantalla+0x12e>
	case INICIO_ALARM:
		if (act_flag == 1) {
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <actualizarPantalla+0x13c>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d11c      	bne.n	8001de6 <actualizarPantalla+0x132>
			floatToString(alarma_final, str_temp);
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <actualizarPantalla+0x158>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4912      	ldr	r1, [pc, #72]	; (8001dfc <actualizarPantalla+0x148>)
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fbd8 	bl	8001568 <floatToString>
			lcdClear();
 8001db8:	f7ff fb4e 	bl	8001458 <lcdClear>
			lcdCursor(0, 0);
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f7ff fb61 	bl	8001486 <lcdCursor>
			displayInicioAlarm(str_temp);
 8001dc4:	480d      	ldr	r0, [pc, #52]	; (8001dfc <actualizarPantalla+0x148>)
 8001dc6:	f7ff fca7 	bl	8001718 <displayInicioAlarm>
			act_flag = 0;
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <actualizarPantalla+0x13c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001dd0:	e009      	b.n	8001de6 <actualizarPantalla+0x132>
	default:
		break;
 8001dd2:	bf00      	nop
 8001dd4:	e008      	b.n	8001de8 <actualizarPantalla+0x134>
		break;
 8001dd6:	bf00      	nop
 8001dd8:	e006      	b.n	8001de8 <actualizarPantalla+0x134>
		break;
 8001dda:	bf00      	nop
 8001ddc:	e004      	b.n	8001de8 <actualizarPantalla+0x134>
		break;
 8001dde:	bf00      	nop
 8001de0:	e002      	b.n	8001de8 <actualizarPantalla+0x134>
		break;
 8001de2:	bf00      	nop
 8001de4:	e000      	b.n	8001de8 <actualizarPantalla+0x134>
		break;
 8001de6:	bf00      	nop

	}

}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000271 	.word	0x20000271
 8001df0:	2000001c 	.word	0x2000001c
 8001df4:	08008744 	.word	0x08008744
 8001df8:	20000258 	.word	0x20000258
 8001dfc:	20000260 	.word	0x20000260
 8001e00:	20000004 	.word	0x20000004
 8001e04:	2000025c 	.word	0x2000025c
 8001e08:	20000274 	.word	0x20000274
 8001e0c:	20000018 	.word	0x20000018

08001e10 <comprobarAlarma>:

void comprobarAlarma(void) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0

	//Si se tiene que activar la alarma, se activa una bandera para que el timer toglee el led. Asi no uso HAL_delay en el programa principal
	if (alarma_final < temp) {
 8001e14:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <comprobarAlarma+0x2c>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a09      	ldr	r2, [pc, #36]	; (8001e40 <comprobarAlarma+0x30>)
 8001e1a:	6812      	ldr	r2, [r2, #0]
 8001e1c:	4611      	mov	r1, r2
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fefa 	bl	8000c18 <__aeabi_fcmplt>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <comprobarAlarma+0x22>
		flag_alarma = 1;
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <comprobarAlarma+0x34>)
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
	} else {
		flag_alarma = 0;
	}

}
 8001e30:	e002      	b.n	8001e38 <comprobarAlarma+0x28>
		flag_alarma = 0;
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <comprobarAlarma+0x34>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000018 	.word	0x20000018
 8001e40:	20000258 	.word	0x20000258
 8001e44:	20000279 	.word	0x20000279

08001e48 <comprobarPulsacionLarga>:

void comprobarPulsacionLarga(void) {
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0

	if (ancho_pulso >= 3000) {
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <comprobarPulsacionLarga+0x44>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d915      	bls.n	8001e84 <comprobarPulsacionLarga+0x3c>
		ancho_pulso = 0;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <comprobarPulsacionLarga+0x44>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
		ICValue = 0;
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <comprobarPulsacionLarga+0x48>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
		modo = INICIO;
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <comprobarPulsacionLarga+0x4c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
		act_flag = 1;
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <comprobarPulsacionLarga+0x50>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
		alarma = 0;
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <comprobarPulsacionLarga+0x54>)
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
		alarma_final = 250.0;
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <comprobarPulsacionLarga+0x58>)
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <comprobarPulsacionLarga+0x5c>)
 8001e7c:	601a      	str	r2, [r3, #0]
		flag_prim_config=0;
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <comprobarPulsacionLarga+0x60>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]

	}

}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	20000280 	.word	0x20000280
 8001e90:	2000027c 	.word	0x2000027c
 8001e94:	20000271 	.word	0x20000271
 8001e98:	2000001c 	.word	0x2000001c
 8001e9c:	20000274 	.word	0x20000274
 8001ea0:	20000018 	.word	0x20000018
 8001ea4:	437a0000 	.word	0x437a0000
 8001ea8:	20000278 	.word	0x20000278

08001eac <loop>:

void loop(void) {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0

	medirTempPres();
 8001eb0:	f7ff fee4 	bl	8001c7c <medirTempPres>
	//actualizarValores();
	actualizarPantalla();
 8001eb4:	f7ff fefe 	bl	8001cb4 <actualizarPantalla>
	comprobarAlarma();
 8001eb8:	f7ff ffaa 	bl	8001e10 <comprobarAlarma>
	comprobarPulsacionLarga();
 8001ebc:	f7ff ffc4 	bl	8001e48 <comprobarPulsacionLarga>

}
 8001ec0:	bf00      	nop
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ec8:	f000 fafe 	bl	80024c8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ecc:	f000 f81e 	bl	8001f0c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ed0:	f000 f856 	bl	8001f80 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001ed4:	f7ff fdb8 	bl	8001a48 <MX_I2C1_Init>
	MX_TIM2_Init();
 8001ed8:	f7ff fde4 	bl	8001aa4 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001edc:	f7ff fe30 	bl	8001b40 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	bmpInit();
 8001ee0:	f7ff fa54 	bl	800138c <bmpInit>
	lcdInit();
 8001ee4:	f7ff faee 	bl	80014c4 <lcdInit>
	HAL_TIM_Base_Start_IT(&htim2);
 8001ee8:	4806      	ldr	r0, [pc, #24]	; (8001f04 <main+0x40>)
 8001eea:	f002 fc3b 	bl	8004764 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Inicializacion del timer 3 en modo input capture channel 1 (para rising edge)
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4805      	ldr	r0, [pc, #20]	; (8001f08 <main+0x44>)
 8001ef2:	f002 fda1 	bl	8004a38 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2); //channel 2 (que detecta los falling edge)
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	4803      	ldr	r0, [pc, #12]	; (8001f08 <main+0x44>)
 8001efa:	f002 fcdd 	bl	80048b8 <HAL_TIM_IC_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		loop();
 8001efe:	f7ff ffd5 	bl	8001eac <loop>
 8001f02:	e7fc      	b.n	8001efe <main+0x3a>
 8001f04:	200002d8 	.word	0x200002d8
 8001f08:	20000320 	.word	0x20000320

08001f0c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b090      	sub	sp, #64	; 0x40
 8001f10:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001f12:	f107 0318 	add.w	r3, r7, #24
 8001f16:	2228      	movs	r2, #40	; 0x28
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 fce6 	bl	80058ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
 8001f2c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f36:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f3c:	f107 0318 	add.w	r3, r7, #24
 8001f40:	4618      	mov	r0, r3
 8001f42:	f001 ffb9 	bl	8003eb8 <HAL_RCC_OscConfig>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <SystemClock_Config+0x44>
		Error_Handler();
 8001f4c:	f000 f8a0 	bl	8002090 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f50:	230f      	movs	r3, #15
 8001f52:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001f54:	2301      	movs	r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 fa27 	bl	80043bc <HAL_RCC_ClockConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <SystemClock_Config+0x6c>
		Error_Handler();
 8001f74:	f000 f88c 	bl	8002090 <Error_Handler>
	}
}
 8001f78:	bf00      	nop
 8001f7a:	3740      	adds	r7, #64	; 0x40
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001f86:	f107 0310 	add.w	r3, r7, #16
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001f94:	4b3a      	ldr	r3, [pc, #232]	; (8002080 <MX_GPIO_Init+0x100>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4a39      	ldr	r2, [pc, #228]	; (8002080 <MX_GPIO_Init+0x100>)
 8001f9a:	f043 0310 	orr.w	r3, r3, #16
 8001f9e:	6193      	str	r3, [r2, #24]
 8001fa0:	4b37      	ldr	r3, [pc, #220]	; (8002080 <MX_GPIO_Init+0x100>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	f003 0310 	and.w	r3, r3, #16
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001fac:	4b34      	ldr	r3, [pc, #208]	; (8002080 <MX_GPIO_Init+0x100>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	4a33      	ldr	r2, [pc, #204]	; (8002080 <MX_GPIO_Init+0x100>)
 8001fb2:	f043 0320 	orr.w	r3, r3, #32
 8001fb6:	6193      	str	r3, [r2, #24]
 8001fb8:	4b31      	ldr	r3, [pc, #196]	; (8002080 <MX_GPIO_Init+0x100>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc4:	4b2e      	ldr	r3, [pc, #184]	; (8002080 <MX_GPIO_Init+0x100>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	4a2d      	ldr	r2, [pc, #180]	; (8002080 <MX_GPIO_Init+0x100>)
 8001fca:	f043 0304 	orr.w	r3, r3, #4
 8001fce:	6193      	str	r3, [r2, #24]
 8001fd0:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <MX_GPIO_Init+0x100>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001fdc:	4b28      	ldr	r3, [pc, #160]	; (8002080 <MX_GPIO_Init+0x100>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a27      	ldr	r2, [pc, #156]	; (8002080 <MX_GPIO_Init+0x100>)
 8001fe2:	f043 0308 	orr.w	r3, r3, #8
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <MX_GPIO_Init+0x100>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	603b      	str	r3, [r7, #0]
 8001ff2:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ffa:	4822      	ldr	r0, [pc, #136]	; (8002084 <MX_GPIO_Init+0x104>)
 8001ffc:	f000 fd93 	bl	8002b26 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002000:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002004:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002006:	2301      	movs	r3, #1
 8002008:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	2302      	movs	r3, #2
 8002010:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002012:	f107 0310 	add.w	r3, r7, #16
 8002016:	4619      	mov	r1, r3
 8002018:	481a      	ldr	r0, [pc, #104]	; (8002084 <MX_GPIO_Init+0x104>)
 800201a:	f000 fbe9 	bl	80027f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA2 PA3 PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5;
 800201e:	232e      	movs	r3, #46	; 0x2e
 8002020:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002022:	4b19      	ldr	r3, [pc, #100]	; (8002088 <MX_GPIO_Init+0x108>)
 8002024:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202a:	f107 0310 	add.w	r3, r7, #16
 800202e:	4619      	mov	r1, r3
 8002030:	4816      	ldr	r0, [pc, #88]	; (800208c <MX_GPIO_Init+0x10c>)
 8002032:	f000 fbdd 	bl	80027f0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	2007      	movs	r0, #7
 800203c:	f000 fba1 	bl	8002782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002040:	2007      	movs	r0, #7
 8002042:	f000 fbba 	bl	80027ba <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	2008      	movs	r0, #8
 800204c:	f000 fb99 	bl	8002782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002050:	2008      	movs	r0, #8
 8002052:	f000 fbb2 	bl	80027ba <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	2009      	movs	r0, #9
 800205c:	f000 fb91 	bl	8002782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002060:	2009      	movs	r0, #9
 8002062:	f000 fbaa 	bl	80027ba <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	2017      	movs	r0, #23
 800206c:	f000 fb89 	bl	8002782 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002070:	2017      	movs	r0, #23
 8002072:	f000 fba2 	bl	80027ba <HAL_NVIC_EnableIRQ>

}
 8002076:	bf00      	nop
 8002078:	3720      	adds	r7, #32
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000
 8002084:	40011000 	.word	0x40011000
 8002088:	10110000 	.word	0x10110000
 800208c:	40010800 	.word	0x40010800

08002090 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002094:	b672      	cpsid	i
}
 8002096:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002098:	e7fe      	b.n	8002098 <Error_Handler+0x8>
	...

0800209c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020a2:	4b16      	ldr	r3, [pc, #88]	; (80020fc <HAL_MspInit+0x60>)
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	4a15      	ldr	r2, [pc, #84]	; (80020fc <HAL_MspInit+0x60>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	6193      	str	r3, [r2, #24]
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_MspInit+0x60>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <HAL_MspInit+0x60>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4a0f      	ldr	r2, [pc, #60]	; (80020fc <HAL_MspInit+0x60>)
 80020c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c4:	61d3      	str	r3, [r2, #28]
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <HAL_MspInit+0x60>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80020d2:	2004      	movs	r0, #4
 80020d4:	f000 fb4a 	bl	800276c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <HAL_MspInit+0x64>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80020e4:	60fb      	str	r3, [r7, #12]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4a04      	ldr	r2, [pc, #16]	; (8002100 <HAL_MspInit+0x64>)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020f4:	bf00      	nop
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	40010000 	.word	0x40010000

08002104 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0310 	add.w	r3, r7, #16
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a15      	ldr	r2, [pc, #84]	; (8002174 <HAL_I2C_MspInit+0x70>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d123      	bne.n	800216c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <HAL_I2C_MspInit+0x74>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a13      	ldr	r2, [pc, #76]	; (8002178 <HAL_I2C_MspInit+0x74>)
 800212a:	f043 0308 	orr.w	r3, r3, #8
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_I2C_MspInit+0x74>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800213c:	23c0      	movs	r3, #192	; 0xc0
 800213e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002140:	2312      	movs	r3, #18
 8002142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002144:	2303      	movs	r3, #3
 8002146:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	f107 0310 	add.w	r3, r7, #16
 800214c:	4619      	mov	r1, r3
 800214e:	480b      	ldr	r0, [pc, #44]	; (800217c <HAL_I2C_MspInit+0x78>)
 8002150:	f000 fb4e 	bl	80027f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <HAL_I2C_MspInit+0x74>)
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	4a07      	ldr	r2, [pc, #28]	; (8002178 <HAL_I2C_MspInit+0x74>)
 800215a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800215e:	61d3      	str	r3, [r2, #28]
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_I2C_MspInit+0x74>)
 8002162:	69db      	ldr	r3, [r3, #28]
 8002164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800216c:	bf00      	nop
 800216e:	3720      	adds	r7, #32
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40005400 	.word	0x40005400
 8002178:	40021000 	.word	0x40021000
 800217c:	40010c00 	.word	0x40010c00

08002180 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08a      	sub	sp, #40	; 0x28
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	f107 0318 	add.w	r3, r7, #24
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219e:	d114      	bne.n	80021ca <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_TIM_Base_MspInit+0xb4>)
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	4a23      	ldr	r2, [pc, #140]	; (8002234 <HAL_TIM_Base_MspInit+0xb4>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	61d3      	str	r3, [r2, #28]
 80021ac:	4b21      	ldr	r3, [pc, #132]	; (8002234 <HAL_TIM_Base_MspInit+0xb4>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 1);
 80021b8:	2201      	movs	r2, #1
 80021ba:	2103      	movs	r1, #3
 80021bc:	201c      	movs	r0, #28
 80021be:	f000 fae0 	bl	8002782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021c2:	201c      	movs	r0, #28
 80021c4:	f000 faf9 	bl	80027ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021c8:	e030      	b.n	800222c <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM3)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a1a      	ldr	r2, [pc, #104]	; (8002238 <HAL_TIM_Base_MspInit+0xb8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d12b      	bne.n	800222c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021d4:	4b17      	ldr	r3, [pc, #92]	; (8002234 <HAL_TIM_Base_MspInit+0xb4>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	4a16      	ldr	r2, [pc, #88]	; (8002234 <HAL_TIM_Base_MspInit+0xb4>)
 80021da:	f043 0302 	orr.w	r3, r3, #2
 80021de:	61d3      	str	r3, [r2, #28]
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_TIM_Base_MspInit+0xb4>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_TIM_Base_MspInit+0xb4>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	4a10      	ldr	r2, [pc, #64]	; (8002234 <HAL_TIM_Base_MspInit+0xb4>)
 80021f2:	f043 0304 	orr.w	r3, r3, #4
 80021f6:	6193      	str	r3, [r2, #24]
 80021f8:	4b0e      	ldr	r3, [pc, #56]	; (8002234 <HAL_TIM_Base_MspInit+0xb4>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002204:	2340      	movs	r3, #64	; 0x40
 8002206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002210:	f107 0318 	add.w	r3, r7, #24
 8002214:	4619      	mov	r1, r3
 8002216:	4809      	ldr	r0, [pc, #36]	; (800223c <HAL_TIM_Base_MspInit+0xbc>)
 8002218:	f000 faea 	bl	80027f0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800221c:	2200      	movs	r2, #0
 800221e:	2100      	movs	r1, #0
 8002220:	201d      	movs	r0, #29
 8002222:	f000 faae 	bl	8002782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002226:	201d      	movs	r0, #29
 8002228:	f000 fac7 	bl	80027ba <HAL_NVIC_EnableIRQ>
}
 800222c:	bf00      	nop
 800222e:	3728      	adds	r7, #40	; 0x28
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	40000400 	.word	0x40000400
 800223c:	40010800 	.word	0x40010800

08002240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <NMI_Handler+0x4>

08002246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800224a:	e7fe      	b.n	800224a <HardFault_Handler+0x4>

0800224c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002250:	e7fe      	b.n	8002250 <MemManage_Handler+0x4>

08002252 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002256:	e7fe      	b.n	8002256 <BusFault_Handler+0x4>

08002258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800225c:	e7fe      	b.n	800225c <UsageFault_Handler+0x4>

0800225e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr

0800226a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800226e:	bf00      	nop
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr

08002282 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002286:	f000 f965 	bl	8002554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}

0800228e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002292:	2002      	movs	r0, #2
 8002294:	f000 fc78 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002298:	bf00      	nop
 800229a:	bd80      	pop	{r7, pc}

0800229c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80022a0:	2004      	movs	r0, #4
 80022a2:	f000 fc71 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}

080022aa <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80022ae:	2008      	movs	r0, #8
 80022b0:	f000 fc6a 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80022bc:	2020      	movs	r0, #32
 80022be:	f000 fc63 	bl	8002b88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022cc:	4802      	ldr	r0, [pc, #8]	; (80022d8 <TIM2_IRQHandler+0x10>)
 80022ce:	f002 fcb9 	bl	8004c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200002d8 	.word	0x200002d8

080022dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <TIM3_IRQHandler+0x10>)
 80022e2:	f002 fcaf 	bl	8004c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000320 	.word	0x20000320

080022f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
	return 1;
 80022f4:	2301      	movs	r3, #1
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <_kill>:

int _kill(int pid, int sig)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002308:	f003 fac6 	bl	8005898 <__errno>
 800230c:	4603      	mov	r3, r0
 800230e:	2216      	movs	r2, #22
 8002310:	601a      	str	r2, [r3, #0]
	return -1;
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <_exit>:

void _exit (int status)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002326:	f04f 31ff 	mov.w	r1, #4294967295
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff ffe7 	bl	80022fe <_kill>
	while (1) {}		/* Make sure we hang here */
 8002330:	e7fe      	b.n	8002330 <_exit+0x12>

08002332 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b086      	sub	sp, #24
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
 8002342:	e00a      	b.n	800235a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002344:	f3af 8000 	nop.w
 8002348:	4601      	mov	r1, r0
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	1c5a      	adds	r2, r3, #1
 800234e:	60ba      	str	r2, [r7, #8]
 8002350:	b2ca      	uxtb	r2, r1
 8002352:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	3301      	adds	r3, #1
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	429a      	cmp	r2, r3
 8002360:	dbf0      	blt.n	8002344 <_read+0x12>
	}

return len;
 8002362:	687b      	ldr	r3, [r7, #4]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	e009      	b.n	8002392 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	60ba      	str	r2, [r7, #8]
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	3301      	adds	r3, #1
 8002390:	617b      	str	r3, [r7, #20]
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	429a      	cmp	r2, r3
 8002398:	dbf1      	blt.n	800237e <_write+0x12>
	}
	return len;
 800239a:	687b      	ldr	r3, [r7, #4]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_close>:

int _close(int file)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	return -1;
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ca:	605a      	str	r2, [r3, #4]
	return 0;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr

080023d8 <_isatty>:

int _isatty(int file)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
	return 1;
 80023e0:	2301      	movs	r3, #1
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
	return 0;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800240c:	4a14      	ldr	r2, [pc, #80]	; (8002460 <_sbrk+0x5c>)
 800240e:	4b15      	ldr	r3, [pc, #84]	; (8002464 <_sbrk+0x60>)
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002418:	4b13      	ldr	r3, [pc, #76]	; (8002468 <_sbrk+0x64>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d102      	bne.n	8002426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002420:	4b11      	ldr	r3, [pc, #68]	; (8002468 <_sbrk+0x64>)
 8002422:	4a12      	ldr	r2, [pc, #72]	; (800246c <_sbrk+0x68>)
 8002424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002426:	4b10      	ldr	r3, [pc, #64]	; (8002468 <_sbrk+0x64>)
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4413      	add	r3, r2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	429a      	cmp	r2, r3
 8002432:	d207      	bcs.n	8002444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002434:	f003 fa30 	bl	8005898 <__errno>
 8002438:	4603      	mov	r3, r0
 800243a:	220c      	movs	r2, #12
 800243c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295
 8002442:	e009      	b.n	8002458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002444:	4b08      	ldr	r3, [pc, #32]	; (8002468 <_sbrk+0x64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <_sbrk+0x64>)
 8002454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002456:	68fb      	ldr	r3, [r7, #12]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20005000 	.word	0x20005000
 8002464:	00000400 	.word	0x00000400
 8002468:	20000368 	.word	0x20000368
 800246c:	20000380 	.word	0x20000380

08002470 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	bc80      	pop	{r7}
 800247a:	4770      	bx	lr

0800247c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800247c:	480c      	ldr	r0, [pc, #48]	; (80024b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800247e:	490d      	ldr	r1, [pc, #52]	; (80024b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002484:	e002      	b.n	800248c <LoopCopyDataInit>

08002486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248a:	3304      	adds	r3, #4

0800248c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800248c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002490:	d3f9      	bcc.n	8002486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002492:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002494:	4c0a      	ldr	r4, [pc, #40]	; (80024c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002498:	e001      	b.n	800249e <LoopFillZerobss>

0800249a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800249c:	3204      	adds	r2, #4

0800249e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a0:	d3fb      	bcc.n	800249a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024a2:	f7ff ffe5 	bl	8002470 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024a6:	f003 f9fd 	bl	80058a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024aa:	f7ff fd0b 	bl	8001ec4 <main>
  bx lr
 80024ae:	4770      	bx	lr
  ldr r0, =_sdata
 80024b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024b4:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80024b8:	08008b5c 	.word	0x08008b5c
  ldr r2, =_sbss
 80024bc:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80024c0:	20000380 	.word	0x20000380

080024c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024c4:	e7fe      	b.n	80024c4 <ADC1_2_IRQHandler>
	...

080024c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024cc:	4b08      	ldr	r3, [pc, #32]	; (80024f0 <HAL_Init+0x28>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a07      	ldr	r2, [pc, #28]	; (80024f0 <HAL_Init+0x28>)
 80024d2:	f043 0310 	orr.w	r3, r3, #16
 80024d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d8:	2003      	movs	r0, #3
 80024da:	f000 f947 	bl	800276c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024de:	2007      	movs	r0, #7
 80024e0:	f000 f808 	bl	80024f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024e4:	f7ff fdda 	bl	800209c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40022000 	.word	0x40022000

080024f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024fc:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_InitTick+0x54>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b12      	ldr	r3, [pc, #72]	; (800254c <HAL_InitTick+0x58>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4619      	mov	r1, r3
 8002506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800250a:	fbb3 f3f1 	udiv	r3, r3, r1
 800250e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f95f 	bl	80027d6 <HAL_SYSTICK_Config>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e00e      	b.n	8002540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b0f      	cmp	r3, #15
 8002526:	d80a      	bhi.n	800253e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002528:	2200      	movs	r2, #0
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	f04f 30ff 	mov.w	r0, #4294967295
 8002530:	f000 f927 	bl	8002782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002534:	4a06      	ldr	r2, [pc, #24]	; (8002550 <HAL_InitTick+0x5c>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e000      	b.n	8002540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
}
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000020 	.word	0x20000020
 800254c:	20000028 	.word	0x20000028
 8002550:	20000024 	.word	0x20000024

08002554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002558:	4b05      	ldr	r3, [pc, #20]	; (8002570 <HAL_IncTick+0x1c>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_IncTick+0x20>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4413      	add	r3, r2
 8002564:	4a03      	ldr	r2, [pc, #12]	; (8002574 <HAL_IncTick+0x20>)
 8002566:	6013      	str	r3, [r2, #0]
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr
 8002570:	20000028 	.word	0x20000028
 8002574:	2000036c 	.word	0x2000036c

08002578 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return uwTick;
 800257c:	4b02      	ldr	r3, [pc, #8]	; (8002588 <HAL_GetTick+0x10>)
 800257e:	681b      	ldr	r3, [r3, #0]
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	2000036c 	.word	0x2000036c

0800258c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002594:	f7ff fff0 	bl	8002578 <HAL_GetTick>
 8002598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d005      	beq.n	80025b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <HAL_Delay+0x44>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4413      	add	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025b2:	bf00      	nop
 80025b4:	f7ff ffe0 	bl	8002578 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d8f7      	bhi.n	80025b4 <HAL_Delay+0x28>
  {
  }
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000028 	.word	0x20000028

080025d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f0:	4013      	ands	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002606:	4a04      	ldr	r2, [pc, #16]	; (8002618 <__NVIC_SetPriorityGrouping+0x44>)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	60d3      	str	r3, [r2, #12]
}
 800260c:	bf00      	nop
 800260e:	3714      	adds	r7, #20
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002620:	4b04      	ldr	r3, [pc, #16]	; (8002634 <__NVIC_GetPriorityGrouping+0x18>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	f003 0307 	and.w	r3, r3, #7
}
 800262a:	4618      	mov	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	2b00      	cmp	r3, #0
 8002648:	db0b      	blt.n	8002662 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	f003 021f 	and.w	r2, r3, #31
 8002650:	4906      	ldr	r1, [pc, #24]	; (800266c <__NVIC_EnableIRQ+0x34>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	2001      	movs	r0, #1
 800265a:	fa00 f202 	lsl.w	r2, r0, r2
 800265e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr
 800266c:	e000e100 	.word	0xe000e100

08002670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db0a      	blt.n	800269a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	490c      	ldr	r1, [pc, #48]	; (80026bc <__NVIC_SetPriority+0x4c>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	440b      	add	r3, r1
 8002694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002698:	e00a      	b.n	80026b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4908      	ldr	r1, [pc, #32]	; (80026c0 <__NVIC_SetPriority+0x50>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3b04      	subs	r3, #4
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	761a      	strb	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	; 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f1c3 0307 	rsb	r3, r3, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf28      	it	cs
 80026e2:	2304      	movcs	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d902      	bls.n	80026f4 <NVIC_EncodePriority+0x30>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	e000      	b.n	80026f6 <NVIC_EncodePriority+0x32>
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43d9      	mvns	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	4313      	orrs	r3, r2
         );
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	; 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3b01      	subs	r3, #1
 8002734:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002738:	d301      	bcc.n	800273e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273a:	2301      	movs	r3, #1
 800273c:	e00f      	b.n	800275e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800273e:	4a0a      	ldr	r2, [pc, #40]	; (8002768 <SysTick_Config+0x40>)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002746:	210f      	movs	r1, #15
 8002748:	f04f 30ff 	mov.w	r0, #4294967295
 800274c:	f7ff ff90 	bl	8002670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002750:	4b05      	ldr	r3, [pc, #20]	; (8002768 <SysTick_Config+0x40>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <SysTick_Config+0x40>)
 8002758:	2207      	movs	r2, #7
 800275a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	e000e010 	.word	0xe000e010

0800276c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7ff ff2d 	bl	80025d4 <__NVIC_SetPriorityGrouping>
}
 800277a:	bf00      	nop
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002782:	b580      	push	{r7, lr}
 8002784:	b086      	sub	sp, #24
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002794:	f7ff ff42 	bl	800261c <__NVIC_GetPriorityGrouping>
 8002798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	6978      	ldr	r0, [r7, #20]
 80027a0:	f7ff ff90 	bl	80026c4 <NVIC_EncodePriority>
 80027a4:	4602      	mov	r2, r0
 80027a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff ff5f 	bl	8002670 <__NVIC_SetPriority>
}
 80027b2:	bf00      	nop
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b082      	sub	sp, #8
 80027be:	af00      	add	r7, sp, #0
 80027c0:	4603      	mov	r3, r0
 80027c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff ff35 	bl	8002638 <__NVIC_EnableIRQ>
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7ff ffa2 	bl	8002728 <SysTick_Config>
 80027e4:	4603      	mov	r3, r0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b08b      	sub	sp, #44	; 0x2c
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027fe:	2300      	movs	r3, #0
 8002800:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002802:	e169      	b.n	8002ad8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002804:	2201      	movs	r2, #1
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	4013      	ands	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	429a      	cmp	r2, r3
 800281e:	f040 8158 	bne.w	8002ad2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	4a9a      	ldr	r2, [pc, #616]	; (8002a90 <HAL_GPIO_Init+0x2a0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d05e      	beq.n	80028ea <HAL_GPIO_Init+0xfa>
 800282c:	4a98      	ldr	r2, [pc, #608]	; (8002a90 <HAL_GPIO_Init+0x2a0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d875      	bhi.n	800291e <HAL_GPIO_Init+0x12e>
 8002832:	4a98      	ldr	r2, [pc, #608]	; (8002a94 <HAL_GPIO_Init+0x2a4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d058      	beq.n	80028ea <HAL_GPIO_Init+0xfa>
 8002838:	4a96      	ldr	r2, [pc, #600]	; (8002a94 <HAL_GPIO_Init+0x2a4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d86f      	bhi.n	800291e <HAL_GPIO_Init+0x12e>
 800283e:	4a96      	ldr	r2, [pc, #600]	; (8002a98 <HAL_GPIO_Init+0x2a8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d052      	beq.n	80028ea <HAL_GPIO_Init+0xfa>
 8002844:	4a94      	ldr	r2, [pc, #592]	; (8002a98 <HAL_GPIO_Init+0x2a8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d869      	bhi.n	800291e <HAL_GPIO_Init+0x12e>
 800284a:	4a94      	ldr	r2, [pc, #592]	; (8002a9c <HAL_GPIO_Init+0x2ac>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d04c      	beq.n	80028ea <HAL_GPIO_Init+0xfa>
 8002850:	4a92      	ldr	r2, [pc, #584]	; (8002a9c <HAL_GPIO_Init+0x2ac>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d863      	bhi.n	800291e <HAL_GPIO_Init+0x12e>
 8002856:	4a92      	ldr	r2, [pc, #584]	; (8002aa0 <HAL_GPIO_Init+0x2b0>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d046      	beq.n	80028ea <HAL_GPIO_Init+0xfa>
 800285c:	4a90      	ldr	r2, [pc, #576]	; (8002aa0 <HAL_GPIO_Init+0x2b0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d85d      	bhi.n	800291e <HAL_GPIO_Init+0x12e>
 8002862:	2b12      	cmp	r3, #18
 8002864:	d82a      	bhi.n	80028bc <HAL_GPIO_Init+0xcc>
 8002866:	2b12      	cmp	r3, #18
 8002868:	d859      	bhi.n	800291e <HAL_GPIO_Init+0x12e>
 800286a:	a201      	add	r2, pc, #4	; (adr r2, 8002870 <HAL_GPIO_Init+0x80>)
 800286c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002870:	080028eb 	.word	0x080028eb
 8002874:	080028c5 	.word	0x080028c5
 8002878:	080028d7 	.word	0x080028d7
 800287c:	08002919 	.word	0x08002919
 8002880:	0800291f 	.word	0x0800291f
 8002884:	0800291f 	.word	0x0800291f
 8002888:	0800291f 	.word	0x0800291f
 800288c:	0800291f 	.word	0x0800291f
 8002890:	0800291f 	.word	0x0800291f
 8002894:	0800291f 	.word	0x0800291f
 8002898:	0800291f 	.word	0x0800291f
 800289c:	0800291f 	.word	0x0800291f
 80028a0:	0800291f 	.word	0x0800291f
 80028a4:	0800291f 	.word	0x0800291f
 80028a8:	0800291f 	.word	0x0800291f
 80028ac:	0800291f 	.word	0x0800291f
 80028b0:	0800291f 	.word	0x0800291f
 80028b4:	080028cd 	.word	0x080028cd
 80028b8:	080028e1 	.word	0x080028e1
 80028bc:	4a79      	ldr	r2, [pc, #484]	; (8002aa4 <HAL_GPIO_Init+0x2b4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d013      	beq.n	80028ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028c2:	e02c      	b.n	800291e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	623b      	str	r3, [r7, #32]
          break;
 80028ca:	e029      	b.n	8002920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	3304      	adds	r3, #4
 80028d2:	623b      	str	r3, [r7, #32]
          break;
 80028d4:	e024      	b.n	8002920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	3308      	adds	r3, #8
 80028dc:	623b      	str	r3, [r7, #32]
          break;
 80028de:	e01f      	b.n	8002920 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	330c      	adds	r3, #12
 80028e6:	623b      	str	r3, [r7, #32]
          break;
 80028e8:	e01a      	b.n	8002920 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d102      	bne.n	80028f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028f2:	2304      	movs	r3, #4
 80028f4:	623b      	str	r3, [r7, #32]
          break;
 80028f6:	e013      	b.n	8002920 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d105      	bne.n	800290c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002900:	2308      	movs	r3, #8
 8002902:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	611a      	str	r2, [r3, #16]
          break;
 800290a:	e009      	b.n	8002920 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800290c:	2308      	movs	r3, #8
 800290e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69fa      	ldr	r2, [r7, #28]
 8002914:	615a      	str	r2, [r3, #20]
          break;
 8002916:	e003      	b.n	8002920 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002918:	2300      	movs	r3, #0
 800291a:	623b      	str	r3, [r7, #32]
          break;
 800291c:	e000      	b.n	8002920 <HAL_GPIO_Init+0x130>
          break;
 800291e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	2bff      	cmp	r3, #255	; 0xff
 8002924:	d801      	bhi.n	800292a <HAL_GPIO_Init+0x13a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	e001      	b.n	800292e <HAL_GPIO_Init+0x13e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3304      	adds	r3, #4
 800292e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	2bff      	cmp	r3, #255	; 0xff
 8002934:	d802      	bhi.n	800293c <HAL_GPIO_Init+0x14c>
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	e002      	b.n	8002942 <HAL_GPIO_Init+0x152>
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	3b08      	subs	r3, #8
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	210f      	movs	r1, #15
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	fa01 f303 	lsl.w	r3, r1, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	401a      	ands	r2, r3
 8002954:	6a39      	ldr	r1, [r7, #32]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	fa01 f303 	lsl.w	r3, r1, r3
 800295c:	431a      	orrs	r2, r3
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 80b1 	beq.w	8002ad2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002970:	4b4d      	ldr	r3, [pc, #308]	; (8002aa8 <HAL_GPIO_Init+0x2b8>)
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	4a4c      	ldr	r2, [pc, #304]	; (8002aa8 <HAL_GPIO_Init+0x2b8>)
 8002976:	f043 0301 	orr.w	r3, r3, #1
 800297a:	6193      	str	r3, [r2, #24]
 800297c:	4b4a      	ldr	r3, [pc, #296]	; (8002aa8 <HAL_GPIO_Init+0x2b8>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002988:	4a48      	ldr	r2, [pc, #288]	; (8002aac <HAL_GPIO_Init+0x2bc>)
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	3302      	adds	r3, #2
 8002990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002994:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	220f      	movs	r2, #15
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4013      	ands	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a40      	ldr	r2, [pc, #256]	; (8002ab0 <HAL_GPIO_Init+0x2c0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d013      	beq.n	80029dc <HAL_GPIO_Init+0x1ec>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a3f      	ldr	r2, [pc, #252]	; (8002ab4 <HAL_GPIO_Init+0x2c4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00d      	beq.n	80029d8 <HAL_GPIO_Init+0x1e8>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a3e      	ldr	r2, [pc, #248]	; (8002ab8 <HAL_GPIO_Init+0x2c8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d007      	beq.n	80029d4 <HAL_GPIO_Init+0x1e4>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a3d      	ldr	r2, [pc, #244]	; (8002abc <HAL_GPIO_Init+0x2cc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d101      	bne.n	80029d0 <HAL_GPIO_Init+0x1e0>
 80029cc:	2303      	movs	r3, #3
 80029ce:	e006      	b.n	80029de <HAL_GPIO_Init+0x1ee>
 80029d0:	2304      	movs	r3, #4
 80029d2:	e004      	b.n	80029de <HAL_GPIO_Init+0x1ee>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e002      	b.n	80029de <HAL_GPIO_Init+0x1ee>
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <HAL_GPIO_Init+0x1ee>
 80029dc:	2300      	movs	r3, #0
 80029de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e0:	f002 0203 	and.w	r2, r2, #3
 80029e4:	0092      	lsls	r2, r2, #2
 80029e6:	4093      	lsls	r3, r2
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029ee:	492f      	ldr	r1, [pc, #188]	; (8002aac <HAL_GPIO_Init+0x2bc>)
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	089b      	lsrs	r3, r3, #2
 80029f4:	3302      	adds	r3, #2
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d006      	beq.n	8002a16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a08:	4b2d      	ldr	r3, [pc, #180]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	492c      	ldr	r1, [pc, #176]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	600b      	str	r3, [r1, #0]
 8002a14:	e006      	b.n	8002a24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a16:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	4928      	ldr	r1, [pc, #160]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d006      	beq.n	8002a3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a30:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	4922      	ldr	r1, [pc, #136]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	604b      	str	r3, [r1, #4]
 8002a3c:	e006      	b.n	8002a4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a3e:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	491e      	ldr	r1, [pc, #120]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d006      	beq.n	8002a66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a58:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	4918      	ldr	r1, [pc, #96]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	608b      	str	r3, [r1, #8]
 8002a64:	e006      	b.n	8002a74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a66:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	4914      	ldr	r1, [pc, #80]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d021      	beq.n	8002ac4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a80:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	490e      	ldr	r1, [pc, #56]	; (8002ac0 <HAL_GPIO_Init+0x2d0>)
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	60cb      	str	r3, [r1, #12]
 8002a8c:	e021      	b.n	8002ad2 <HAL_GPIO_Init+0x2e2>
 8002a8e:	bf00      	nop
 8002a90:	10320000 	.word	0x10320000
 8002a94:	10310000 	.word	0x10310000
 8002a98:	10220000 	.word	0x10220000
 8002a9c:	10210000 	.word	0x10210000
 8002aa0:	10120000 	.word	0x10120000
 8002aa4:	10110000 	.word	0x10110000
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40010000 	.word	0x40010000
 8002ab0:	40010800 	.word	0x40010800
 8002ab4:	40010c00 	.word	0x40010c00
 8002ab8:	40011000 	.word	0x40011000
 8002abc:	40011400 	.word	0x40011400
 8002ac0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_GPIO_Init+0x304>)
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	4909      	ldr	r1, [pc, #36]	; (8002af4 <HAL_GPIO_Init+0x304>)
 8002ace:	4013      	ands	r3, r2
 8002ad0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f47f ae8e 	bne.w	8002804 <HAL_GPIO_Init+0x14>
  }
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	372c      	adds	r7, #44	; 0x2c
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	40010400 	.word	0x40010400

08002af8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	460b      	mov	r3, r1
 8002b02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	887b      	ldrh	r3, [r7, #2]
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
 8002b14:	e001      	b.n	8002b1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b16:	2300      	movs	r3, #0
 8002b18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	807b      	strh	r3, [r7, #2]
 8002b32:	4613      	mov	r3, r2
 8002b34:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b36:	787b      	ldrb	r3, [r7, #1]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d003      	beq.n	8002b44 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b3c:	887a      	ldrh	r2, [r7, #2]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b42:	e003      	b.n	8002b4c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	041a      	lsls	r2, r3, #16
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	611a      	str	r2, [r3, #16]
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68db      	ldr	r3, [r3, #12]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b68:	887a      	ldrh	r2, [r7, #2]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	041a      	lsls	r2, r3, #16
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	43d9      	mvns	r1, r3
 8002b74:	887b      	ldrh	r3, [r7, #2]
 8002b76:	400b      	ands	r3, r1
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	611a      	str	r2, [r3, #16]
}
 8002b7e:	bf00      	nop
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b94:	695a      	ldr	r2, [r3, #20]
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d006      	beq.n	8002bac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b9e:	4a05      	ldr	r2, [pc, #20]	; (8002bb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba0:	88fb      	ldrh	r3, [r7, #6]
 8002ba2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ba4:	88fb      	ldrh	r3, [r7, #6]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fe fde6 	bl	8001778 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	40010400 	.word	0x40010400

08002bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e12b      	b.n	8002e22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff fa90 	bl	8002104 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2224      	movs	r2, #36	; 0x24
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c1c:	f001 fd20 	bl	8004660 <HAL_RCC_GetPCLK1Freq>
 8002c20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4a81      	ldr	r2, [pc, #516]	; (8002e2c <HAL_I2C_Init+0x274>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d807      	bhi.n	8002c3c <HAL_I2C_Init+0x84>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4a80      	ldr	r2, [pc, #512]	; (8002e30 <HAL_I2C_Init+0x278>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	bf94      	ite	ls
 8002c34:	2301      	movls	r3, #1
 8002c36:	2300      	movhi	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	e006      	b.n	8002c4a <HAL_I2C_Init+0x92>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4a7d      	ldr	r2, [pc, #500]	; (8002e34 <HAL_I2C_Init+0x27c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	bf94      	ite	ls
 8002c44:	2301      	movls	r3, #1
 8002c46:	2300      	movhi	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e0e7      	b.n	8002e22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4a78      	ldr	r2, [pc, #480]	; (8002e38 <HAL_I2C_Init+0x280>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	0c9b      	lsrs	r3, r3, #18
 8002c5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	4a6a      	ldr	r2, [pc, #424]	; (8002e2c <HAL_I2C_Init+0x274>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d802      	bhi.n	8002c8c <HAL_I2C_Init+0xd4>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	e009      	b.n	8002ca0 <HAL_I2C_Init+0xe8>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c92:	fb02 f303 	mul.w	r3, r2, r3
 8002c96:	4a69      	ldr	r2, [pc, #420]	; (8002e3c <HAL_I2C_Init+0x284>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	099b      	lsrs	r3, r3, #6
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	6812      	ldr	r2, [r2, #0]
 8002ca4:	430b      	orrs	r3, r1
 8002ca6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	495c      	ldr	r1, [pc, #368]	; (8002e2c <HAL_I2C_Init+0x274>)
 8002cbc:	428b      	cmp	r3, r1
 8002cbe:	d819      	bhi.n	8002cf4 <HAL_I2C_Init+0x13c>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1e59      	subs	r1, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cce:	1c59      	adds	r1, r3, #1
 8002cd0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002cd4:	400b      	ands	r3, r1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00a      	beq.n	8002cf0 <HAL_I2C_Init+0x138>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1e59      	subs	r1, r3, #1
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cee:	e051      	b.n	8002d94 <HAL_I2C_Init+0x1dc>
 8002cf0:	2304      	movs	r3, #4
 8002cf2:	e04f      	b.n	8002d94 <HAL_I2C_Init+0x1dc>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d111      	bne.n	8002d20 <HAL_I2C_Init+0x168>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	1e58      	subs	r0, r3, #1
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6859      	ldr	r1, [r3, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	440b      	add	r3, r1
 8002d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf0c      	ite	eq
 8002d18:	2301      	moveq	r3, #1
 8002d1a:	2300      	movne	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	e012      	b.n	8002d46 <HAL_I2C_Init+0x18e>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1e58      	subs	r0, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	0099      	lsls	r1, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d36:	3301      	adds	r3, #1
 8002d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_I2C_Init+0x196>
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e022      	b.n	8002d94 <HAL_I2C_Init+0x1dc>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10e      	bne.n	8002d74 <HAL_I2C_Init+0x1bc>
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1e58      	subs	r0, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	440b      	add	r3, r1
 8002d64:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d72:	e00f      	b.n	8002d94 <HAL_I2C_Init+0x1dc>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1e58      	subs	r0, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	0099      	lsls	r1, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	6809      	ldr	r1, [r1, #0]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69da      	ldr	r2, [r3, #28]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6911      	ldr	r1, [r2, #16]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	68d2      	ldr	r2, [r2, #12]
 8002dce:	4311      	orrs	r1, r2
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6812      	ldr	r2, [r2, #0]
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	000186a0 	.word	0x000186a0
 8002e30:	001e847f 	.word	0x001e847f
 8002e34:	003d08ff 	.word	0x003d08ff
 8002e38:	431bde83 	.word	0x431bde83
 8002e3c:	10624dd3 	.word	0x10624dd3

08002e40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	607a      	str	r2, [r7, #4]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	817b      	strh	r3, [r7, #10]
 8002e50:	4613      	mov	r3, r2
 8002e52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e54:	f7ff fb90 	bl	8002578 <HAL_GetTick>
 8002e58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b20      	cmp	r3, #32
 8002e64:	f040 80e0 	bne.w	8003028 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2319      	movs	r3, #25
 8002e6e:	2201      	movs	r2, #1
 8002e70:	4970      	ldr	r1, [pc, #448]	; (8003034 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f000 fe44 	bl	8003b00 <I2C_WaitOnFlagUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e0d3      	b.n	800302a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_I2C_Master_Transmit+0x50>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e0cc      	b.n	800302a <HAL_I2C_Master_Transmit+0x1ea>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d007      	beq.n	8002eb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0201 	orr.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ec4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2221      	movs	r2, #33	; 0x21
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2210      	movs	r2, #16
 8002ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	893a      	ldrh	r2, [r7, #8]
 8002ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a50      	ldr	r2, [pc, #320]	; (8003038 <HAL_I2C_Master_Transmit+0x1f8>)
 8002ef6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ef8:	8979      	ldrh	r1, [r7, #10]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	6a3a      	ldr	r2, [r7, #32]
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 fbfe 	bl	8003700 <I2C_MasterRequestWrite>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e08d      	b.n	800302a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f24:	e066      	b.n	8002ff4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	6a39      	ldr	r1, [r7, #32]
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 febe 	bl	8003cac <I2C_WaitOnTXEFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00d      	beq.n	8002f52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d107      	bne.n	8002f4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e06b      	b.n	800302a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	781a      	ldrb	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f62:	1c5a      	adds	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_I2C_Master_Transmit+0x188>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d017      	beq.n	8002fc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	781a      	ldrb	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	1c5a      	adds	r2, r3, #1
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	6a39      	ldr	r1, [r7, #32]
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 feae 	bl	8003d2e <I2C_WaitOnBTFFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d107      	bne.n	8002ff0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e01a      	b.n	800302a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d194      	bne.n	8002f26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800300a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003024:	2300      	movs	r3, #0
 8003026:	e000      	b.n	800302a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003028:	2302      	movs	r3, #2
  }
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	00100002 	.word	0x00100002
 8003038:	ffff0000 	.word	0xffff0000

0800303c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	4608      	mov	r0, r1
 8003046:	4611      	mov	r1, r2
 8003048:	461a      	mov	r2, r3
 800304a:	4603      	mov	r3, r0
 800304c:	817b      	strh	r3, [r7, #10]
 800304e:	460b      	mov	r3, r1
 8003050:	813b      	strh	r3, [r7, #8]
 8003052:	4613      	mov	r3, r2
 8003054:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003056:	f7ff fa8f 	bl	8002578 <HAL_GetTick>
 800305a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b20      	cmp	r3, #32
 8003066:	f040 80d9 	bne.w	800321c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	2319      	movs	r3, #25
 8003070:	2201      	movs	r2, #1
 8003072:	496d      	ldr	r1, [pc, #436]	; (8003228 <HAL_I2C_Mem_Write+0x1ec>)
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fd43 	bl	8003b00 <I2C_WaitOnFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003080:	2302      	movs	r3, #2
 8003082:	e0cc      	b.n	800321e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800308a:	2b01      	cmp	r3, #1
 800308c:	d101      	bne.n	8003092 <HAL_I2C_Mem_Write+0x56>
 800308e:	2302      	movs	r3, #2
 8003090:	e0c5      	b.n	800321e <HAL_I2C_Mem_Write+0x1e2>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d007      	beq.n	80030b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f042 0201 	orr.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2221      	movs	r2, #33	; 0x21
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2240      	movs	r2, #64	; 0x40
 80030d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a3a      	ldr	r2, [r7, #32]
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4a4d      	ldr	r2, [pc, #308]	; (800322c <HAL_I2C_Mem_Write+0x1f0>)
 80030f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030fa:	88f8      	ldrh	r0, [r7, #6]
 80030fc:	893a      	ldrh	r2, [r7, #8]
 80030fe:	8979      	ldrh	r1, [r7, #10]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	4603      	mov	r3, r0
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fb7a 	bl	8003804 <I2C_RequestMemoryWrite>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d052      	beq.n	80031bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e081      	b.n	800321e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 fdc4 	bl	8003cac <I2C_WaitOnTXEFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00d      	beq.n	8003146 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2b04      	cmp	r3, #4
 8003130:	d107      	bne.n	8003142 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003140:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e06b      	b.n	800321e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	781a      	ldrb	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b04      	cmp	r3, #4
 8003182:	d11b      	bne.n	80031bc <HAL_I2C_Mem_Write+0x180>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	d017      	beq.n	80031bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	781a      	ldrb	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1aa      	bne.n	800311a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fdb0 	bl	8003d2e <I2C_WaitOnBTFFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00d      	beq.n	80031f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d107      	bne.n	80031ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e016      	b.n	800321e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	e000      	b.n	800321e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800321c:	2302      	movs	r3, #2
  }
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	00100002 	.word	0x00100002
 800322c:	ffff0000 	.word	0xffff0000

08003230 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08c      	sub	sp, #48	; 0x30
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	4608      	mov	r0, r1
 800323a:	4611      	mov	r1, r2
 800323c:	461a      	mov	r2, r3
 800323e:	4603      	mov	r3, r0
 8003240:	817b      	strh	r3, [r7, #10]
 8003242:	460b      	mov	r3, r1
 8003244:	813b      	strh	r3, [r7, #8]
 8003246:	4613      	mov	r3, r2
 8003248:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800324e:	f7ff f993 	bl	8002578 <HAL_GetTick>
 8003252:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b20      	cmp	r3, #32
 800325e:	f040 8244 	bne.w	80036ea <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	2319      	movs	r3, #25
 8003268:	2201      	movs	r2, #1
 800326a:	4982      	ldr	r1, [pc, #520]	; (8003474 <HAL_I2C_Mem_Read+0x244>)
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 fc47 	bl	8003b00 <I2C_WaitOnFlagUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003278:	2302      	movs	r3, #2
 800327a:	e237      	b.n	80036ec <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_I2C_Mem_Read+0x5a>
 8003286:	2302      	movs	r3, #2
 8003288:	e230      	b.n	80036ec <HAL_I2C_Mem_Read+0x4bc>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b01      	cmp	r3, #1
 800329e:	d007      	beq.n	80032b0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2222      	movs	r2, #34	; 0x22
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2240      	movs	r2, #64	; 0x40
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80032e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a62      	ldr	r2, [pc, #392]	; (8003478 <HAL_I2C_Mem_Read+0x248>)
 80032f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032f2:	88f8      	ldrh	r0, [r7, #6]
 80032f4:	893a      	ldrh	r2, [r7, #8]
 80032f6:	8979      	ldrh	r1, [r7, #10]
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	9301      	str	r3, [sp, #4]
 80032fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	4603      	mov	r3, r0
 8003302:	68f8      	ldr	r0, [r7, #12]
 8003304:	f000 fb14 	bl	8003930 <I2C_RequestMemoryRead>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e1ec      	b.n	80036ec <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003316:	2b00      	cmp	r3, #0
 8003318:	d113      	bne.n	8003342 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e1c0      	b.n	80036c4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003346:	2b01      	cmp	r3, #1
 8003348:	d11e      	bne.n	8003388 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003358:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800335a:	b672      	cpsid	i
}
 800335c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003382:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003384:	b662      	cpsie	i
}
 8003386:	e035      	b.n	80033f4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338c:	2b02      	cmp	r3, #2
 800338e:	d11e      	bne.n	80033ce <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800339e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033a0:	b672      	cpsid	i
}
 80033a2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033ca:	b662      	cpsie	i
}
 80033cc:	e012      	b.n	80033f4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033dc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80033f4:	e166      	b.n	80036c4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fa:	2b03      	cmp	r3, #3
 80033fc:	f200 811f 	bhi.w	800363e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003404:	2b01      	cmp	r3, #1
 8003406:	d123      	bne.n	8003450 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 fccf 	bl	8003db0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e167      	b.n	80036ec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	691a      	ldr	r2, [r3, #16]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	1c5a      	adds	r2, r3, #1
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800344e:	e139      	b.n	80036c4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003454:	2b02      	cmp	r3, #2
 8003456:	d152      	bne.n	80034fe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345e:	2200      	movs	r2, #0
 8003460:	4906      	ldr	r1, [pc, #24]	; (800347c <HAL_I2C_Mem_Read+0x24c>)
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 fb4c 	bl	8003b00 <I2C_WaitOnFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e13c      	b.n	80036ec <HAL_I2C_Mem_Read+0x4bc>
 8003472:	bf00      	nop
 8003474:	00100002 	.word	0x00100002
 8003478:	ffff0000 	.word	0xffff0000
 800347c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003480:	b672      	cpsid	i
}
 8003482:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003492:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034c6:	b662      	cpsie	i
}
 80034c8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034fc:	e0e2      	b.n	80036c4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	9300      	str	r3, [sp, #0]
 8003502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003504:	2200      	movs	r2, #0
 8003506:	497b      	ldr	r1, [pc, #492]	; (80036f4 <HAL_I2C_Mem_Read+0x4c4>)
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 faf9 	bl	8003b00 <I2C_WaitOnFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0e9      	b.n	80036ec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003526:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003528:	b672      	cpsid	i
}
 800352a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691a      	ldr	r2, [r3, #16]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003554:	b29b      	uxth	r3, r3
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800355e:	4b66      	ldr	r3, [pc, #408]	; (80036f8 <HAL_I2C_Mem_Read+0x4c8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	08db      	lsrs	r3, r3, #3
 8003564:	4a65      	ldr	r2, [pc, #404]	; (80036fc <HAL_I2C_Mem_Read+0x4cc>)
 8003566:	fba2 2303 	umull	r2, r3, r2, r3
 800356a:	0a1a      	lsrs	r2, r3, #8
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	00da      	lsls	r2, r3, #3
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	3b01      	subs	r3, #1
 800357c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d118      	bne.n	80035b6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359e:	f043 0220 	orr.w	r2, r3, #32
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80035a6:	b662      	cpsie	i
}
 80035a8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e09a      	b.n	80036ec <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d1d9      	bne.n	8003578 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691a      	ldr	r2, [r3, #16]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003606:	b662      	cpsie	i
}
 8003608:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003626:	3b01      	subs	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003632:	b29b      	uxth	r3, r3
 8003634:	3b01      	subs	r3, #1
 8003636:	b29a      	uxth	r2, r3
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800363c:	e042      	b.n	80036c4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003640:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fbb4 	bl	8003db0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e04c      	b.n	80036ec <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366e:	3b01      	subs	r3, #1
 8003670:	b29a      	uxth	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367a:	b29b      	uxth	r3, r3
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	f003 0304 	and.w	r3, r3, #4
 800368e:	2b04      	cmp	r3, #4
 8003690:	d118      	bne.n	80036c4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691a      	ldr	r2, [r3, #16]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f47f ae94 	bne.w	80033f6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	e000      	b.n	80036ec <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80036ea:	2302      	movs	r3, #2
  }
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3728      	adds	r7, #40	; 0x28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	00010004 	.word	0x00010004
 80036f8:	20000020 	.word	0x20000020
 80036fc:	14f8b589 	.word	0x14f8b589

08003700 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af02      	add	r7, sp, #8
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	460b      	mov	r3, r1
 800370e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2b08      	cmp	r3, #8
 800371a:	d006      	beq.n	800372a <I2C_MasterRequestWrite+0x2a>
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d003      	beq.n	800372a <I2C_MasterRequestWrite+0x2a>
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003728:	d108      	bne.n	800373c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e00b      	b.n	8003754 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	2b12      	cmp	r3, #18
 8003742:	d107      	bne.n	8003754 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003752:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f9cd 	bl	8003b00 <I2C_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00d      	beq.n	8003788 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800377a:	d103      	bne.n	8003784 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e035      	b.n	80037f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003790:	d108      	bne.n	80037a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003792:	897b      	ldrh	r3, [r7, #10]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	461a      	mov	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037a0:	611a      	str	r2, [r3, #16]
 80037a2:	e01b      	b.n	80037dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037a4:	897b      	ldrh	r3, [r7, #10]
 80037a6:	11db      	asrs	r3, r3, #7
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	f003 0306 	and.w	r3, r3, #6
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f063 030f 	orn	r3, r3, #15
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	490e      	ldr	r1, [pc, #56]	; (80037fc <I2C_MasterRequestWrite+0xfc>)
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f9f3 	bl	8003bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e010      	b.n	80037f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037d2:	897b      	ldrh	r3, [r7, #10]
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4907      	ldr	r1, [pc, #28]	; (8003800 <I2C_MasterRequestWrite+0x100>)
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 f9e3 	bl	8003bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e000      	b.n	80037f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	00010008 	.word	0x00010008
 8003800:	00010002 	.word	0x00010002

08003804 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af02      	add	r7, sp, #8
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	4608      	mov	r0, r1
 800380e:	4611      	mov	r1, r2
 8003810:	461a      	mov	r2, r3
 8003812:	4603      	mov	r3, r0
 8003814:	817b      	strh	r3, [r7, #10]
 8003816:	460b      	mov	r3, r1
 8003818:	813b      	strh	r3, [r7, #8]
 800381a:	4613      	mov	r3, r2
 800381c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800382c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	2200      	movs	r2, #0
 8003836:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 f960 	bl	8003b00 <I2C_WaitOnFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003854:	d103      	bne.n	800385e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800385c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e05f      	b.n	8003922 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003862:	897b      	ldrh	r3, [r7, #10]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003870:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	6a3a      	ldr	r2, [r7, #32]
 8003876:	492d      	ldr	r1, [pc, #180]	; (800392c <I2C_RequestMemoryWrite+0x128>)
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f998 	bl	8003bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e04c      	b.n	8003922 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003888:	2300      	movs	r3, #0
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800389e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a0:	6a39      	ldr	r1, [r7, #32]
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fa02 	bl	8003cac <I2C_WaitOnTXEFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00d      	beq.n	80038ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	d107      	bne.n	80038c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e02b      	b.n	8003922 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d105      	bne.n	80038dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038d0:	893b      	ldrh	r3, [r7, #8]
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	611a      	str	r2, [r3, #16]
 80038da:	e021      	b.n	8003920 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038dc:	893b      	ldrh	r3, [r7, #8]
 80038de:	0a1b      	lsrs	r3, r3, #8
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ec:	6a39      	ldr	r1, [r7, #32]
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 f9dc 	bl	8003cac <I2C_WaitOnTXEFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00d      	beq.n	8003916 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d107      	bne.n	8003912 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003910:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e005      	b.n	8003922 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003916:	893b      	ldrh	r3, [r7, #8]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	00010002 	.word	0x00010002

08003930 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	4608      	mov	r0, r1
 800393a:	4611      	mov	r1, r2
 800393c:	461a      	mov	r2, r3
 800393e:	4603      	mov	r3, r0
 8003940:	817b      	strh	r3, [r7, #10]
 8003942:	460b      	mov	r3, r1
 8003944:	813b      	strh	r3, [r7, #8]
 8003946:	4613      	mov	r3, r2
 8003948:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003958:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003968:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	2200      	movs	r2, #0
 8003972:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	f000 f8c2 	bl	8003b00 <I2C_WaitOnFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00d      	beq.n	800399e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003990:	d103      	bne.n	800399a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003998:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e0aa      	b.n	8003af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800399e:	897b      	ldrh	r3, [r7, #10]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	6a3a      	ldr	r2, [r7, #32]
 80039b2:	4952      	ldr	r1, [pc, #328]	; (8003afc <I2C_RequestMemoryRead+0x1cc>)
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f000 f8fa 	bl	8003bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e097      	b.n	8003af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039dc:	6a39      	ldr	r1, [r7, #32]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f964 	bl	8003cac <I2C_WaitOnTXEFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00d      	beq.n	8003a06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d107      	bne.n	8003a02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e076      	b.n	8003af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a06:	88fb      	ldrh	r3, [r7, #6]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d105      	bne.n	8003a18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a0c:	893b      	ldrh	r3, [r7, #8]
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	611a      	str	r2, [r3, #16]
 8003a16:	e021      	b.n	8003a5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a18:	893b      	ldrh	r3, [r7, #8]
 8003a1a:	0a1b      	lsrs	r3, r3, #8
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a28:	6a39      	ldr	r1, [r7, #32]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 f93e 	bl	8003cac <I2C_WaitOnTXEFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00d      	beq.n	8003a52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d107      	bne.n	8003a4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e050      	b.n	8003af4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a52:	893b      	ldrh	r3, [r7, #8]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5e:	6a39      	ldr	r1, [r7, #32]
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f923 	bl	8003cac <I2C_WaitOnTXEFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00d      	beq.n	8003a88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d107      	bne.n	8003a84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e035      	b.n	8003af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f82b 	bl	8003b00 <I2C_WaitOnFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00d      	beq.n	8003acc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003abe:	d103      	bne.n	8003ac8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e013      	b.n	8003af4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003acc:	897b      	ldrh	r3, [r7, #10]
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ade:	6a3a      	ldr	r2, [r7, #32]
 8003ae0:	4906      	ldr	r1, [pc, #24]	; (8003afc <I2C_RequestMemoryRead+0x1cc>)
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f000 f863 	bl	8003bae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3718      	adds	r7, #24
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	00010002 	.word	0x00010002

08003b00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b10:	e025      	b.n	8003b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b18:	d021      	beq.n	8003b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b1a:	f7fe fd2d 	bl	8002578 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d302      	bcc.n	8003b30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d116      	bne.n	8003b5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f043 0220 	orr.w	r2, r3, #32
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e023      	b.n	8003ba6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	0c1b      	lsrs	r3, r3, #16
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d10d      	bne.n	8003b84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	43da      	mvns	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4013      	ands	r3, r2
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	bf0c      	ite	eq
 8003b7a:	2301      	moveq	r3, #1
 8003b7c:	2300      	movne	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	e00c      	b.n	8003b9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	43da      	mvns	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	bf0c      	ite	eq
 8003b96:	2301      	moveq	r3, #1
 8003b98:	2300      	movne	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d0b6      	beq.n	8003b12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bbc:	e051      	b.n	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bcc:	d123      	bne.n	8003c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bdc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003be6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f043 0204 	orr.w	r2, r3, #4
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e046      	b.n	8003ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1c:	d021      	beq.n	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1e:	f7fe fcab 	bl	8002578 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d302      	bcc.n	8003c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d116      	bne.n	8003c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f043 0220 	orr.w	r2, r3, #32
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e020      	b.n	8003ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	0c1b      	lsrs	r3, r3, #16
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d10c      	bne.n	8003c86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	43da      	mvns	r2, r3
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4013      	ands	r3, r2
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	bf14      	ite	ne
 8003c7e:	2301      	movne	r3, #1
 8003c80:	2300      	moveq	r3, #0
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	e00b      	b.n	8003c9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	43da      	mvns	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4013      	ands	r3, r2
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf14      	ite	ne
 8003c98:	2301      	movne	r3, #1
 8003c9a:	2300      	moveq	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d18d      	bne.n	8003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cb8:	e02d      	b.n	8003d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 f8ce 	bl	8003e5c <I2C_IsAcknowledgeFailed>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e02d      	b.n	8003d26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd0:	d021      	beq.n	8003d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd2:	f7fe fc51 	bl	8002578 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d302      	bcc.n	8003ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d116      	bne.n	8003d16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2220      	movs	r2, #32
 8003cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f043 0220 	orr.w	r2, r3, #32
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e007      	b.n	8003d26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d20:	2b80      	cmp	r3, #128	; 0x80
 8003d22:	d1ca      	bne.n	8003cba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b084      	sub	sp, #16
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d3a:	e02d      	b.n	8003d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 f88d 	bl	8003e5c <I2C_IsAcknowledgeFailed>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e02d      	b.n	8003da8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d52:	d021      	beq.n	8003d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d54:	f7fe fc10 	bl	8002578 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d302      	bcc.n	8003d6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d116      	bne.n	8003d98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	f043 0220 	orr.w	r2, r3, #32
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e007      	b.n	8003da8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d1ca      	bne.n	8003d3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dbc:	e042      	b.n	8003e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b10      	cmp	r3, #16
 8003dca:	d119      	bne.n	8003e00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f06f 0210 	mvn.w	r2, #16
 8003dd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e029      	b.n	8003e54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e00:	f7fe fbba 	bl	8002578 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d302      	bcc.n	8003e16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d116      	bne.n	8003e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	f043 0220 	orr.w	r2, r3, #32
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e007      	b.n	8003e54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4e:	2b40      	cmp	r3, #64	; 0x40
 8003e50:	d1b5      	bne.n	8003dbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e72:	d11b      	bne.n	8003eac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e98:	f043 0204 	orr.w	r2, r3, #4
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e000      	b.n	8003eae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bc80      	pop	{r7}
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e272      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 8087 	beq.w	8003fe6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ed8:	4b92      	ldr	r3, [pc, #584]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 030c 	and.w	r3, r3, #12
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d00c      	beq.n	8003efe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ee4:	4b8f      	ldr	r3, [pc, #572]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 030c 	and.w	r3, r3, #12
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d112      	bne.n	8003f16 <HAL_RCC_OscConfig+0x5e>
 8003ef0:	4b8c      	ldr	r3, [pc, #560]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efc:	d10b      	bne.n	8003f16 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003efe:	4b89      	ldr	r3, [pc, #548]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d06c      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x12c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d168      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e24c      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1e:	d106      	bne.n	8003f2e <HAL_RCC_OscConfig+0x76>
 8003f20:	4b80      	ldr	r3, [pc, #512]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a7f      	ldr	r2, [pc, #508]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	e02e      	b.n	8003f8c <HAL_RCC_OscConfig+0xd4>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x98>
 8003f36:	4b7b      	ldr	r3, [pc, #492]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a7a      	ldr	r2, [pc, #488]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	4b78      	ldr	r3, [pc, #480]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a77      	ldr	r2, [pc, #476]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e01d      	b.n	8003f8c <HAL_RCC_OscConfig+0xd4>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f58:	d10c      	bne.n	8003f74 <HAL_RCC_OscConfig+0xbc>
 8003f5a:	4b72      	ldr	r3, [pc, #456]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a71      	ldr	r2, [pc, #452]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f64:	6013      	str	r3, [r2, #0]
 8003f66:	4b6f      	ldr	r3, [pc, #444]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a6e      	ldr	r2, [pc, #440]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	e00b      	b.n	8003f8c <HAL_RCC_OscConfig+0xd4>
 8003f74:	4b6b      	ldr	r3, [pc, #428]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a6a      	ldr	r2, [pc, #424]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	4b68      	ldr	r3, [pc, #416]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a67      	ldr	r2, [pc, #412]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f8a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d013      	beq.n	8003fbc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f94:	f7fe faf0 	bl	8002578 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f9c:	f7fe faec 	bl	8002578 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b64      	cmp	r3, #100	; 0x64
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e200      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fae:	4b5d      	ldr	r3, [pc, #372]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d0f0      	beq.n	8003f9c <HAL_RCC_OscConfig+0xe4>
 8003fba:	e014      	b.n	8003fe6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbc:	f7fe fadc 	bl	8002578 <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc4:	f7fe fad8 	bl	8002578 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b64      	cmp	r3, #100	; 0x64
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e1ec      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd6:	4b53      	ldr	r3, [pc, #332]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1f0      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x10c>
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d063      	beq.n	80040ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ff2:	4b4c      	ldr	r3, [pc, #304]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 030c 	and.w	r3, r3, #12
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00b      	beq.n	8004016 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ffe:	4b49      	ldr	r3, [pc, #292]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	2b08      	cmp	r3, #8
 8004008:	d11c      	bne.n	8004044 <HAL_RCC_OscConfig+0x18c>
 800400a:	4b46      	ldr	r3, [pc, #280]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d116      	bne.n	8004044 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004016:	4b43      	ldr	r3, [pc, #268]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <HAL_RCC_OscConfig+0x176>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d001      	beq.n	800402e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e1c0      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800402e:	4b3d      	ldr	r3, [pc, #244]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	4939      	ldr	r1, [pc, #228]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 800403e:	4313      	orrs	r3, r2
 8004040:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004042:	e03a      	b.n	80040ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d020      	beq.n	800408e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800404c:	4b36      	ldr	r3, [pc, #216]	; (8004128 <HAL_RCC_OscConfig+0x270>)
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004052:	f7fe fa91 	bl	8002578 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800405a:	f7fe fa8d 	bl	8002578 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e1a1      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406c:	4b2d      	ldr	r3, [pc, #180]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0f0      	beq.n	800405a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004078:	4b2a      	ldr	r3, [pc, #168]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	695b      	ldr	r3, [r3, #20]
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	4927      	ldr	r1, [pc, #156]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 8004088:	4313      	orrs	r3, r2
 800408a:	600b      	str	r3, [r1, #0]
 800408c:	e015      	b.n	80040ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800408e:	4b26      	ldr	r3, [pc, #152]	; (8004128 <HAL_RCC_OscConfig+0x270>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7fe fa70 	bl	8002578 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800409c:	f7fe fa6c 	bl	8002578 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e180      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ae:	4b1d      	ldr	r3, [pc, #116]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d03a      	beq.n	800413c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d019      	beq.n	8004102 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040ce:	4b17      	ldr	r3, [pc, #92]	; (800412c <HAL_RCC_OscConfig+0x274>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040d4:	f7fe fa50 	bl	8002578 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040dc:	f7fe fa4c 	bl	8002578 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e160      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ee:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <HAL_RCC_OscConfig+0x26c>)
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80040fa:	2001      	movs	r0, #1
 80040fc:	f000 fac4 	bl	8004688 <RCC_Delay>
 8004100:	e01c      	b.n	800413c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004102:	4b0a      	ldr	r3, [pc, #40]	; (800412c <HAL_RCC_OscConfig+0x274>)
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004108:	f7fe fa36 	bl	8002578 <HAL_GetTick>
 800410c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800410e:	e00f      	b.n	8004130 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004110:	f7fe fa32 	bl	8002578 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d908      	bls.n	8004130 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e146      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
 8004122:	bf00      	nop
 8004124:	40021000 	.word	0x40021000
 8004128:	42420000 	.word	0x42420000
 800412c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004130:	4b92      	ldr	r3, [pc, #584]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e9      	bne.n	8004110 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0304 	and.w	r3, r3, #4
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80a6 	beq.w	8004296 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800414a:	2300      	movs	r3, #0
 800414c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414e:	4b8b      	ldr	r3, [pc, #556]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10d      	bne.n	8004176 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800415a:	4b88      	ldr	r3, [pc, #544]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	4a87      	ldr	r2, [pc, #540]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004164:	61d3      	str	r3, [r2, #28]
 8004166:	4b85      	ldr	r3, [pc, #532]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800416e:	60bb      	str	r3, [r7, #8]
 8004170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004172:	2301      	movs	r3, #1
 8004174:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004176:	4b82      	ldr	r3, [pc, #520]	; (8004380 <HAL_RCC_OscConfig+0x4c8>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417e:	2b00      	cmp	r3, #0
 8004180:	d118      	bne.n	80041b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004182:	4b7f      	ldr	r3, [pc, #508]	; (8004380 <HAL_RCC_OscConfig+0x4c8>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a7e      	ldr	r2, [pc, #504]	; (8004380 <HAL_RCC_OscConfig+0x4c8>)
 8004188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800418c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800418e:	f7fe f9f3 	bl	8002578 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004196:	f7fe f9ef 	bl	8002578 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b64      	cmp	r3, #100	; 0x64
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e103      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a8:	4b75      	ldr	r3, [pc, #468]	; (8004380 <HAL_RCC_OscConfig+0x4c8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d0f0      	beq.n	8004196 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d106      	bne.n	80041ca <HAL_RCC_OscConfig+0x312>
 80041bc:	4b6f      	ldr	r3, [pc, #444]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	4a6e      	ldr	r2, [pc, #440]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	6213      	str	r3, [r2, #32]
 80041c8:	e02d      	b.n	8004226 <HAL_RCC_OscConfig+0x36e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10c      	bne.n	80041ec <HAL_RCC_OscConfig+0x334>
 80041d2:	4b6a      	ldr	r3, [pc, #424]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	4a69      	ldr	r2, [pc, #420]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	6213      	str	r3, [r2, #32]
 80041de:	4b67      	ldr	r3, [pc, #412]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	4a66      	ldr	r2, [pc, #408]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80041e4:	f023 0304 	bic.w	r3, r3, #4
 80041e8:	6213      	str	r3, [r2, #32]
 80041ea:	e01c      	b.n	8004226 <HAL_RCC_OscConfig+0x36e>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	2b05      	cmp	r3, #5
 80041f2:	d10c      	bne.n	800420e <HAL_RCC_OscConfig+0x356>
 80041f4:	4b61      	ldr	r3, [pc, #388]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	4a60      	ldr	r2, [pc, #384]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80041fa:	f043 0304 	orr.w	r3, r3, #4
 80041fe:	6213      	str	r3, [r2, #32]
 8004200:	4b5e      	ldr	r3, [pc, #376]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	4a5d      	ldr	r2, [pc, #372]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	6213      	str	r3, [r2, #32]
 800420c:	e00b      	b.n	8004226 <HAL_RCC_OscConfig+0x36e>
 800420e:	4b5b      	ldr	r3, [pc, #364]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	4a5a      	ldr	r2, [pc, #360]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004214:	f023 0301 	bic.w	r3, r3, #1
 8004218:	6213      	str	r3, [r2, #32]
 800421a:	4b58      	ldr	r3, [pc, #352]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	4a57      	ldr	r2, [pc, #348]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004220:	f023 0304 	bic.w	r3, r3, #4
 8004224:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d015      	beq.n	800425a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800422e:	f7fe f9a3 	bl	8002578 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004234:	e00a      	b.n	800424c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004236:	f7fe f99f 	bl	8002578 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f241 3288 	movw	r2, #5000	; 0x1388
 8004244:	4293      	cmp	r3, r2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e0b1      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424c:	4b4b      	ldr	r3, [pc, #300]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0ee      	beq.n	8004236 <HAL_RCC_OscConfig+0x37e>
 8004258:	e014      	b.n	8004284 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425a:	f7fe f98d 	bl	8002578 <HAL_GetTick>
 800425e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004260:	e00a      	b.n	8004278 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004262:	f7fe f989 	bl	8002578 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004270:	4293      	cmp	r3, r2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e09b      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004278:	4b40      	ldr	r3, [pc, #256]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1ee      	bne.n	8004262 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004284:	7dfb      	ldrb	r3, [r7, #23]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d105      	bne.n	8004296 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800428a:	4b3c      	ldr	r3, [pc, #240]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	4a3b      	ldr	r2, [pc, #236]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004294:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 8087 	beq.w	80043ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042a0:	4b36      	ldr	r3, [pc, #216]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 030c 	and.w	r3, r3, #12
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	d061      	beq.n	8004370 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d146      	bne.n	8004342 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b4:	4b33      	ldr	r3, [pc, #204]	; (8004384 <HAL_RCC_OscConfig+0x4cc>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ba:	f7fe f95d 	bl	8002578 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042c0:	e008      	b.n	80042d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c2:	f7fe f959 	bl	8002578 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e06d      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d4:	4b29      	ldr	r3, [pc, #164]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1f0      	bne.n	80042c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a1b      	ldr	r3, [r3, #32]
 80042e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e8:	d108      	bne.n	80042fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042ea:	4b24      	ldr	r3, [pc, #144]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	4921      	ldr	r1, [pc, #132]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042fc:	4b1f      	ldr	r3, [pc, #124]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a19      	ldr	r1, [r3, #32]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	430b      	orrs	r3, r1
 800430e:	491b      	ldr	r1, [pc, #108]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004310:	4313      	orrs	r3, r2
 8004312:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <HAL_RCC_OscConfig+0x4cc>)
 8004316:	2201      	movs	r2, #1
 8004318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431a:	f7fe f92d 	bl	8002578 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004322:	f7fe f929 	bl	8002578 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e03d      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004334:	4b11      	ldr	r3, [pc, #68]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d0f0      	beq.n	8004322 <HAL_RCC_OscConfig+0x46a>
 8004340:	e035      	b.n	80043ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004342:	4b10      	ldr	r3, [pc, #64]	; (8004384 <HAL_RCC_OscConfig+0x4cc>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fe f916 	bl	8002578 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004350:	f7fe f912 	bl	8002578 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e026      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004362:	4b06      	ldr	r3, [pc, #24]	; (800437c <HAL_RCC_OscConfig+0x4c4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x498>
 800436e:	e01e      	b.n	80043ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d107      	bne.n	8004388 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e019      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
 800437c:	40021000 	.word	0x40021000
 8004380:	40007000 	.word	0x40007000
 8004384:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004388:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <HAL_RCC_OscConfig+0x500>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	429a      	cmp	r2, r3
 800439a:	d106      	bne.n	80043aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d001      	beq.n	80043ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40021000 	.word	0x40021000

080043bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e0d0      	b.n	8004572 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043d0:	4b6a      	ldr	r3, [pc, #424]	; (800457c <HAL_RCC_ClockConfig+0x1c0>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d910      	bls.n	8004400 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b67      	ldr	r3, [pc, #412]	; (800457c <HAL_RCC_ClockConfig+0x1c0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f023 0207 	bic.w	r2, r3, #7
 80043e6:	4965      	ldr	r1, [pc, #404]	; (800457c <HAL_RCC_ClockConfig+0x1c0>)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	4b63      	ldr	r3, [pc, #396]	; (800457c <HAL_RCC_ClockConfig+0x1c0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d001      	beq.n	8004400 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0b8      	b.n	8004572 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d020      	beq.n	800444e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	d005      	beq.n	8004424 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004418:	4b59      	ldr	r3, [pc, #356]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	4a58      	ldr	r2, [pc, #352]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 800441e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004422:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b00      	cmp	r3, #0
 800442e:	d005      	beq.n	800443c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004430:	4b53      	ldr	r3, [pc, #332]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4a52      	ldr	r2, [pc, #328]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 8004436:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800443a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800443c:	4b50      	ldr	r3, [pc, #320]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	494d      	ldr	r1, [pc, #308]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 800444a:	4313      	orrs	r3, r2
 800444c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d040      	beq.n	80044dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d107      	bne.n	8004472 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004462:	4b47      	ldr	r3, [pc, #284]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d115      	bne.n	800449a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e07f      	b.n	8004572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d107      	bne.n	800448a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800447a:	4b41      	ldr	r3, [pc, #260]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d109      	bne.n	800449a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e073      	b.n	8004572 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800448a:	4b3d      	ldr	r3, [pc, #244]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e06b      	b.n	8004572 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800449a:	4b39      	ldr	r3, [pc, #228]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f023 0203 	bic.w	r2, r3, #3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	4936      	ldr	r1, [pc, #216]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044ac:	f7fe f864 	bl	8002578 <HAL_GetTick>
 80044b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b2:	e00a      	b.n	80044ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b4:	f7fe f860 	bl	8002578 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f241 3288 	movw	r2, #5000	; 0x1388
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e053      	b.n	8004572 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ca:	4b2d      	ldr	r3, [pc, #180]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f003 020c 	and.w	r2, r3, #12
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	429a      	cmp	r2, r3
 80044da:	d1eb      	bne.n	80044b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044dc:	4b27      	ldr	r3, [pc, #156]	; (800457c <HAL_RCC_ClockConfig+0x1c0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d210      	bcs.n	800450c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ea:	4b24      	ldr	r3, [pc, #144]	; (800457c <HAL_RCC_ClockConfig+0x1c0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 0207 	bic.w	r2, r3, #7
 80044f2:	4922      	ldr	r1, [pc, #136]	; (800457c <HAL_RCC_ClockConfig+0x1c0>)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fa:	4b20      	ldr	r3, [pc, #128]	; (800457c <HAL_RCC_ClockConfig+0x1c0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d001      	beq.n	800450c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e032      	b.n	8004572 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004518:	4b19      	ldr	r3, [pc, #100]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4916      	ldr	r1, [pc, #88]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 8004526:	4313      	orrs	r3, r2
 8004528:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004536:	4b12      	ldr	r3, [pc, #72]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	490e      	ldr	r1, [pc, #56]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 8004546:	4313      	orrs	r3, r2
 8004548:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800454a:	f000 f821 	bl	8004590 <HAL_RCC_GetSysClockFreq>
 800454e:	4602      	mov	r2, r0
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <HAL_RCC_ClockConfig+0x1c4>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	091b      	lsrs	r3, r3, #4
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	490a      	ldr	r1, [pc, #40]	; (8004584 <HAL_RCC_ClockConfig+0x1c8>)
 800455c:	5ccb      	ldrb	r3, [r1, r3]
 800455e:	fa22 f303 	lsr.w	r3, r2, r3
 8004562:	4a09      	ldr	r2, [pc, #36]	; (8004588 <HAL_RCC_ClockConfig+0x1cc>)
 8004564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004566:	4b09      	ldr	r3, [pc, #36]	; (800458c <HAL_RCC_ClockConfig+0x1d0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f7fd ffc2 	bl	80024f4 <HAL_InitTick>

  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40022000 	.word	0x40022000
 8004580:	40021000 	.word	0x40021000
 8004584:	08008760 	.word	0x08008760
 8004588:	20000020 	.word	0x20000020
 800458c:	20000024 	.word	0x20000024

08004590 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004590:	b490      	push	{r4, r7}
 8004592:	b08a      	sub	sp, #40	; 0x28
 8004594:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004596:	4b29      	ldr	r3, [pc, #164]	; (800463c <HAL_RCC_GetSysClockFreq+0xac>)
 8004598:	1d3c      	adds	r4, r7, #4
 800459a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800459c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80045a0:	f240 2301 	movw	r3, #513	; 0x201
 80045a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61fb      	str	r3, [r7, #28]
 80045aa:	2300      	movs	r3, #0
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	2300      	movs	r3, #0
 80045b0:	627b      	str	r3, [r7, #36]	; 0x24
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045ba:	4b21      	ldr	r3, [pc, #132]	; (8004640 <HAL_RCC_GetSysClockFreq+0xb0>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d002      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x40>
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d003      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x46>
 80045ce:	e02b      	b.n	8004628 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045d0:	4b1c      	ldr	r3, [pc, #112]	; (8004644 <HAL_RCC_GetSysClockFreq+0xb4>)
 80045d2:	623b      	str	r3, [r7, #32]
      break;
 80045d4:	e02b      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	0c9b      	lsrs	r3, r3, #18
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	3328      	adds	r3, #40	; 0x28
 80045e0:	443b      	add	r3, r7
 80045e2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80045e6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d012      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045f2:	4b13      	ldr	r3, [pc, #76]	; (8004640 <HAL_RCC_GetSysClockFreq+0xb0>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	0c5b      	lsrs	r3, r3, #17
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	3328      	adds	r3, #40	; 0x28
 80045fe:	443b      	add	r3, r7
 8004600:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004604:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	4a0e      	ldr	r2, [pc, #56]	; (8004644 <HAL_RCC_GetSysClockFreq+0xb4>)
 800460a:	fb03 f202 	mul.w	r2, r3, r2
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	fbb2 f3f3 	udiv	r3, r2, r3
 8004614:	627b      	str	r3, [r7, #36]	; 0x24
 8004616:	e004      	b.n	8004622 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	4a0b      	ldr	r2, [pc, #44]	; (8004648 <HAL_RCC_GetSysClockFreq+0xb8>)
 800461c:	fb02 f303 	mul.w	r3, r2, r3
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	623b      	str	r3, [r7, #32]
      break;
 8004626:	e002      	b.n	800462e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <HAL_RCC_GetSysClockFreq+0xb4>)
 800462a:	623b      	str	r3, [r7, #32]
      break;
 800462c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800462e:	6a3b      	ldr	r3, [r7, #32]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3728      	adds	r7, #40	; 0x28
 8004634:	46bd      	mov	sp, r7
 8004636:	bc90      	pop	{r4, r7}
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	08008750 	.word	0x08008750
 8004640:	40021000 	.word	0x40021000
 8004644:	007a1200 	.word	0x007a1200
 8004648:	003d0900 	.word	0x003d0900

0800464c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004650:	4b02      	ldr	r3, [pc, #8]	; (800465c <HAL_RCC_GetHCLKFreq+0x10>)
 8004652:	681b      	ldr	r3, [r3, #0]
}
 8004654:	4618      	mov	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr
 800465c:	20000020 	.word	0x20000020

08004660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004664:	f7ff fff2 	bl	800464c <HAL_RCC_GetHCLKFreq>
 8004668:	4602      	mov	r2, r0
 800466a:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCC_GetPCLK1Freq+0x20>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	0a1b      	lsrs	r3, r3, #8
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	4903      	ldr	r1, [pc, #12]	; (8004684 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004676:	5ccb      	ldrb	r3, [r1, r3]
 8004678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800467c:	4618      	mov	r0, r3
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40021000 	.word	0x40021000
 8004684:	08008770 	.word	0x08008770

08004688 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004690:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <RCC_Delay+0x34>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a0a      	ldr	r2, [pc, #40]	; (80046c0 <RCC_Delay+0x38>)
 8004696:	fba2 2303 	umull	r2, r3, r2, r3
 800469a:	0a5b      	lsrs	r3, r3, #9
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	fb02 f303 	mul.w	r3, r2, r3
 80046a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046a4:	bf00      	nop
  }
  while (Delay --);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	1e5a      	subs	r2, r3, #1
 80046aa:	60fa      	str	r2, [r7, #12]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1f9      	bne.n	80046a4 <RCC_Delay+0x1c>
}
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr
 80046bc:	20000020 	.word	0x20000020
 80046c0:	10624dd3 	.word	0x10624dd3

080046c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e041      	b.n	800475a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fd fd48 	bl	8002180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	4619      	mov	r1, r3
 8004702:	4610      	mov	r0, r2
 8004704:	f000 fda0 	bl	8005248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d001      	beq.n	800477c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e03a      	b.n	80047f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a18      	ldr	r2, [pc, #96]	; (80047fc <HAL_TIM_Base_Start_IT+0x98>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00e      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x58>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a6:	d009      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x58>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a14      	ldr	r2, [pc, #80]	; (8004800 <HAL_TIM_Base_Start_IT+0x9c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x58>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a13      	ldr	r2, [pc, #76]	; (8004804 <HAL_TIM_Base_Start_IT+0xa0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d111      	bne.n	80047e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0307 	and.w	r3, r3, #7
 80047c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b06      	cmp	r3, #6
 80047cc:	d010      	beq.n	80047f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 0201 	orr.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047de:	e007      	b.n	80047f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3714      	adds	r7, #20
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr
 80047fc:	40012c00 	.word	0x40012c00
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800

08004808 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e041      	b.n	800489e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f839 	bl	80048a6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3304      	adds	r3, #4
 8004844:	4619      	mov	r1, r3
 8004846:	4610      	mov	r0, r2
 8004848:	f000 fcfe 	bl	8005248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3708      	adds	r7, #8
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr

080048b8 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d104      	bne.n	80048d2 <HAL_TIM_IC_Start+0x1a>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	e013      	b.n	80048fa <HAL_TIM_IC_Start+0x42>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d104      	bne.n	80048e2 <HAL_TIM_IC_Start+0x2a>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	e00b      	b.n	80048fa <HAL_TIM_IC_Start+0x42>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d104      	bne.n	80048f2 <HAL_TIM_IC_Start+0x3a>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	e003      	b.n	80048fa <HAL_TIM_IC_Start+0x42>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d104      	bne.n	800490c <HAL_TIM_IC_Start+0x54>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004908:	b2db      	uxtb	r3, r3
 800490a:	e013      	b.n	8004934 <HAL_TIM_IC_Start+0x7c>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b04      	cmp	r3, #4
 8004910:	d104      	bne.n	800491c <HAL_TIM_IC_Start+0x64>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004918:	b2db      	uxtb	r3, r3
 800491a:	e00b      	b.n	8004934 <HAL_TIM_IC_Start+0x7c>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2b08      	cmp	r3, #8
 8004920:	d104      	bne.n	800492c <HAL_TIM_IC_Start+0x74>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004928:	b2db      	uxtb	r3, r3
 800492a:	e003      	b.n	8004934 <HAL_TIM_IC_Start+0x7c>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004932:	b2db      	uxtb	r3, r3
 8004934:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004936:	7bfb      	ldrb	r3, [r7, #15]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d102      	bne.n	8004942 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800493c:	7bbb      	ldrb	r3, [r7, #14]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d001      	beq.n	8004946 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e06d      	b.n	8004a22 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d104      	bne.n	8004956 <HAL_TIM_IC_Start+0x9e>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004954:	e013      	b.n	800497e <HAL_TIM_IC_Start+0xc6>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b04      	cmp	r3, #4
 800495a:	d104      	bne.n	8004966 <HAL_TIM_IC_Start+0xae>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004964:	e00b      	b.n	800497e <HAL_TIM_IC_Start+0xc6>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b08      	cmp	r3, #8
 800496a:	d104      	bne.n	8004976 <HAL_TIM_IC_Start+0xbe>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004974:	e003      	b.n	800497e <HAL_TIM_IC_Start+0xc6>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2202      	movs	r2, #2
 800497a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d104      	bne.n	800498e <HAL_TIM_IC_Start+0xd6>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800498c:	e013      	b.n	80049b6 <HAL_TIM_IC_Start+0xfe>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b04      	cmp	r3, #4
 8004992:	d104      	bne.n	800499e <HAL_TIM_IC_Start+0xe6>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2202      	movs	r2, #2
 8004998:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800499c:	e00b      	b.n	80049b6 <HAL_TIM_IC_Start+0xfe>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b08      	cmp	r3, #8
 80049a2:	d104      	bne.n	80049ae <HAL_TIM_IC_Start+0xf6>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ac:	e003      	b.n	80049b6 <HAL_TIM_IC_Start+0xfe>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2202      	movs	r2, #2
 80049b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2201      	movs	r2, #1
 80049bc:	6839      	ldr	r1, [r7, #0]
 80049be:	4618      	mov	r0, r3
 80049c0:	f000 fed5 	bl	800576e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a18      	ldr	r2, [pc, #96]	; (8004a2c <HAL_TIM_IC_Start+0x174>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d00e      	beq.n	80049ec <HAL_TIM_IC_Start+0x134>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d6:	d009      	beq.n	80049ec <HAL_TIM_IC_Start+0x134>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a14      	ldr	r2, [pc, #80]	; (8004a30 <HAL_TIM_IC_Start+0x178>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_TIM_IC_Start+0x134>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a13      	ldr	r2, [pc, #76]	; (8004a34 <HAL_TIM_IC_Start+0x17c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d111      	bne.n	8004a10 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d010      	beq.n	8004a20 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f042 0201 	orr.w	r2, r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a0e:	e007      	b.n	8004a20 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f042 0201 	orr.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	40012c00 	.word	0x40012c00
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800

08004a38 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d104      	bne.n	8004a52 <HAL_TIM_IC_Start_IT+0x1a>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	e013      	b.n	8004a7a <HAL_TIM_IC_Start_IT+0x42>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b04      	cmp	r3, #4
 8004a56:	d104      	bne.n	8004a62 <HAL_TIM_IC_Start_IT+0x2a>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	e00b      	b.n	8004a7a <HAL_TIM_IC_Start_IT+0x42>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_IC_Start_IT+0x3a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	e003      	b.n	8004a7a <HAL_TIM_IC_Start_IT+0x42>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d104      	bne.n	8004a8c <HAL_TIM_IC_Start_IT+0x54>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	e013      	b.n	8004ab4 <HAL_TIM_IC_Start_IT+0x7c>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d104      	bne.n	8004a9c <HAL_TIM_IC_Start_IT+0x64>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	e00b      	b.n	8004ab4 <HAL_TIM_IC_Start_IT+0x7c>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d104      	bne.n	8004aac <HAL_TIM_IC_Start_IT+0x74>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	e003      	b.n	8004ab4 <HAL_TIM_IC_Start_IT+0x7c>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d102      	bne.n	8004ac2 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004abc:	7bbb      	ldrb	r3, [r7, #14]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d001      	beq.n	8004ac6 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e0b3      	b.n	8004c2e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d104      	bne.n	8004ad6 <HAL_TIM_IC_Start_IT+0x9e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad4:	e013      	b.n	8004afe <HAL_TIM_IC_Start_IT+0xc6>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b04      	cmp	r3, #4
 8004ada:	d104      	bne.n	8004ae6 <HAL_TIM_IC_Start_IT+0xae>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae4:	e00b      	b.n	8004afe <HAL_TIM_IC_Start_IT+0xc6>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d104      	bne.n	8004af6 <HAL_TIM_IC_Start_IT+0xbe>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004af4:	e003      	b.n	8004afe <HAL_TIM_IC_Start_IT+0xc6>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2202      	movs	r2, #2
 8004afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d104      	bne.n	8004b0e <HAL_TIM_IC_Start_IT+0xd6>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b0c:	e013      	b.n	8004b36 <HAL_TIM_IC_Start_IT+0xfe>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d104      	bne.n	8004b1e <HAL_TIM_IC_Start_IT+0xe6>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b1c:	e00b      	b.n	8004b36 <HAL_TIM_IC_Start_IT+0xfe>
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d104      	bne.n	8004b2e <HAL_TIM_IC_Start_IT+0xf6>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2202      	movs	r2, #2
 8004b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b2c:	e003      	b.n	8004b36 <HAL_TIM_IC_Start_IT+0xfe>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2202      	movs	r2, #2
 8004b32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b0c      	cmp	r3, #12
 8004b3a:	d841      	bhi.n	8004bc0 <HAL_TIM_IC_Start_IT+0x188>
 8004b3c:	a201      	add	r2, pc, #4	; (adr r2, 8004b44 <HAL_TIM_IC_Start_IT+0x10c>)
 8004b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b42:	bf00      	nop
 8004b44:	08004b79 	.word	0x08004b79
 8004b48:	08004bc1 	.word	0x08004bc1
 8004b4c:	08004bc1 	.word	0x08004bc1
 8004b50:	08004bc1 	.word	0x08004bc1
 8004b54:	08004b8b 	.word	0x08004b8b
 8004b58:	08004bc1 	.word	0x08004bc1
 8004b5c:	08004bc1 	.word	0x08004bc1
 8004b60:	08004bc1 	.word	0x08004bc1
 8004b64:	08004b9d 	.word	0x08004b9d
 8004b68:	08004bc1 	.word	0x08004bc1
 8004b6c:	08004bc1 	.word	0x08004bc1
 8004b70:	08004bc1 	.word	0x08004bc1
 8004b74:	08004baf 	.word	0x08004baf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68da      	ldr	r2, [r3, #12]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0202 	orr.w	r2, r2, #2
 8004b86:	60da      	str	r2, [r3, #12]
      break;
 8004b88:	e01b      	b.n	8004bc2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68da      	ldr	r2, [r3, #12]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0204 	orr.w	r2, r2, #4
 8004b98:	60da      	str	r2, [r3, #12]
      break;
 8004b9a:	e012      	b.n	8004bc2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68da      	ldr	r2, [r3, #12]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0208 	orr.w	r2, r2, #8
 8004baa:	60da      	str	r2, [r3, #12]
      break;
 8004bac:	e009      	b.n	8004bc2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f042 0210 	orr.w	r2, r2, #16
 8004bbc:	60da      	str	r2, [r3, #12]
      break;
 8004bbe:	e000      	b.n	8004bc2 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004bc0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	6839      	ldr	r1, [r7, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fdcf 	bl	800576e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a18      	ldr	r2, [pc, #96]	; (8004c38 <HAL_TIM_IC_Start_IT+0x200>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00e      	beq.n	8004bf8 <HAL_TIM_IC_Start_IT+0x1c0>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004be2:	d009      	beq.n	8004bf8 <HAL_TIM_IC_Start_IT+0x1c0>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a14      	ldr	r2, [pc, #80]	; (8004c3c <HAL_TIM_IC_Start_IT+0x204>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d004      	beq.n	8004bf8 <HAL_TIM_IC_Start_IT+0x1c0>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a13      	ldr	r2, [pc, #76]	; (8004c40 <HAL_TIM_IC_Start_IT+0x208>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d111      	bne.n	8004c1c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b06      	cmp	r3, #6
 8004c08:	d010      	beq.n	8004c2c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0201 	orr.w	r2, r2, #1
 8004c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c1a:	e007      	b.n	8004c2c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f042 0201 	orr.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40012c00 	.word	0x40012c00
 8004c3c:	40000400 	.word	0x40000400
 8004c40:	40000800 	.word	0x40000800

08004c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d122      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d11b      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0202 	mvn.w	r2, #2
 8004c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f7fc fe40 	bl	800190c <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fabe 	bl	8005210 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fac4 	bl	8005222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d122      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d11b      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0204 	mvn.w	r2, #4
 8004cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2202      	movs	r2, #2
 8004cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7fc fe16 	bl	800190c <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e005      	b.n	8004cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fa94 	bl	8005210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fa9a 	bl	8005222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b08      	cmp	r3, #8
 8004d00:	d122      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0308 	and.w	r3, r3, #8
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d11b      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0208 	mvn.w	r2, #8
 8004d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7fc fdec 	bl	800190c <HAL_TIM_IC_CaptureCallback>
 8004d34:	e005      	b.n	8004d42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fa6a 	bl	8005210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 fa70 	bl	8005222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b10      	cmp	r3, #16
 8004d54:	d122      	bne.n	8004d9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d11b      	bne.n	8004d9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0210 	mvn.w	r2, #16
 8004d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2208      	movs	r2, #8
 8004d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7fc fdc2 	bl	800190c <HAL_TIM_IC_CaptureCallback>
 8004d88:	e005      	b.n	8004d96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 fa40 	bl	8005210 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fa46 	bl	8005222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d10e      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d107      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0201 	mvn.w	r2, #1
 8004dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fc fe0c 	bl	80019e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd2:	2b80      	cmp	r3, #128	; 0x80
 8004dd4:	d10e      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de0:	2b80      	cmp	r3, #128	; 0x80
 8004de2:	d107      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fd49 	bl	8005886 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfe:	2b40      	cmp	r3, #64	; 0x40
 8004e00:	d10e      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d107      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fa0a 	bl	8005234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f003 0320 	and.w	r3, r3, #32
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	d10e      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d107      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0220 	mvn.w	r2, #32
 8004e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fd14 	bl	8005874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e4c:	bf00      	nop
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d101      	bne.n	8004e6e <HAL_TIM_IC_ConfigChannel+0x1a>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	e082      	b.n	8004f74 <HAL_TIM_IC_ConfigChannel+0x120>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d11b      	bne.n	8004eb4 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	6819      	ldr	r1, [r3, #0]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f000 facc 	bl	8005428 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 020c 	bic.w	r2, r2, #12
 8004e9e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6999      	ldr	r1, [r3, #24]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	619a      	str	r2, [r3, #24]
 8004eb2:	e05a      	b.n	8004f6a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d11c      	bne.n	8004ef4 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6818      	ldr	r0, [r3, #0]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	6819      	ldr	r1, [r3, #0]
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	f000 fb35 	bl	8005538 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699a      	ldr	r2, [r3, #24]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004edc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6999      	ldr	r1, [r3, #24]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	021a      	lsls	r2, r3, #8
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	619a      	str	r2, [r3, #24]
 8004ef2:	e03a      	b.n	8004f6a <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d11b      	bne.n	8004f32 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	6819      	ldr	r1, [r3, #0]
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f000 fb80 	bl	800560e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69da      	ldr	r2, [r3, #28]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 020c 	bic.w	r2, r2, #12
 8004f1c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69d9      	ldr	r1, [r3, #28]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	61da      	str	r2, [r3, #28]
 8004f30:	e01b      	b.n	8004f6a <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6818      	ldr	r0, [r3, #0]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	6819      	ldr	r1, [r3, #0]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f000 fb9f 	bl	8005684 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69da      	ldr	r2, [r3, #28]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f54:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69d9      	ldr	r1, [r3, #28]
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	021a      	lsls	r2, r3, #8
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d101      	bne.n	8004f94 <HAL_TIM_ConfigClockSource+0x18>
 8004f90:	2302      	movs	r3, #2
 8004f92:	e0b3      	b.n	80050fc <HAL_TIM_ConfigClockSource+0x180>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fcc:	d03e      	beq.n	800504c <HAL_TIM_ConfigClockSource+0xd0>
 8004fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd2:	f200 8087 	bhi.w	80050e4 <HAL_TIM_ConfigClockSource+0x168>
 8004fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fda:	f000 8085 	beq.w	80050e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe2:	d87f      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x168>
 8004fe4:	2b70      	cmp	r3, #112	; 0x70
 8004fe6:	d01a      	beq.n	800501e <HAL_TIM_ConfigClockSource+0xa2>
 8004fe8:	2b70      	cmp	r3, #112	; 0x70
 8004fea:	d87b      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x168>
 8004fec:	2b60      	cmp	r3, #96	; 0x60
 8004fee:	d050      	beq.n	8005092 <HAL_TIM_ConfigClockSource+0x116>
 8004ff0:	2b60      	cmp	r3, #96	; 0x60
 8004ff2:	d877      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x168>
 8004ff4:	2b50      	cmp	r3, #80	; 0x50
 8004ff6:	d03c      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0xf6>
 8004ff8:	2b50      	cmp	r3, #80	; 0x50
 8004ffa:	d873      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x168>
 8004ffc:	2b40      	cmp	r3, #64	; 0x40
 8004ffe:	d058      	beq.n	80050b2 <HAL_TIM_ConfigClockSource+0x136>
 8005000:	2b40      	cmp	r3, #64	; 0x40
 8005002:	d86f      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x168>
 8005004:	2b30      	cmp	r3, #48	; 0x30
 8005006:	d064      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x156>
 8005008:	2b30      	cmp	r3, #48	; 0x30
 800500a:	d86b      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x168>
 800500c:	2b20      	cmp	r3, #32
 800500e:	d060      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x156>
 8005010:	2b20      	cmp	r3, #32
 8005012:	d867      	bhi.n	80050e4 <HAL_TIM_ConfigClockSource+0x168>
 8005014:	2b00      	cmp	r3, #0
 8005016:	d05c      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x156>
 8005018:	2b10      	cmp	r3, #16
 800501a:	d05a      	beq.n	80050d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800501c:	e062      	b.n	80050e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6818      	ldr	r0, [r3, #0]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6899      	ldr	r1, [r3, #8]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f000 fb7f 	bl	8005730 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005040:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	609a      	str	r2, [r3, #8]
      break;
 800504a:	e04e      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6818      	ldr	r0, [r3, #0]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	6899      	ldr	r1, [r3, #8]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f000 fb68 	bl	8005730 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800506e:	609a      	str	r2, [r3, #8]
      break;
 8005070:	e03b      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	6859      	ldr	r1, [r3, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	461a      	mov	r2, r3
 8005080:	f000 fa2c 	bl	80054dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2150      	movs	r1, #80	; 0x50
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fb36 	bl	80056fc <TIM_ITRx_SetConfig>
      break;
 8005090:	e02b      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6818      	ldr	r0, [r3, #0]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	6859      	ldr	r1, [r3, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	68db      	ldr	r3, [r3, #12]
 800509e:	461a      	mov	r2, r3
 80050a0:	f000 fa86 	bl	80055b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2160      	movs	r1, #96	; 0x60
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fb26 	bl	80056fc <TIM_ITRx_SetConfig>
      break;
 80050b0:	e01b      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6818      	ldr	r0, [r3, #0]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	6859      	ldr	r1, [r3, #4]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	461a      	mov	r2, r3
 80050c0:	f000 fa0c 	bl	80054dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2140      	movs	r1, #64	; 0x40
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fb16 	bl	80056fc <TIM_ITRx_SetConfig>
      break;
 80050d0:	e00b      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4619      	mov	r1, r3
 80050dc:	4610      	mov	r0, r2
 80050de:	f000 fb0d 	bl	80056fc <TIM_ITRx_SetConfig>
        break;
 80050e2:	e002      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80050e4:	bf00      	nop
 80050e6:	e000      	b.n	80050ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80050e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005118:	2302      	movs	r3, #2
 800511a:	e031      	b.n	8005180 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f8ec 	bl	800530c <TIM_SlaveTimer_SetConfig>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d009      	beq.n	800514e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e018      	b.n	8005180 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800515c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800516c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b0c      	cmp	r3, #12
 800519a:	d831      	bhi.n	8005200 <HAL_TIM_ReadCapturedValue+0x78>
 800519c:	a201      	add	r2, pc, #4	; (adr r2, 80051a4 <HAL_TIM_ReadCapturedValue+0x1c>)
 800519e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a2:	bf00      	nop
 80051a4:	080051d9 	.word	0x080051d9
 80051a8:	08005201 	.word	0x08005201
 80051ac:	08005201 	.word	0x08005201
 80051b0:	08005201 	.word	0x08005201
 80051b4:	080051e3 	.word	0x080051e3
 80051b8:	08005201 	.word	0x08005201
 80051bc:	08005201 	.word	0x08005201
 80051c0:	08005201 	.word	0x08005201
 80051c4:	080051ed 	.word	0x080051ed
 80051c8:	08005201 	.word	0x08005201
 80051cc:	08005201 	.word	0x08005201
 80051d0:	08005201 	.word	0x08005201
 80051d4:	080051f7 	.word	0x080051f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051de:	60fb      	str	r3, [r7, #12]

      break;
 80051e0:	e00f      	b.n	8005202 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	60fb      	str	r3, [r7, #12]

      break;
 80051ea:	e00a      	b.n	8005202 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f2:	60fb      	str	r3, [r7, #12]

      break;
 80051f4:	e005      	b.n	8005202 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	60fb      	str	r3, [r7, #12]

      break;
 80051fe:	e000      	b.n	8005202 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005200:	bf00      	nop
  }

  return tmpreg;
 8005202:	68fb      	ldr	r3, [r7, #12]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3714      	adds	r7, #20
 8005208:	46bd      	mov	sp, r7
 800520a:	bc80      	pop	{r7}
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop

08005210 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	bc80      	pop	{r7}
 8005220:	4770      	bx	lr

08005222 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005222:	b480      	push	{r7}
 8005224:	b083      	sub	sp, #12
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	bc80      	pop	{r7}
 8005232:	4770      	bx	lr

08005234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	bc80      	pop	{r7}
 8005244:	4770      	bx	lr
	...

08005248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a29      	ldr	r2, [pc, #164]	; (8005300 <TIM_Base_SetConfig+0xb8>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00b      	beq.n	8005278 <TIM_Base_SetConfig+0x30>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005266:	d007      	beq.n	8005278 <TIM_Base_SetConfig+0x30>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a26      	ldr	r2, [pc, #152]	; (8005304 <TIM_Base_SetConfig+0xbc>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d003      	beq.n	8005278 <TIM_Base_SetConfig+0x30>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a25      	ldr	r2, [pc, #148]	; (8005308 <TIM_Base_SetConfig+0xc0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d108      	bne.n	800528a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a1c      	ldr	r2, [pc, #112]	; (8005300 <TIM_Base_SetConfig+0xb8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d00b      	beq.n	80052aa <TIM_Base_SetConfig+0x62>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005298:	d007      	beq.n	80052aa <TIM_Base_SetConfig+0x62>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a19      	ldr	r2, [pc, #100]	; (8005304 <TIM_Base_SetConfig+0xbc>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d003      	beq.n	80052aa <TIM_Base_SetConfig+0x62>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a18      	ldr	r2, [pc, #96]	; (8005308 <TIM_Base_SetConfig+0xc0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d108      	bne.n	80052bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68fa      	ldr	r2, [r7, #12]
 80052ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a07      	ldr	r2, [pc, #28]	; (8005300 <TIM_Base_SetConfig+0xb8>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d103      	bne.n	80052f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	691a      	ldr	r2, [r3, #16]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	615a      	str	r2, [r3, #20]
}
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc80      	pop	{r7}
 80052fe:	4770      	bx	lr
 8005300:	40012c00 	.word	0x40012c00
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800

0800530c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005324:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f023 0307 	bic.w	r3, r3, #7
 8005336:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b70      	cmp	r3, #112	; 0x70
 8005350:	d01a      	beq.n	8005388 <TIM_SlaveTimer_SetConfig+0x7c>
 8005352:	2b70      	cmp	r3, #112	; 0x70
 8005354:	d860      	bhi.n	8005418 <TIM_SlaveTimer_SetConfig+0x10c>
 8005356:	2b60      	cmp	r3, #96	; 0x60
 8005358:	d054      	beq.n	8005404 <TIM_SlaveTimer_SetConfig+0xf8>
 800535a:	2b60      	cmp	r3, #96	; 0x60
 800535c:	d85c      	bhi.n	8005418 <TIM_SlaveTimer_SetConfig+0x10c>
 800535e:	2b50      	cmp	r3, #80	; 0x50
 8005360:	d046      	beq.n	80053f0 <TIM_SlaveTimer_SetConfig+0xe4>
 8005362:	2b50      	cmp	r3, #80	; 0x50
 8005364:	d858      	bhi.n	8005418 <TIM_SlaveTimer_SetConfig+0x10c>
 8005366:	2b40      	cmp	r3, #64	; 0x40
 8005368:	d019      	beq.n	800539e <TIM_SlaveTimer_SetConfig+0x92>
 800536a:	2b40      	cmp	r3, #64	; 0x40
 800536c:	d854      	bhi.n	8005418 <TIM_SlaveTimer_SetConfig+0x10c>
 800536e:	2b30      	cmp	r3, #48	; 0x30
 8005370:	d054      	beq.n	800541c <TIM_SlaveTimer_SetConfig+0x110>
 8005372:	2b30      	cmp	r3, #48	; 0x30
 8005374:	d850      	bhi.n	8005418 <TIM_SlaveTimer_SetConfig+0x10c>
 8005376:	2b20      	cmp	r3, #32
 8005378:	d050      	beq.n	800541c <TIM_SlaveTimer_SetConfig+0x110>
 800537a:	2b20      	cmp	r3, #32
 800537c:	d84c      	bhi.n	8005418 <TIM_SlaveTimer_SetConfig+0x10c>
 800537e:	2b00      	cmp	r3, #0
 8005380:	d04c      	beq.n	800541c <TIM_SlaveTimer_SetConfig+0x110>
 8005382:	2b10      	cmp	r3, #16
 8005384:	d04a      	beq.n	800541c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8005386:	e047      	b.n	8005418 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	68d9      	ldr	r1, [r3, #12]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f000 f9ca 	bl	8005730 <TIM_ETR_SetConfig>
      break;
 800539c:	e03f      	b.n	800541e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b05      	cmp	r3, #5
 80053a4:	d101      	bne.n	80053aa <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e03a      	b.n	8005420 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	6a1a      	ldr	r2, [r3, #32]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f022 0201 	bic.w	r2, r2, #1
 80053c0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053d0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	621a      	str	r2, [r3, #32]
      break;
 80053ee:	e016      	b.n	800541e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	6899      	ldr	r1, [r3, #8]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	461a      	mov	r2, r3
 80053fe:	f000 f86d 	bl	80054dc <TIM_TI1_ConfigInputStage>
      break;
 8005402:	e00c      	b.n	800541e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6818      	ldr	r0, [r3, #0]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	6899      	ldr	r1, [r3, #8]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	461a      	mov	r2, r3
 8005412:	f000 f8cd 	bl	80055b0 <TIM_TI2_ConfigInputStage>
      break;
 8005416:	e002      	b.n	800541e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8005418:	bf00      	nop
 800541a:	e000      	b.n	800541e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 800541c:	bf00      	nop
  }
  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3718      	adds	r7, #24
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005428:	b480      	push	{r7}
 800542a:	b087      	sub	sp, #28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	f023 0201 	bic.w	r2, r3, #1
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4a1f      	ldr	r2, [pc, #124]	; (80054d0 <TIM_TI1_SetConfig+0xa8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d00b      	beq.n	800546e <TIM_TI1_SetConfig+0x46>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545c:	d007      	beq.n	800546e <TIM_TI1_SetConfig+0x46>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4a1c      	ldr	r2, [pc, #112]	; (80054d4 <TIM_TI1_SetConfig+0xac>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d003      	beq.n	800546e <TIM_TI1_SetConfig+0x46>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4a1b      	ldr	r2, [pc, #108]	; (80054d8 <TIM_TI1_SetConfig+0xb0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d101      	bne.n	8005472 <TIM_TI1_SetConfig+0x4a>
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <TIM_TI1_SetConfig+0x4c>
 8005472:	2300      	movs	r3, #0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]
 8005488:	e003      	b.n	8005492 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f043 0301 	orr.w	r3, r3, #1
 8005490:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005498:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f023 030a 	bic.w	r3, r3, #10
 80054ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f003 030a 	and.w	r3, r3, #10
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	621a      	str	r2, [r3, #32]
}
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr
 80054d0:	40012c00 	.word	0x40012c00
 80054d4:	40000400 	.word	0x40000400
 80054d8:	40000800 	.word	0x40000800

080054dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	f023 0201 	bic.w	r2, r3, #1
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	4313      	orrs	r3, r2
 8005510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f023 030a 	bic.w	r3, r3, #10
 8005518:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4313      	orrs	r3, r2
 8005520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	621a      	str	r2, [r3, #32]
}
 800552e:	bf00      	nop
 8005530:	371c      	adds	r7, #28
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr

08005538 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	f023 0210 	bic.w	r2, r3, #16
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005564:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	021b      	lsls	r3, r3, #8
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4313      	orrs	r3, r2
 800556e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005576:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	031b      	lsls	r3, r3, #12
 800557c:	b29b      	uxth	r3, r3
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800558a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	693a      	ldr	r2, [r7, #16]
 80055a4:	621a      	str	r2, [r3, #32]
}
 80055a6:	bf00      	nop
 80055a8:	371c      	adds	r7, #28
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bc80      	pop	{r7}
 80055ae:	4770      	bx	lr

080055b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	f023 0210 	bic.w	r2, r3, #16
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	031b      	lsls	r3, r3, #12
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	621a      	str	r2, [r3, #32]
}
 8005604:	bf00      	nop
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	bc80      	pop	{r7}
 800560c:	4770      	bx	lr

0800560e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800560e:	b480      	push	{r7}
 8005610:	b087      	sub	sp, #28
 8005612:	af00      	add	r7, sp, #0
 8005614:	60f8      	str	r0, [r7, #12]
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	607a      	str	r2, [r7, #4]
 800561a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f023 0303 	bic.w	r3, r3, #3
 800563a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800564a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	b2db      	uxtb	r3, r3
 8005652:	697a      	ldr	r2, [r7, #20]
 8005654:	4313      	orrs	r3, r2
 8005656:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800565e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4313      	orrs	r3, r2
 800566c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	621a      	str	r2, [r3, #32]
}
 800567a:	bf00      	nop
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	bc80      	pop	{r7}
 8005682:	4770      	bx	lr

08005684 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	021b      	lsls	r3, r3, #8
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	031b      	lsls	r3, r3, #12
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	031b      	lsls	r3, r3, #12
 80056dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	621a      	str	r2, [r3, #32]
}
 80056f2:	bf00      	nop
 80056f4:	371c      	adds	r7, #28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bc80      	pop	{r7}
 80056fa:	4770      	bx	lr

080056fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005712:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4313      	orrs	r3, r2
 800571a:	f043 0307 	orr.w	r3, r3, #7
 800571e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	609a      	str	r2, [r3, #8]
}
 8005726:	bf00      	nop
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	bc80      	pop	{r7}
 800572e:	4770      	bx	lr

08005730 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
 800573c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800574a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	021a      	lsls	r2, r3, #8
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	431a      	orrs	r2, r3
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4313      	orrs	r3, r2
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	4313      	orrs	r3, r2
 800575c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	609a      	str	r2, [r3, #8]
}
 8005764:	bf00      	nop
 8005766:	371c      	adds	r7, #28
 8005768:	46bd      	mov	sp, r7
 800576a:	bc80      	pop	{r7}
 800576c:	4770      	bx	lr

0800576e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800576e:	b480      	push	{r7}
 8005770:	b087      	sub	sp, #28
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	60b9      	str	r1, [r7, #8]
 8005778:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f003 031f 	and.w	r3, r3, #31
 8005780:	2201      	movs	r2, #1
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a1a      	ldr	r2, [r3, #32]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	43db      	mvns	r3, r3
 8005790:	401a      	ands	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6a1a      	ldr	r2, [r3, #32]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	fa01 f303 	lsl.w	r3, r1, r3
 80057a6:	431a      	orrs	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	621a      	str	r2, [r3, #32]
}
 80057ac:	bf00      	nop
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc80      	pop	{r7}
 80057b4:	4770      	bx	lr
	...

080057b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e046      	b.n	800585e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a16      	ldr	r2, [pc, #88]	; (8005868 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00e      	beq.n	8005832 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800581c:	d009      	beq.n	8005832 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a12      	ldr	r2, [pc, #72]	; (800586c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d004      	beq.n	8005832 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a10      	ldr	r2, [pc, #64]	; (8005870 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d10c      	bne.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	4313      	orrs	r3, r2
 8005842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	bc80      	pop	{r7}
 8005866:	4770      	bx	lr
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40000400 	.word	0x40000400
 8005870:	40000800 	.word	0x40000800

08005874 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	bc80      	pop	{r7}
 8005884:	4770      	bx	lr

08005886 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800588e:	bf00      	nop
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	bc80      	pop	{r7}
 8005896:	4770      	bx	lr

08005898 <__errno>:
 8005898:	4b01      	ldr	r3, [pc, #4]	; (80058a0 <__errno+0x8>)
 800589a:	6818      	ldr	r0, [r3, #0]
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	2000002c 	.word	0x2000002c

080058a4 <__libc_init_array>:
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	2600      	movs	r6, #0
 80058a8:	4d0c      	ldr	r5, [pc, #48]	; (80058dc <__libc_init_array+0x38>)
 80058aa:	4c0d      	ldr	r4, [pc, #52]	; (80058e0 <__libc_init_array+0x3c>)
 80058ac:	1b64      	subs	r4, r4, r5
 80058ae:	10a4      	asrs	r4, r4, #2
 80058b0:	42a6      	cmp	r6, r4
 80058b2:	d109      	bne.n	80058c8 <__libc_init_array+0x24>
 80058b4:	f002 ff1c 	bl	80086f0 <_init>
 80058b8:	2600      	movs	r6, #0
 80058ba:	4d0a      	ldr	r5, [pc, #40]	; (80058e4 <__libc_init_array+0x40>)
 80058bc:	4c0a      	ldr	r4, [pc, #40]	; (80058e8 <__libc_init_array+0x44>)
 80058be:	1b64      	subs	r4, r4, r5
 80058c0:	10a4      	asrs	r4, r4, #2
 80058c2:	42a6      	cmp	r6, r4
 80058c4:	d105      	bne.n	80058d2 <__libc_init_array+0x2e>
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
 80058c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058cc:	4798      	blx	r3
 80058ce:	3601      	adds	r6, #1
 80058d0:	e7ee      	b.n	80058b0 <__libc_init_array+0xc>
 80058d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058d6:	4798      	blx	r3
 80058d8:	3601      	adds	r6, #1
 80058da:	e7f2      	b.n	80058c2 <__libc_init_array+0x1e>
 80058dc:	08008b54 	.word	0x08008b54
 80058e0:	08008b54 	.word	0x08008b54
 80058e4:	08008b54 	.word	0x08008b54
 80058e8:	08008b58 	.word	0x08008b58

080058ec <memset>:
 80058ec:	4603      	mov	r3, r0
 80058ee:	4402      	add	r2, r0
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d100      	bne.n	80058f6 <memset+0xa>
 80058f4:	4770      	bx	lr
 80058f6:	f803 1b01 	strb.w	r1, [r3], #1
 80058fa:	e7f9      	b.n	80058f0 <memset+0x4>

080058fc <__cvt>:
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005902:	461f      	mov	r7, r3
 8005904:	bfbb      	ittet	lt
 8005906:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800590a:	461f      	movlt	r7, r3
 800590c:	2300      	movge	r3, #0
 800590e:	232d      	movlt	r3, #45	; 0x2d
 8005910:	b088      	sub	sp, #32
 8005912:	4614      	mov	r4, r2
 8005914:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005916:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005918:	7013      	strb	r3, [r2, #0]
 800591a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800591c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005920:	f023 0820 	bic.w	r8, r3, #32
 8005924:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005928:	d005      	beq.n	8005936 <__cvt+0x3a>
 800592a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800592e:	d100      	bne.n	8005932 <__cvt+0x36>
 8005930:	3501      	adds	r5, #1
 8005932:	2302      	movs	r3, #2
 8005934:	e000      	b.n	8005938 <__cvt+0x3c>
 8005936:	2303      	movs	r3, #3
 8005938:	aa07      	add	r2, sp, #28
 800593a:	9204      	str	r2, [sp, #16]
 800593c:	aa06      	add	r2, sp, #24
 800593e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005942:	e9cd 3500 	strd	r3, r5, [sp]
 8005946:	4622      	mov	r2, r4
 8005948:	463b      	mov	r3, r7
 800594a:	f000 fd05 	bl	8006358 <_dtoa_r>
 800594e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005952:	4606      	mov	r6, r0
 8005954:	d102      	bne.n	800595c <__cvt+0x60>
 8005956:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005958:	07db      	lsls	r3, r3, #31
 800595a:	d522      	bpl.n	80059a2 <__cvt+0xa6>
 800595c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005960:	eb06 0905 	add.w	r9, r6, r5
 8005964:	d110      	bne.n	8005988 <__cvt+0x8c>
 8005966:	7833      	ldrb	r3, [r6, #0]
 8005968:	2b30      	cmp	r3, #48	; 0x30
 800596a:	d10a      	bne.n	8005982 <__cvt+0x86>
 800596c:	2200      	movs	r2, #0
 800596e:	2300      	movs	r3, #0
 8005970:	4620      	mov	r0, r4
 8005972:	4639      	mov	r1, r7
 8005974:	f7fb f822 	bl	80009bc <__aeabi_dcmpeq>
 8005978:	b918      	cbnz	r0, 8005982 <__cvt+0x86>
 800597a:	f1c5 0501 	rsb	r5, r5, #1
 800597e:	f8ca 5000 	str.w	r5, [sl]
 8005982:	f8da 3000 	ldr.w	r3, [sl]
 8005986:	4499      	add	r9, r3
 8005988:	2200      	movs	r2, #0
 800598a:	2300      	movs	r3, #0
 800598c:	4620      	mov	r0, r4
 800598e:	4639      	mov	r1, r7
 8005990:	f7fb f814 	bl	80009bc <__aeabi_dcmpeq>
 8005994:	b108      	cbz	r0, 800599a <__cvt+0x9e>
 8005996:	f8cd 901c 	str.w	r9, [sp, #28]
 800599a:	2230      	movs	r2, #48	; 0x30
 800599c:	9b07      	ldr	r3, [sp, #28]
 800599e:	454b      	cmp	r3, r9
 80059a0:	d307      	bcc.n	80059b2 <__cvt+0xb6>
 80059a2:	4630      	mov	r0, r6
 80059a4:	9b07      	ldr	r3, [sp, #28]
 80059a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80059a8:	1b9b      	subs	r3, r3, r6
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	b008      	add	sp, #32
 80059ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b2:	1c59      	adds	r1, r3, #1
 80059b4:	9107      	str	r1, [sp, #28]
 80059b6:	701a      	strb	r2, [r3, #0]
 80059b8:	e7f0      	b.n	800599c <__cvt+0xa0>

080059ba <__exponent>:
 80059ba:	4603      	mov	r3, r0
 80059bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059be:	2900      	cmp	r1, #0
 80059c0:	f803 2b02 	strb.w	r2, [r3], #2
 80059c4:	bfb6      	itet	lt
 80059c6:	222d      	movlt	r2, #45	; 0x2d
 80059c8:	222b      	movge	r2, #43	; 0x2b
 80059ca:	4249      	neglt	r1, r1
 80059cc:	2909      	cmp	r1, #9
 80059ce:	7042      	strb	r2, [r0, #1]
 80059d0:	dd2b      	ble.n	8005a2a <__exponent+0x70>
 80059d2:	f10d 0407 	add.w	r4, sp, #7
 80059d6:	46a4      	mov	ip, r4
 80059d8:	270a      	movs	r7, #10
 80059da:	fb91 f6f7 	sdiv	r6, r1, r7
 80059de:	460a      	mov	r2, r1
 80059e0:	46a6      	mov	lr, r4
 80059e2:	fb07 1516 	mls	r5, r7, r6, r1
 80059e6:	2a63      	cmp	r2, #99	; 0x63
 80059e8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80059ec:	4631      	mov	r1, r6
 80059ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80059f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80059f6:	dcf0      	bgt.n	80059da <__exponent+0x20>
 80059f8:	3130      	adds	r1, #48	; 0x30
 80059fa:	f1ae 0502 	sub.w	r5, lr, #2
 80059fe:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a02:	4629      	mov	r1, r5
 8005a04:	1c44      	adds	r4, r0, #1
 8005a06:	4561      	cmp	r1, ip
 8005a08:	d30a      	bcc.n	8005a20 <__exponent+0x66>
 8005a0a:	f10d 0209 	add.w	r2, sp, #9
 8005a0e:	eba2 020e 	sub.w	r2, r2, lr
 8005a12:	4565      	cmp	r5, ip
 8005a14:	bf88      	it	hi
 8005a16:	2200      	movhi	r2, #0
 8005a18:	4413      	add	r3, r2
 8005a1a:	1a18      	subs	r0, r3, r0
 8005a1c:	b003      	add	sp, #12
 8005a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a20:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a24:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a28:	e7ed      	b.n	8005a06 <__exponent+0x4c>
 8005a2a:	2330      	movs	r3, #48	; 0x30
 8005a2c:	3130      	adds	r1, #48	; 0x30
 8005a2e:	7083      	strb	r3, [r0, #2]
 8005a30:	70c1      	strb	r1, [r0, #3]
 8005a32:	1d03      	adds	r3, r0, #4
 8005a34:	e7f1      	b.n	8005a1a <__exponent+0x60>
	...

08005a38 <_printf_float>:
 8005a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3c:	b091      	sub	sp, #68	; 0x44
 8005a3e:	460c      	mov	r4, r1
 8005a40:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005a44:	4616      	mov	r6, r2
 8005a46:	461f      	mov	r7, r3
 8005a48:	4605      	mov	r5, r0
 8005a4a:	f001 fa73 	bl	8006f34 <_localeconv_r>
 8005a4e:	6803      	ldr	r3, [r0, #0]
 8005a50:	4618      	mov	r0, r3
 8005a52:	9309      	str	r3, [sp, #36]	; 0x24
 8005a54:	f7fa fb86 	bl	8000164 <strlen>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	930e      	str	r3, [sp, #56]	; 0x38
 8005a5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005a60:	900a      	str	r0, [sp, #40]	; 0x28
 8005a62:	3307      	adds	r3, #7
 8005a64:	f023 0307 	bic.w	r3, r3, #7
 8005a68:	f103 0208 	add.w	r2, r3, #8
 8005a6c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005a70:	f8d4 b000 	ldr.w	fp, [r4]
 8005a74:	f8c8 2000 	str.w	r2, [r8]
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a80:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005a84:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005a88:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8e:	4640      	mov	r0, r8
 8005a90:	4b9c      	ldr	r3, [pc, #624]	; (8005d04 <_printf_float+0x2cc>)
 8005a92:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a94:	f7fa ffc4 	bl	8000a20 <__aeabi_dcmpun>
 8005a98:	bb70      	cbnz	r0, 8005af8 <_printf_float+0xc0>
 8005a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9e:	4640      	mov	r0, r8
 8005aa0:	4b98      	ldr	r3, [pc, #608]	; (8005d04 <_printf_float+0x2cc>)
 8005aa2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005aa4:	f7fa ff9e 	bl	80009e4 <__aeabi_dcmple>
 8005aa8:	bb30      	cbnz	r0, 8005af8 <_printf_float+0xc0>
 8005aaa:	2200      	movs	r2, #0
 8005aac:	2300      	movs	r3, #0
 8005aae:	4640      	mov	r0, r8
 8005ab0:	4651      	mov	r1, sl
 8005ab2:	f7fa ff8d 	bl	80009d0 <__aeabi_dcmplt>
 8005ab6:	b110      	cbz	r0, 8005abe <_printf_float+0x86>
 8005ab8:	232d      	movs	r3, #45	; 0x2d
 8005aba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005abe:	4b92      	ldr	r3, [pc, #584]	; (8005d08 <_printf_float+0x2d0>)
 8005ac0:	4892      	ldr	r0, [pc, #584]	; (8005d0c <_printf_float+0x2d4>)
 8005ac2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005ac6:	bf94      	ite	ls
 8005ac8:	4698      	movls	r8, r3
 8005aca:	4680      	movhi	r8, r0
 8005acc:	2303      	movs	r3, #3
 8005ace:	f04f 0a00 	mov.w	sl, #0
 8005ad2:	6123      	str	r3, [r4, #16]
 8005ad4:	f02b 0304 	bic.w	r3, fp, #4
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	4633      	mov	r3, r6
 8005adc:	4621      	mov	r1, r4
 8005ade:	4628      	mov	r0, r5
 8005ae0:	9700      	str	r7, [sp, #0]
 8005ae2:	aa0f      	add	r2, sp, #60	; 0x3c
 8005ae4:	f000 f9d4 	bl	8005e90 <_printf_common>
 8005ae8:	3001      	adds	r0, #1
 8005aea:	f040 8090 	bne.w	8005c0e <_printf_float+0x1d6>
 8005aee:	f04f 30ff 	mov.w	r0, #4294967295
 8005af2:	b011      	add	sp, #68	; 0x44
 8005af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af8:	4642      	mov	r2, r8
 8005afa:	4653      	mov	r3, sl
 8005afc:	4640      	mov	r0, r8
 8005afe:	4651      	mov	r1, sl
 8005b00:	f7fa ff8e 	bl	8000a20 <__aeabi_dcmpun>
 8005b04:	b148      	cbz	r0, 8005b1a <_printf_float+0xe2>
 8005b06:	f1ba 0f00 	cmp.w	sl, #0
 8005b0a:	bfb8      	it	lt
 8005b0c:	232d      	movlt	r3, #45	; 0x2d
 8005b0e:	4880      	ldr	r0, [pc, #512]	; (8005d10 <_printf_float+0x2d8>)
 8005b10:	bfb8      	it	lt
 8005b12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b16:	4b7f      	ldr	r3, [pc, #508]	; (8005d14 <_printf_float+0x2dc>)
 8005b18:	e7d3      	b.n	8005ac2 <_printf_float+0x8a>
 8005b1a:	6863      	ldr	r3, [r4, #4]
 8005b1c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	d142      	bne.n	8005baa <_printf_float+0x172>
 8005b24:	2306      	movs	r3, #6
 8005b26:	6063      	str	r3, [r4, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	9206      	str	r2, [sp, #24]
 8005b2c:	aa0e      	add	r2, sp, #56	; 0x38
 8005b2e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005b32:	aa0d      	add	r2, sp, #52	; 0x34
 8005b34:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005b38:	9203      	str	r2, [sp, #12]
 8005b3a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005b3e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005b42:	6023      	str	r3, [r4, #0]
 8005b44:	6863      	ldr	r3, [r4, #4]
 8005b46:	4642      	mov	r2, r8
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	4653      	mov	r3, sl
 8005b4e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005b50:	f7ff fed4 	bl	80058fc <__cvt>
 8005b54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b56:	4680      	mov	r8, r0
 8005b58:	2947      	cmp	r1, #71	; 0x47
 8005b5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b5c:	d108      	bne.n	8005b70 <_printf_float+0x138>
 8005b5e:	1cc8      	adds	r0, r1, #3
 8005b60:	db02      	blt.n	8005b68 <_printf_float+0x130>
 8005b62:	6863      	ldr	r3, [r4, #4]
 8005b64:	4299      	cmp	r1, r3
 8005b66:	dd40      	ble.n	8005bea <_printf_float+0x1b2>
 8005b68:	f1a9 0902 	sub.w	r9, r9, #2
 8005b6c:	fa5f f989 	uxtb.w	r9, r9
 8005b70:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005b74:	d81f      	bhi.n	8005bb6 <_printf_float+0x17e>
 8005b76:	464a      	mov	r2, r9
 8005b78:	3901      	subs	r1, #1
 8005b7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b7e:	910d      	str	r1, [sp, #52]	; 0x34
 8005b80:	f7ff ff1b 	bl	80059ba <__exponent>
 8005b84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b86:	4682      	mov	sl, r0
 8005b88:	1813      	adds	r3, r2, r0
 8005b8a:	2a01      	cmp	r2, #1
 8005b8c:	6123      	str	r3, [r4, #16]
 8005b8e:	dc02      	bgt.n	8005b96 <_printf_float+0x15e>
 8005b90:	6822      	ldr	r2, [r4, #0]
 8005b92:	07d2      	lsls	r2, r2, #31
 8005b94:	d501      	bpl.n	8005b9a <_printf_float+0x162>
 8005b96:	3301      	adds	r3, #1
 8005b98:	6123      	str	r3, [r4, #16]
 8005b9a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d09b      	beq.n	8005ada <_printf_float+0xa2>
 8005ba2:	232d      	movs	r3, #45	; 0x2d
 8005ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba8:	e797      	b.n	8005ada <_printf_float+0xa2>
 8005baa:	2947      	cmp	r1, #71	; 0x47
 8005bac:	d1bc      	bne.n	8005b28 <_printf_float+0xf0>
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1ba      	bne.n	8005b28 <_printf_float+0xf0>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e7b7      	b.n	8005b26 <_printf_float+0xee>
 8005bb6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005bba:	d118      	bne.n	8005bee <_printf_float+0x1b6>
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	6863      	ldr	r3, [r4, #4]
 8005bc0:	dd0b      	ble.n	8005bda <_printf_float+0x1a2>
 8005bc2:	6121      	str	r1, [r4, #16]
 8005bc4:	b913      	cbnz	r3, 8005bcc <_printf_float+0x194>
 8005bc6:	6822      	ldr	r2, [r4, #0]
 8005bc8:	07d0      	lsls	r0, r2, #31
 8005bca:	d502      	bpl.n	8005bd2 <_printf_float+0x19a>
 8005bcc:	3301      	adds	r3, #1
 8005bce:	440b      	add	r3, r1
 8005bd0:	6123      	str	r3, [r4, #16]
 8005bd2:	f04f 0a00 	mov.w	sl, #0
 8005bd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8005bd8:	e7df      	b.n	8005b9a <_printf_float+0x162>
 8005bda:	b913      	cbnz	r3, 8005be2 <_printf_float+0x1aa>
 8005bdc:	6822      	ldr	r2, [r4, #0]
 8005bde:	07d2      	lsls	r2, r2, #31
 8005be0:	d501      	bpl.n	8005be6 <_printf_float+0x1ae>
 8005be2:	3302      	adds	r3, #2
 8005be4:	e7f4      	b.n	8005bd0 <_printf_float+0x198>
 8005be6:	2301      	movs	r3, #1
 8005be8:	e7f2      	b.n	8005bd0 <_printf_float+0x198>
 8005bea:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005bee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bf0:	4299      	cmp	r1, r3
 8005bf2:	db05      	blt.n	8005c00 <_printf_float+0x1c8>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	6121      	str	r1, [r4, #16]
 8005bf8:	07d8      	lsls	r0, r3, #31
 8005bfa:	d5ea      	bpl.n	8005bd2 <_printf_float+0x19a>
 8005bfc:	1c4b      	adds	r3, r1, #1
 8005bfe:	e7e7      	b.n	8005bd0 <_printf_float+0x198>
 8005c00:	2900      	cmp	r1, #0
 8005c02:	bfcc      	ite	gt
 8005c04:	2201      	movgt	r2, #1
 8005c06:	f1c1 0202 	rsble	r2, r1, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	e7e0      	b.n	8005bd0 <_printf_float+0x198>
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	055a      	lsls	r2, r3, #21
 8005c12:	d407      	bmi.n	8005c24 <_printf_float+0x1ec>
 8005c14:	6923      	ldr	r3, [r4, #16]
 8005c16:	4642      	mov	r2, r8
 8005c18:	4631      	mov	r1, r6
 8005c1a:	4628      	mov	r0, r5
 8005c1c:	47b8      	blx	r7
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d12b      	bne.n	8005c7a <_printf_float+0x242>
 8005c22:	e764      	b.n	8005aee <_printf_float+0xb6>
 8005c24:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005c28:	f240 80dd 	bls.w	8005de6 <_printf_float+0x3ae>
 8005c2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c30:	2200      	movs	r2, #0
 8005c32:	2300      	movs	r3, #0
 8005c34:	f7fa fec2 	bl	80009bc <__aeabi_dcmpeq>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	d033      	beq.n	8005ca4 <_printf_float+0x26c>
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	4631      	mov	r1, r6
 8005c40:	4628      	mov	r0, r5
 8005c42:	4a35      	ldr	r2, [pc, #212]	; (8005d18 <_printf_float+0x2e0>)
 8005c44:	47b8      	blx	r7
 8005c46:	3001      	adds	r0, #1
 8005c48:	f43f af51 	beq.w	8005aee <_printf_float+0xb6>
 8005c4c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005c50:	429a      	cmp	r2, r3
 8005c52:	db02      	blt.n	8005c5a <_printf_float+0x222>
 8005c54:	6823      	ldr	r3, [r4, #0]
 8005c56:	07d8      	lsls	r0, r3, #31
 8005c58:	d50f      	bpl.n	8005c7a <_printf_float+0x242>
 8005c5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c5e:	4631      	mov	r1, r6
 8005c60:	4628      	mov	r0, r5
 8005c62:	47b8      	blx	r7
 8005c64:	3001      	adds	r0, #1
 8005c66:	f43f af42 	beq.w	8005aee <_printf_float+0xb6>
 8005c6a:	f04f 0800 	mov.w	r8, #0
 8005c6e:	f104 091a 	add.w	r9, r4, #26
 8005c72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c74:	3b01      	subs	r3, #1
 8005c76:	4543      	cmp	r3, r8
 8005c78:	dc09      	bgt.n	8005c8e <_printf_float+0x256>
 8005c7a:	6823      	ldr	r3, [r4, #0]
 8005c7c:	079b      	lsls	r3, r3, #30
 8005c7e:	f100 8102 	bmi.w	8005e86 <_printf_float+0x44e>
 8005c82:	68e0      	ldr	r0, [r4, #12]
 8005c84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c86:	4298      	cmp	r0, r3
 8005c88:	bfb8      	it	lt
 8005c8a:	4618      	movlt	r0, r3
 8005c8c:	e731      	b.n	8005af2 <_printf_float+0xba>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	464a      	mov	r2, r9
 8005c92:	4631      	mov	r1, r6
 8005c94:	4628      	mov	r0, r5
 8005c96:	47b8      	blx	r7
 8005c98:	3001      	adds	r0, #1
 8005c9a:	f43f af28 	beq.w	8005aee <_printf_float+0xb6>
 8005c9e:	f108 0801 	add.w	r8, r8, #1
 8005ca2:	e7e6      	b.n	8005c72 <_printf_float+0x23a>
 8005ca4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	dc38      	bgt.n	8005d1c <_printf_float+0x2e4>
 8005caa:	2301      	movs	r3, #1
 8005cac:	4631      	mov	r1, r6
 8005cae:	4628      	mov	r0, r5
 8005cb0:	4a19      	ldr	r2, [pc, #100]	; (8005d18 <_printf_float+0x2e0>)
 8005cb2:	47b8      	blx	r7
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	f43f af1a 	beq.w	8005aee <_printf_float+0xb6>
 8005cba:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	d102      	bne.n	8005cc8 <_printf_float+0x290>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	07d9      	lsls	r1, r3, #31
 8005cc6:	d5d8      	bpl.n	8005c7a <_printf_float+0x242>
 8005cc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ccc:	4631      	mov	r1, r6
 8005cce:	4628      	mov	r0, r5
 8005cd0:	47b8      	blx	r7
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	f43f af0b 	beq.w	8005aee <_printf_float+0xb6>
 8005cd8:	f04f 0900 	mov.w	r9, #0
 8005cdc:	f104 0a1a 	add.w	sl, r4, #26
 8005ce0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ce2:	425b      	negs	r3, r3
 8005ce4:	454b      	cmp	r3, r9
 8005ce6:	dc01      	bgt.n	8005cec <_printf_float+0x2b4>
 8005ce8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cea:	e794      	b.n	8005c16 <_printf_float+0x1de>
 8005cec:	2301      	movs	r3, #1
 8005cee:	4652      	mov	r2, sl
 8005cf0:	4631      	mov	r1, r6
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	47b8      	blx	r7
 8005cf6:	3001      	adds	r0, #1
 8005cf8:	f43f aef9 	beq.w	8005aee <_printf_float+0xb6>
 8005cfc:	f109 0901 	add.w	r9, r9, #1
 8005d00:	e7ee      	b.n	8005ce0 <_printf_float+0x2a8>
 8005d02:	bf00      	nop
 8005d04:	7fefffff 	.word	0x7fefffff
 8005d08:	0800877c 	.word	0x0800877c
 8005d0c:	08008780 	.word	0x08008780
 8005d10:	08008788 	.word	0x08008788
 8005d14:	08008784 	.word	0x08008784
 8005d18:	0800878c 	.word	0x0800878c
 8005d1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d20:	429a      	cmp	r2, r3
 8005d22:	bfa8      	it	ge
 8005d24:	461a      	movge	r2, r3
 8005d26:	2a00      	cmp	r2, #0
 8005d28:	4691      	mov	r9, r2
 8005d2a:	dc37      	bgt.n	8005d9c <_printf_float+0x364>
 8005d2c:	f04f 0b00 	mov.w	fp, #0
 8005d30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d34:	f104 021a 	add.w	r2, r4, #26
 8005d38:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005d3c:	ebaa 0309 	sub.w	r3, sl, r9
 8005d40:	455b      	cmp	r3, fp
 8005d42:	dc33      	bgt.n	8005dac <_printf_float+0x374>
 8005d44:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	db3b      	blt.n	8005dc4 <_printf_float+0x38c>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	07da      	lsls	r2, r3, #31
 8005d50:	d438      	bmi.n	8005dc4 <_printf_float+0x38c>
 8005d52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d54:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005d56:	eba3 020a 	sub.w	r2, r3, sl
 8005d5a:	eba3 0901 	sub.w	r9, r3, r1
 8005d5e:	4591      	cmp	r9, r2
 8005d60:	bfa8      	it	ge
 8005d62:	4691      	movge	r9, r2
 8005d64:	f1b9 0f00 	cmp.w	r9, #0
 8005d68:	dc34      	bgt.n	8005dd4 <_printf_float+0x39c>
 8005d6a:	f04f 0800 	mov.w	r8, #0
 8005d6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d72:	f104 0a1a 	add.w	sl, r4, #26
 8005d76:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005d7a:	1a9b      	subs	r3, r3, r2
 8005d7c:	eba3 0309 	sub.w	r3, r3, r9
 8005d80:	4543      	cmp	r3, r8
 8005d82:	f77f af7a 	ble.w	8005c7a <_printf_float+0x242>
 8005d86:	2301      	movs	r3, #1
 8005d88:	4652      	mov	r2, sl
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	47b8      	blx	r7
 8005d90:	3001      	adds	r0, #1
 8005d92:	f43f aeac 	beq.w	8005aee <_printf_float+0xb6>
 8005d96:	f108 0801 	add.w	r8, r8, #1
 8005d9a:	e7ec      	b.n	8005d76 <_printf_float+0x33e>
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	4631      	mov	r1, r6
 8005da0:	4642      	mov	r2, r8
 8005da2:	4628      	mov	r0, r5
 8005da4:	47b8      	blx	r7
 8005da6:	3001      	adds	r0, #1
 8005da8:	d1c0      	bne.n	8005d2c <_printf_float+0x2f4>
 8005daa:	e6a0      	b.n	8005aee <_printf_float+0xb6>
 8005dac:	2301      	movs	r3, #1
 8005dae:	4631      	mov	r1, r6
 8005db0:	4628      	mov	r0, r5
 8005db2:	920b      	str	r2, [sp, #44]	; 0x2c
 8005db4:	47b8      	blx	r7
 8005db6:	3001      	adds	r0, #1
 8005db8:	f43f ae99 	beq.w	8005aee <_printf_float+0xb6>
 8005dbc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005dbe:	f10b 0b01 	add.w	fp, fp, #1
 8005dc2:	e7b9      	b.n	8005d38 <_printf_float+0x300>
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dca:	4628      	mov	r0, r5
 8005dcc:	47b8      	blx	r7
 8005dce:	3001      	adds	r0, #1
 8005dd0:	d1bf      	bne.n	8005d52 <_printf_float+0x31a>
 8005dd2:	e68c      	b.n	8005aee <_printf_float+0xb6>
 8005dd4:	464b      	mov	r3, r9
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	4628      	mov	r0, r5
 8005dda:	eb08 020a 	add.w	r2, r8, sl
 8005dde:	47b8      	blx	r7
 8005de0:	3001      	adds	r0, #1
 8005de2:	d1c2      	bne.n	8005d6a <_printf_float+0x332>
 8005de4:	e683      	b.n	8005aee <_printf_float+0xb6>
 8005de6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005de8:	2a01      	cmp	r2, #1
 8005dea:	dc01      	bgt.n	8005df0 <_printf_float+0x3b8>
 8005dec:	07db      	lsls	r3, r3, #31
 8005dee:	d537      	bpl.n	8005e60 <_printf_float+0x428>
 8005df0:	2301      	movs	r3, #1
 8005df2:	4642      	mov	r2, r8
 8005df4:	4631      	mov	r1, r6
 8005df6:	4628      	mov	r0, r5
 8005df8:	47b8      	blx	r7
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	f43f ae77 	beq.w	8005aee <_printf_float+0xb6>
 8005e00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e04:	4631      	mov	r1, r6
 8005e06:	4628      	mov	r0, r5
 8005e08:	47b8      	blx	r7
 8005e0a:	3001      	adds	r0, #1
 8005e0c:	f43f ae6f 	beq.w	8005aee <_printf_float+0xb6>
 8005e10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e14:	2200      	movs	r2, #0
 8005e16:	2300      	movs	r3, #0
 8005e18:	f7fa fdd0 	bl	80009bc <__aeabi_dcmpeq>
 8005e1c:	b9d8      	cbnz	r0, 8005e56 <_printf_float+0x41e>
 8005e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e20:	f108 0201 	add.w	r2, r8, #1
 8005e24:	3b01      	subs	r3, #1
 8005e26:	4631      	mov	r1, r6
 8005e28:	4628      	mov	r0, r5
 8005e2a:	47b8      	blx	r7
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d10e      	bne.n	8005e4e <_printf_float+0x416>
 8005e30:	e65d      	b.n	8005aee <_printf_float+0xb6>
 8005e32:	2301      	movs	r3, #1
 8005e34:	464a      	mov	r2, r9
 8005e36:	4631      	mov	r1, r6
 8005e38:	4628      	mov	r0, r5
 8005e3a:	47b8      	blx	r7
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	f43f ae56 	beq.w	8005aee <_printf_float+0xb6>
 8005e42:	f108 0801 	add.w	r8, r8, #1
 8005e46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	4543      	cmp	r3, r8
 8005e4c:	dcf1      	bgt.n	8005e32 <_printf_float+0x3fa>
 8005e4e:	4653      	mov	r3, sl
 8005e50:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e54:	e6e0      	b.n	8005c18 <_printf_float+0x1e0>
 8005e56:	f04f 0800 	mov.w	r8, #0
 8005e5a:	f104 091a 	add.w	r9, r4, #26
 8005e5e:	e7f2      	b.n	8005e46 <_printf_float+0x40e>
 8005e60:	2301      	movs	r3, #1
 8005e62:	4642      	mov	r2, r8
 8005e64:	e7df      	b.n	8005e26 <_printf_float+0x3ee>
 8005e66:	2301      	movs	r3, #1
 8005e68:	464a      	mov	r2, r9
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	47b8      	blx	r7
 8005e70:	3001      	adds	r0, #1
 8005e72:	f43f ae3c 	beq.w	8005aee <_printf_float+0xb6>
 8005e76:	f108 0801 	add.w	r8, r8, #1
 8005e7a:	68e3      	ldr	r3, [r4, #12]
 8005e7c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005e7e:	1a5b      	subs	r3, r3, r1
 8005e80:	4543      	cmp	r3, r8
 8005e82:	dcf0      	bgt.n	8005e66 <_printf_float+0x42e>
 8005e84:	e6fd      	b.n	8005c82 <_printf_float+0x24a>
 8005e86:	f04f 0800 	mov.w	r8, #0
 8005e8a:	f104 0919 	add.w	r9, r4, #25
 8005e8e:	e7f4      	b.n	8005e7a <_printf_float+0x442>

08005e90 <_printf_common>:
 8005e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e94:	4616      	mov	r6, r2
 8005e96:	4699      	mov	r9, r3
 8005e98:	688a      	ldr	r2, [r1, #8]
 8005e9a:	690b      	ldr	r3, [r1, #16]
 8005e9c:	4607      	mov	r7, r0
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	bfb8      	it	lt
 8005ea2:	4613      	movlt	r3, r2
 8005ea4:	6033      	str	r3, [r6, #0]
 8005ea6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005eaa:	460c      	mov	r4, r1
 8005eac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005eb0:	b10a      	cbz	r2, 8005eb6 <_printf_common+0x26>
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	6033      	str	r3, [r6, #0]
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	0699      	lsls	r1, r3, #26
 8005eba:	bf42      	ittt	mi
 8005ebc:	6833      	ldrmi	r3, [r6, #0]
 8005ebe:	3302      	addmi	r3, #2
 8005ec0:	6033      	strmi	r3, [r6, #0]
 8005ec2:	6825      	ldr	r5, [r4, #0]
 8005ec4:	f015 0506 	ands.w	r5, r5, #6
 8005ec8:	d106      	bne.n	8005ed8 <_printf_common+0x48>
 8005eca:	f104 0a19 	add.w	sl, r4, #25
 8005ece:	68e3      	ldr	r3, [r4, #12]
 8005ed0:	6832      	ldr	r2, [r6, #0]
 8005ed2:	1a9b      	subs	r3, r3, r2
 8005ed4:	42ab      	cmp	r3, r5
 8005ed6:	dc28      	bgt.n	8005f2a <_printf_common+0x9a>
 8005ed8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005edc:	1e13      	subs	r3, r2, #0
 8005ede:	6822      	ldr	r2, [r4, #0]
 8005ee0:	bf18      	it	ne
 8005ee2:	2301      	movne	r3, #1
 8005ee4:	0692      	lsls	r2, r2, #26
 8005ee6:	d42d      	bmi.n	8005f44 <_printf_common+0xb4>
 8005ee8:	4649      	mov	r1, r9
 8005eea:	4638      	mov	r0, r7
 8005eec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ef0:	47c0      	blx	r8
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d020      	beq.n	8005f38 <_printf_common+0xa8>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	68e5      	ldr	r5, [r4, #12]
 8005efa:	f003 0306 	and.w	r3, r3, #6
 8005efe:	2b04      	cmp	r3, #4
 8005f00:	bf18      	it	ne
 8005f02:	2500      	movne	r5, #0
 8005f04:	6832      	ldr	r2, [r6, #0]
 8005f06:	f04f 0600 	mov.w	r6, #0
 8005f0a:	68a3      	ldr	r3, [r4, #8]
 8005f0c:	bf08      	it	eq
 8005f0e:	1aad      	subeq	r5, r5, r2
 8005f10:	6922      	ldr	r2, [r4, #16]
 8005f12:	bf08      	it	eq
 8005f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	bfc4      	itt	gt
 8005f1c:	1a9b      	subgt	r3, r3, r2
 8005f1e:	18ed      	addgt	r5, r5, r3
 8005f20:	341a      	adds	r4, #26
 8005f22:	42b5      	cmp	r5, r6
 8005f24:	d11a      	bne.n	8005f5c <_printf_common+0xcc>
 8005f26:	2000      	movs	r0, #0
 8005f28:	e008      	b.n	8005f3c <_printf_common+0xac>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	4652      	mov	r2, sl
 8005f2e:	4649      	mov	r1, r9
 8005f30:	4638      	mov	r0, r7
 8005f32:	47c0      	blx	r8
 8005f34:	3001      	adds	r0, #1
 8005f36:	d103      	bne.n	8005f40 <_printf_common+0xb0>
 8005f38:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f40:	3501      	adds	r5, #1
 8005f42:	e7c4      	b.n	8005ece <_printf_common+0x3e>
 8005f44:	2030      	movs	r0, #48	; 0x30
 8005f46:	18e1      	adds	r1, r4, r3
 8005f48:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f52:	4422      	add	r2, r4
 8005f54:	3302      	adds	r3, #2
 8005f56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f5a:	e7c5      	b.n	8005ee8 <_printf_common+0x58>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	4622      	mov	r2, r4
 8005f60:	4649      	mov	r1, r9
 8005f62:	4638      	mov	r0, r7
 8005f64:	47c0      	blx	r8
 8005f66:	3001      	adds	r0, #1
 8005f68:	d0e6      	beq.n	8005f38 <_printf_common+0xa8>
 8005f6a:	3601      	adds	r6, #1
 8005f6c:	e7d9      	b.n	8005f22 <_printf_common+0x92>
	...

08005f70 <_printf_i>:
 8005f70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f74:	7e0f      	ldrb	r7, [r1, #24]
 8005f76:	4691      	mov	r9, r2
 8005f78:	2f78      	cmp	r7, #120	; 0x78
 8005f7a:	4680      	mov	r8, r0
 8005f7c:	460c      	mov	r4, r1
 8005f7e:	469a      	mov	sl, r3
 8005f80:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f86:	d807      	bhi.n	8005f98 <_printf_i+0x28>
 8005f88:	2f62      	cmp	r7, #98	; 0x62
 8005f8a:	d80a      	bhi.n	8005fa2 <_printf_i+0x32>
 8005f8c:	2f00      	cmp	r7, #0
 8005f8e:	f000 80d9 	beq.w	8006144 <_printf_i+0x1d4>
 8005f92:	2f58      	cmp	r7, #88	; 0x58
 8005f94:	f000 80a4 	beq.w	80060e0 <_printf_i+0x170>
 8005f98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fa0:	e03a      	b.n	8006018 <_printf_i+0xa8>
 8005fa2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fa6:	2b15      	cmp	r3, #21
 8005fa8:	d8f6      	bhi.n	8005f98 <_printf_i+0x28>
 8005faa:	a101      	add	r1, pc, #4	; (adr r1, 8005fb0 <_printf_i+0x40>)
 8005fac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fb0:	08006009 	.word	0x08006009
 8005fb4:	0800601d 	.word	0x0800601d
 8005fb8:	08005f99 	.word	0x08005f99
 8005fbc:	08005f99 	.word	0x08005f99
 8005fc0:	08005f99 	.word	0x08005f99
 8005fc4:	08005f99 	.word	0x08005f99
 8005fc8:	0800601d 	.word	0x0800601d
 8005fcc:	08005f99 	.word	0x08005f99
 8005fd0:	08005f99 	.word	0x08005f99
 8005fd4:	08005f99 	.word	0x08005f99
 8005fd8:	08005f99 	.word	0x08005f99
 8005fdc:	0800612b 	.word	0x0800612b
 8005fe0:	0800604d 	.word	0x0800604d
 8005fe4:	0800610d 	.word	0x0800610d
 8005fe8:	08005f99 	.word	0x08005f99
 8005fec:	08005f99 	.word	0x08005f99
 8005ff0:	0800614d 	.word	0x0800614d
 8005ff4:	08005f99 	.word	0x08005f99
 8005ff8:	0800604d 	.word	0x0800604d
 8005ffc:	08005f99 	.word	0x08005f99
 8006000:	08005f99 	.word	0x08005f99
 8006004:	08006115 	.word	0x08006115
 8006008:	682b      	ldr	r3, [r5, #0]
 800600a:	1d1a      	adds	r2, r3, #4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	602a      	str	r2, [r5, #0]
 8006010:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006014:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006018:	2301      	movs	r3, #1
 800601a:	e0a4      	b.n	8006166 <_printf_i+0x1f6>
 800601c:	6820      	ldr	r0, [r4, #0]
 800601e:	6829      	ldr	r1, [r5, #0]
 8006020:	0606      	lsls	r6, r0, #24
 8006022:	f101 0304 	add.w	r3, r1, #4
 8006026:	d50a      	bpl.n	800603e <_printf_i+0xce>
 8006028:	680e      	ldr	r6, [r1, #0]
 800602a:	602b      	str	r3, [r5, #0]
 800602c:	2e00      	cmp	r6, #0
 800602e:	da03      	bge.n	8006038 <_printf_i+0xc8>
 8006030:	232d      	movs	r3, #45	; 0x2d
 8006032:	4276      	negs	r6, r6
 8006034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006038:	230a      	movs	r3, #10
 800603a:	485e      	ldr	r0, [pc, #376]	; (80061b4 <_printf_i+0x244>)
 800603c:	e019      	b.n	8006072 <_printf_i+0x102>
 800603e:	680e      	ldr	r6, [r1, #0]
 8006040:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006044:	602b      	str	r3, [r5, #0]
 8006046:	bf18      	it	ne
 8006048:	b236      	sxthne	r6, r6
 800604a:	e7ef      	b.n	800602c <_printf_i+0xbc>
 800604c:	682b      	ldr	r3, [r5, #0]
 800604e:	6820      	ldr	r0, [r4, #0]
 8006050:	1d19      	adds	r1, r3, #4
 8006052:	6029      	str	r1, [r5, #0]
 8006054:	0601      	lsls	r1, r0, #24
 8006056:	d501      	bpl.n	800605c <_printf_i+0xec>
 8006058:	681e      	ldr	r6, [r3, #0]
 800605a:	e002      	b.n	8006062 <_printf_i+0xf2>
 800605c:	0646      	lsls	r6, r0, #25
 800605e:	d5fb      	bpl.n	8006058 <_printf_i+0xe8>
 8006060:	881e      	ldrh	r6, [r3, #0]
 8006062:	2f6f      	cmp	r7, #111	; 0x6f
 8006064:	bf0c      	ite	eq
 8006066:	2308      	moveq	r3, #8
 8006068:	230a      	movne	r3, #10
 800606a:	4852      	ldr	r0, [pc, #328]	; (80061b4 <_printf_i+0x244>)
 800606c:	2100      	movs	r1, #0
 800606e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006072:	6865      	ldr	r5, [r4, #4]
 8006074:	2d00      	cmp	r5, #0
 8006076:	bfa8      	it	ge
 8006078:	6821      	ldrge	r1, [r4, #0]
 800607a:	60a5      	str	r5, [r4, #8]
 800607c:	bfa4      	itt	ge
 800607e:	f021 0104 	bicge.w	r1, r1, #4
 8006082:	6021      	strge	r1, [r4, #0]
 8006084:	b90e      	cbnz	r6, 800608a <_printf_i+0x11a>
 8006086:	2d00      	cmp	r5, #0
 8006088:	d04d      	beq.n	8006126 <_printf_i+0x1b6>
 800608a:	4615      	mov	r5, r2
 800608c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006090:	fb03 6711 	mls	r7, r3, r1, r6
 8006094:	5dc7      	ldrb	r7, [r0, r7]
 8006096:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800609a:	4637      	mov	r7, r6
 800609c:	42bb      	cmp	r3, r7
 800609e:	460e      	mov	r6, r1
 80060a0:	d9f4      	bls.n	800608c <_printf_i+0x11c>
 80060a2:	2b08      	cmp	r3, #8
 80060a4:	d10b      	bne.n	80060be <_printf_i+0x14e>
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	07de      	lsls	r6, r3, #31
 80060aa:	d508      	bpl.n	80060be <_printf_i+0x14e>
 80060ac:	6923      	ldr	r3, [r4, #16]
 80060ae:	6861      	ldr	r1, [r4, #4]
 80060b0:	4299      	cmp	r1, r3
 80060b2:	bfde      	ittt	le
 80060b4:	2330      	movle	r3, #48	; 0x30
 80060b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060be:	1b52      	subs	r2, r2, r5
 80060c0:	6122      	str	r2, [r4, #16]
 80060c2:	464b      	mov	r3, r9
 80060c4:	4621      	mov	r1, r4
 80060c6:	4640      	mov	r0, r8
 80060c8:	f8cd a000 	str.w	sl, [sp]
 80060cc:	aa03      	add	r2, sp, #12
 80060ce:	f7ff fedf 	bl	8005e90 <_printf_common>
 80060d2:	3001      	adds	r0, #1
 80060d4:	d14c      	bne.n	8006170 <_printf_i+0x200>
 80060d6:	f04f 30ff 	mov.w	r0, #4294967295
 80060da:	b004      	add	sp, #16
 80060dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e0:	4834      	ldr	r0, [pc, #208]	; (80061b4 <_printf_i+0x244>)
 80060e2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80060e6:	6829      	ldr	r1, [r5, #0]
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80060ee:	6029      	str	r1, [r5, #0]
 80060f0:	061d      	lsls	r5, r3, #24
 80060f2:	d514      	bpl.n	800611e <_printf_i+0x1ae>
 80060f4:	07df      	lsls	r7, r3, #31
 80060f6:	bf44      	itt	mi
 80060f8:	f043 0320 	orrmi.w	r3, r3, #32
 80060fc:	6023      	strmi	r3, [r4, #0]
 80060fe:	b91e      	cbnz	r6, 8006108 <_printf_i+0x198>
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	f023 0320 	bic.w	r3, r3, #32
 8006106:	6023      	str	r3, [r4, #0]
 8006108:	2310      	movs	r3, #16
 800610a:	e7af      	b.n	800606c <_printf_i+0xfc>
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	f043 0320 	orr.w	r3, r3, #32
 8006112:	6023      	str	r3, [r4, #0]
 8006114:	2378      	movs	r3, #120	; 0x78
 8006116:	4828      	ldr	r0, [pc, #160]	; (80061b8 <_printf_i+0x248>)
 8006118:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800611c:	e7e3      	b.n	80060e6 <_printf_i+0x176>
 800611e:	0659      	lsls	r1, r3, #25
 8006120:	bf48      	it	mi
 8006122:	b2b6      	uxthmi	r6, r6
 8006124:	e7e6      	b.n	80060f4 <_printf_i+0x184>
 8006126:	4615      	mov	r5, r2
 8006128:	e7bb      	b.n	80060a2 <_printf_i+0x132>
 800612a:	682b      	ldr	r3, [r5, #0]
 800612c:	6826      	ldr	r6, [r4, #0]
 800612e:	1d18      	adds	r0, r3, #4
 8006130:	6961      	ldr	r1, [r4, #20]
 8006132:	6028      	str	r0, [r5, #0]
 8006134:	0635      	lsls	r5, r6, #24
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	d501      	bpl.n	800613e <_printf_i+0x1ce>
 800613a:	6019      	str	r1, [r3, #0]
 800613c:	e002      	b.n	8006144 <_printf_i+0x1d4>
 800613e:	0670      	lsls	r0, r6, #25
 8006140:	d5fb      	bpl.n	800613a <_printf_i+0x1ca>
 8006142:	8019      	strh	r1, [r3, #0]
 8006144:	2300      	movs	r3, #0
 8006146:	4615      	mov	r5, r2
 8006148:	6123      	str	r3, [r4, #16]
 800614a:	e7ba      	b.n	80060c2 <_printf_i+0x152>
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	2100      	movs	r1, #0
 8006150:	1d1a      	adds	r2, r3, #4
 8006152:	602a      	str	r2, [r5, #0]
 8006154:	681d      	ldr	r5, [r3, #0]
 8006156:	6862      	ldr	r2, [r4, #4]
 8006158:	4628      	mov	r0, r5
 800615a:	f000 fef7 	bl	8006f4c <memchr>
 800615e:	b108      	cbz	r0, 8006164 <_printf_i+0x1f4>
 8006160:	1b40      	subs	r0, r0, r5
 8006162:	6060      	str	r0, [r4, #4]
 8006164:	6863      	ldr	r3, [r4, #4]
 8006166:	6123      	str	r3, [r4, #16]
 8006168:	2300      	movs	r3, #0
 800616a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800616e:	e7a8      	b.n	80060c2 <_printf_i+0x152>
 8006170:	462a      	mov	r2, r5
 8006172:	4649      	mov	r1, r9
 8006174:	4640      	mov	r0, r8
 8006176:	6923      	ldr	r3, [r4, #16]
 8006178:	47d0      	blx	sl
 800617a:	3001      	adds	r0, #1
 800617c:	d0ab      	beq.n	80060d6 <_printf_i+0x166>
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	079b      	lsls	r3, r3, #30
 8006182:	d413      	bmi.n	80061ac <_printf_i+0x23c>
 8006184:	68e0      	ldr	r0, [r4, #12]
 8006186:	9b03      	ldr	r3, [sp, #12]
 8006188:	4298      	cmp	r0, r3
 800618a:	bfb8      	it	lt
 800618c:	4618      	movlt	r0, r3
 800618e:	e7a4      	b.n	80060da <_printf_i+0x16a>
 8006190:	2301      	movs	r3, #1
 8006192:	4632      	mov	r2, r6
 8006194:	4649      	mov	r1, r9
 8006196:	4640      	mov	r0, r8
 8006198:	47d0      	blx	sl
 800619a:	3001      	adds	r0, #1
 800619c:	d09b      	beq.n	80060d6 <_printf_i+0x166>
 800619e:	3501      	adds	r5, #1
 80061a0:	68e3      	ldr	r3, [r4, #12]
 80061a2:	9903      	ldr	r1, [sp, #12]
 80061a4:	1a5b      	subs	r3, r3, r1
 80061a6:	42ab      	cmp	r3, r5
 80061a8:	dcf2      	bgt.n	8006190 <_printf_i+0x220>
 80061aa:	e7eb      	b.n	8006184 <_printf_i+0x214>
 80061ac:	2500      	movs	r5, #0
 80061ae:	f104 0619 	add.w	r6, r4, #25
 80061b2:	e7f5      	b.n	80061a0 <_printf_i+0x230>
 80061b4:	0800878e 	.word	0x0800878e
 80061b8:	0800879f 	.word	0x0800879f

080061bc <siprintf>:
 80061bc:	b40e      	push	{r1, r2, r3}
 80061be:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061c2:	b500      	push	{lr}
 80061c4:	b09c      	sub	sp, #112	; 0x70
 80061c6:	ab1d      	add	r3, sp, #116	; 0x74
 80061c8:	9002      	str	r0, [sp, #8]
 80061ca:	9006      	str	r0, [sp, #24]
 80061cc:	9107      	str	r1, [sp, #28]
 80061ce:	9104      	str	r1, [sp, #16]
 80061d0:	4808      	ldr	r0, [pc, #32]	; (80061f4 <siprintf+0x38>)
 80061d2:	4909      	ldr	r1, [pc, #36]	; (80061f8 <siprintf+0x3c>)
 80061d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80061d8:	9105      	str	r1, [sp, #20]
 80061da:	6800      	ldr	r0, [r0, #0]
 80061dc:	a902      	add	r1, sp, #8
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	f001 fb9e 	bl	8007920 <_svfiprintf_r>
 80061e4:	2200      	movs	r2, #0
 80061e6:	9b02      	ldr	r3, [sp, #8]
 80061e8:	701a      	strb	r2, [r3, #0]
 80061ea:	b01c      	add	sp, #112	; 0x70
 80061ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80061f0:	b003      	add	sp, #12
 80061f2:	4770      	bx	lr
 80061f4:	2000002c 	.word	0x2000002c
 80061f8:	ffff0208 	.word	0xffff0208

080061fc <strcat>:
 80061fc:	4602      	mov	r2, r0
 80061fe:	b510      	push	{r4, lr}
 8006200:	7814      	ldrb	r4, [r2, #0]
 8006202:	4613      	mov	r3, r2
 8006204:	3201      	adds	r2, #1
 8006206:	2c00      	cmp	r4, #0
 8006208:	d1fa      	bne.n	8006200 <strcat+0x4>
 800620a:	3b01      	subs	r3, #1
 800620c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006210:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006214:	2a00      	cmp	r2, #0
 8006216:	d1f9      	bne.n	800620c <strcat+0x10>
 8006218:	bd10      	pop	{r4, pc}

0800621a <strncpy>:
 800621a:	4603      	mov	r3, r0
 800621c:	b510      	push	{r4, lr}
 800621e:	3901      	subs	r1, #1
 8006220:	b132      	cbz	r2, 8006230 <strncpy+0x16>
 8006222:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006226:	3a01      	subs	r2, #1
 8006228:	f803 4b01 	strb.w	r4, [r3], #1
 800622c:	2c00      	cmp	r4, #0
 800622e:	d1f7      	bne.n	8006220 <strncpy+0x6>
 8006230:	2100      	movs	r1, #0
 8006232:	441a      	add	r2, r3
 8006234:	4293      	cmp	r3, r2
 8006236:	d100      	bne.n	800623a <strncpy+0x20>
 8006238:	bd10      	pop	{r4, pc}
 800623a:	f803 1b01 	strb.w	r1, [r3], #1
 800623e:	e7f9      	b.n	8006234 <strncpy+0x1a>

08006240 <quorem>:
 8006240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006244:	6903      	ldr	r3, [r0, #16]
 8006246:	690c      	ldr	r4, [r1, #16]
 8006248:	4607      	mov	r7, r0
 800624a:	42a3      	cmp	r3, r4
 800624c:	f2c0 8082 	blt.w	8006354 <quorem+0x114>
 8006250:	3c01      	subs	r4, #1
 8006252:	f100 0514 	add.w	r5, r0, #20
 8006256:	f101 0814 	add.w	r8, r1, #20
 800625a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800625e:	9301      	str	r3, [sp, #4]
 8006260:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006264:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006268:	3301      	adds	r3, #1
 800626a:	429a      	cmp	r2, r3
 800626c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006270:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006274:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006278:	d331      	bcc.n	80062de <quorem+0x9e>
 800627a:	f04f 0e00 	mov.w	lr, #0
 800627e:	4640      	mov	r0, r8
 8006280:	46ac      	mov	ip, r5
 8006282:	46f2      	mov	sl, lr
 8006284:	f850 2b04 	ldr.w	r2, [r0], #4
 8006288:	b293      	uxth	r3, r2
 800628a:	fb06 e303 	mla	r3, r6, r3, lr
 800628e:	0c12      	lsrs	r2, r2, #16
 8006290:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006294:	b29b      	uxth	r3, r3
 8006296:	fb06 e202 	mla	r2, r6, r2, lr
 800629a:	ebaa 0303 	sub.w	r3, sl, r3
 800629e:	f8dc a000 	ldr.w	sl, [ip]
 80062a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80062a6:	fa1f fa8a 	uxth.w	sl, sl
 80062aa:	4453      	add	r3, sl
 80062ac:	f8dc a000 	ldr.w	sl, [ip]
 80062b0:	b292      	uxth	r2, r2
 80062b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80062b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062c0:	4581      	cmp	r9, r0
 80062c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80062c6:	f84c 3b04 	str.w	r3, [ip], #4
 80062ca:	d2db      	bcs.n	8006284 <quorem+0x44>
 80062cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80062d0:	b92b      	cbnz	r3, 80062de <quorem+0x9e>
 80062d2:	9b01      	ldr	r3, [sp, #4]
 80062d4:	3b04      	subs	r3, #4
 80062d6:	429d      	cmp	r5, r3
 80062d8:	461a      	mov	r2, r3
 80062da:	d32f      	bcc.n	800633c <quorem+0xfc>
 80062dc:	613c      	str	r4, [r7, #16]
 80062de:	4638      	mov	r0, r7
 80062e0:	f001 f8ce 	bl	8007480 <__mcmp>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	db25      	blt.n	8006334 <quorem+0xf4>
 80062e8:	4628      	mov	r0, r5
 80062ea:	f04f 0c00 	mov.w	ip, #0
 80062ee:	3601      	adds	r6, #1
 80062f0:	f858 1b04 	ldr.w	r1, [r8], #4
 80062f4:	f8d0 e000 	ldr.w	lr, [r0]
 80062f8:	b28b      	uxth	r3, r1
 80062fa:	ebac 0303 	sub.w	r3, ip, r3
 80062fe:	fa1f f28e 	uxth.w	r2, lr
 8006302:	4413      	add	r3, r2
 8006304:	0c0a      	lsrs	r2, r1, #16
 8006306:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800630a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800630e:	b29b      	uxth	r3, r3
 8006310:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006314:	45c1      	cmp	r9, r8
 8006316:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800631a:	f840 3b04 	str.w	r3, [r0], #4
 800631e:	d2e7      	bcs.n	80062f0 <quorem+0xb0>
 8006320:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006324:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006328:	b922      	cbnz	r2, 8006334 <quorem+0xf4>
 800632a:	3b04      	subs	r3, #4
 800632c:	429d      	cmp	r5, r3
 800632e:	461a      	mov	r2, r3
 8006330:	d30a      	bcc.n	8006348 <quorem+0x108>
 8006332:	613c      	str	r4, [r7, #16]
 8006334:	4630      	mov	r0, r6
 8006336:	b003      	add	sp, #12
 8006338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800633c:	6812      	ldr	r2, [r2, #0]
 800633e:	3b04      	subs	r3, #4
 8006340:	2a00      	cmp	r2, #0
 8006342:	d1cb      	bne.n	80062dc <quorem+0x9c>
 8006344:	3c01      	subs	r4, #1
 8006346:	e7c6      	b.n	80062d6 <quorem+0x96>
 8006348:	6812      	ldr	r2, [r2, #0]
 800634a:	3b04      	subs	r3, #4
 800634c:	2a00      	cmp	r2, #0
 800634e:	d1f0      	bne.n	8006332 <quorem+0xf2>
 8006350:	3c01      	subs	r4, #1
 8006352:	e7eb      	b.n	800632c <quorem+0xec>
 8006354:	2000      	movs	r0, #0
 8006356:	e7ee      	b.n	8006336 <quorem+0xf6>

08006358 <_dtoa_r>:
 8006358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635c:	4616      	mov	r6, r2
 800635e:	461f      	mov	r7, r3
 8006360:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006362:	b099      	sub	sp, #100	; 0x64
 8006364:	4605      	mov	r5, r0
 8006366:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800636a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800636e:	b974      	cbnz	r4, 800638e <_dtoa_r+0x36>
 8006370:	2010      	movs	r0, #16
 8006372:	f000 fde3 	bl	8006f3c <malloc>
 8006376:	4602      	mov	r2, r0
 8006378:	6268      	str	r0, [r5, #36]	; 0x24
 800637a:	b920      	cbnz	r0, 8006386 <_dtoa_r+0x2e>
 800637c:	21ea      	movs	r1, #234	; 0xea
 800637e:	4ba8      	ldr	r3, [pc, #672]	; (8006620 <_dtoa_r+0x2c8>)
 8006380:	48a8      	ldr	r0, [pc, #672]	; (8006624 <_dtoa_r+0x2cc>)
 8006382:	f001 fbdd 	bl	8007b40 <__assert_func>
 8006386:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800638a:	6004      	str	r4, [r0, #0]
 800638c:	60c4      	str	r4, [r0, #12]
 800638e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006390:	6819      	ldr	r1, [r3, #0]
 8006392:	b151      	cbz	r1, 80063aa <_dtoa_r+0x52>
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	2301      	movs	r3, #1
 8006398:	4093      	lsls	r3, r2
 800639a:	604a      	str	r2, [r1, #4]
 800639c:	608b      	str	r3, [r1, #8]
 800639e:	4628      	mov	r0, r5
 80063a0:	f000 fe30 	bl	8007004 <_Bfree>
 80063a4:	2200      	movs	r2, #0
 80063a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	1e3b      	subs	r3, r7, #0
 80063ac:	bfaf      	iteee	ge
 80063ae:	2300      	movge	r3, #0
 80063b0:	2201      	movlt	r2, #1
 80063b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80063b6:	9305      	strlt	r3, [sp, #20]
 80063b8:	bfa8      	it	ge
 80063ba:	f8c8 3000 	strge.w	r3, [r8]
 80063be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80063c2:	4b99      	ldr	r3, [pc, #612]	; (8006628 <_dtoa_r+0x2d0>)
 80063c4:	bfb8      	it	lt
 80063c6:	f8c8 2000 	strlt.w	r2, [r8]
 80063ca:	ea33 0309 	bics.w	r3, r3, r9
 80063ce:	d119      	bne.n	8006404 <_dtoa_r+0xac>
 80063d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80063d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80063dc:	4333      	orrs	r3, r6
 80063de:	f000 857f 	beq.w	8006ee0 <_dtoa_r+0xb88>
 80063e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063e4:	b953      	cbnz	r3, 80063fc <_dtoa_r+0xa4>
 80063e6:	4b91      	ldr	r3, [pc, #580]	; (800662c <_dtoa_r+0x2d4>)
 80063e8:	e022      	b.n	8006430 <_dtoa_r+0xd8>
 80063ea:	4b91      	ldr	r3, [pc, #580]	; (8006630 <_dtoa_r+0x2d8>)
 80063ec:	9303      	str	r3, [sp, #12]
 80063ee:	3308      	adds	r3, #8
 80063f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	9803      	ldr	r0, [sp, #12]
 80063f6:	b019      	add	sp, #100	; 0x64
 80063f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063fc:	4b8b      	ldr	r3, [pc, #556]	; (800662c <_dtoa_r+0x2d4>)
 80063fe:	9303      	str	r3, [sp, #12]
 8006400:	3303      	adds	r3, #3
 8006402:	e7f5      	b.n	80063f0 <_dtoa_r+0x98>
 8006404:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006408:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800640c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006410:	2200      	movs	r2, #0
 8006412:	2300      	movs	r3, #0
 8006414:	f7fa fad2 	bl	80009bc <__aeabi_dcmpeq>
 8006418:	4680      	mov	r8, r0
 800641a:	b158      	cbz	r0, 8006434 <_dtoa_r+0xdc>
 800641c:	2301      	movs	r3, #1
 800641e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006420:	6013      	str	r3, [r2, #0]
 8006422:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 8558 	beq.w	8006eda <_dtoa_r+0xb82>
 800642a:	4882      	ldr	r0, [pc, #520]	; (8006634 <_dtoa_r+0x2dc>)
 800642c:	6018      	str	r0, [r3, #0]
 800642e:	1e43      	subs	r3, r0, #1
 8006430:	9303      	str	r3, [sp, #12]
 8006432:	e7df      	b.n	80063f4 <_dtoa_r+0x9c>
 8006434:	ab16      	add	r3, sp, #88	; 0x58
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	ab17      	add	r3, sp, #92	; 0x5c
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	4628      	mov	r0, r5
 800643e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006442:	f001 f8c5 	bl	80075d0 <__d2b>
 8006446:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800644a:	4683      	mov	fp, r0
 800644c:	2c00      	cmp	r4, #0
 800644e:	d07f      	beq.n	8006550 <_dtoa_r+0x1f8>
 8006450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006456:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800645a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800645e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006462:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006466:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800646a:	2200      	movs	r2, #0
 800646c:	4b72      	ldr	r3, [pc, #456]	; (8006638 <_dtoa_r+0x2e0>)
 800646e:	f7f9 fe85 	bl	800017c <__aeabi_dsub>
 8006472:	a365      	add	r3, pc, #404	; (adr r3, 8006608 <_dtoa_r+0x2b0>)
 8006474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006478:	f7fa f838 	bl	80004ec <__aeabi_dmul>
 800647c:	a364      	add	r3, pc, #400	; (adr r3, 8006610 <_dtoa_r+0x2b8>)
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	f7f9 fe7d 	bl	8000180 <__adddf3>
 8006486:	4606      	mov	r6, r0
 8006488:	4620      	mov	r0, r4
 800648a:	460f      	mov	r7, r1
 800648c:	f7f9 ffc4 	bl	8000418 <__aeabi_i2d>
 8006490:	a361      	add	r3, pc, #388	; (adr r3, 8006618 <_dtoa_r+0x2c0>)
 8006492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006496:	f7fa f829 	bl	80004ec <__aeabi_dmul>
 800649a:	4602      	mov	r2, r0
 800649c:	460b      	mov	r3, r1
 800649e:	4630      	mov	r0, r6
 80064a0:	4639      	mov	r1, r7
 80064a2:	f7f9 fe6d 	bl	8000180 <__adddf3>
 80064a6:	4606      	mov	r6, r0
 80064a8:	460f      	mov	r7, r1
 80064aa:	f7fa facf 	bl	8000a4c <__aeabi_d2iz>
 80064ae:	2200      	movs	r2, #0
 80064b0:	4682      	mov	sl, r0
 80064b2:	2300      	movs	r3, #0
 80064b4:	4630      	mov	r0, r6
 80064b6:	4639      	mov	r1, r7
 80064b8:	f7fa fa8a 	bl	80009d0 <__aeabi_dcmplt>
 80064bc:	b148      	cbz	r0, 80064d2 <_dtoa_r+0x17a>
 80064be:	4650      	mov	r0, sl
 80064c0:	f7f9 ffaa 	bl	8000418 <__aeabi_i2d>
 80064c4:	4632      	mov	r2, r6
 80064c6:	463b      	mov	r3, r7
 80064c8:	f7fa fa78 	bl	80009bc <__aeabi_dcmpeq>
 80064cc:	b908      	cbnz	r0, 80064d2 <_dtoa_r+0x17a>
 80064ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064d2:	f1ba 0f16 	cmp.w	sl, #22
 80064d6:	d858      	bhi.n	800658a <_dtoa_r+0x232>
 80064d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80064dc:	4b57      	ldr	r3, [pc, #348]	; (800663c <_dtoa_r+0x2e4>)
 80064de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80064e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e6:	f7fa fa73 	bl	80009d0 <__aeabi_dcmplt>
 80064ea:	2800      	cmp	r0, #0
 80064ec:	d04f      	beq.n	800658e <_dtoa_r+0x236>
 80064ee:	2300      	movs	r3, #0
 80064f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80064f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80064f8:	1b1c      	subs	r4, r3, r4
 80064fa:	1e63      	subs	r3, r4, #1
 80064fc:	9309      	str	r3, [sp, #36]	; 0x24
 80064fe:	bf49      	itett	mi
 8006500:	f1c4 0301 	rsbmi	r3, r4, #1
 8006504:	2300      	movpl	r3, #0
 8006506:	9306      	strmi	r3, [sp, #24]
 8006508:	2300      	movmi	r3, #0
 800650a:	bf54      	ite	pl
 800650c:	9306      	strpl	r3, [sp, #24]
 800650e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006510:	f1ba 0f00 	cmp.w	sl, #0
 8006514:	db3d      	blt.n	8006592 <_dtoa_r+0x23a>
 8006516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006518:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800651c:	4453      	add	r3, sl
 800651e:	9309      	str	r3, [sp, #36]	; 0x24
 8006520:	2300      	movs	r3, #0
 8006522:	930a      	str	r3, [sp, #40]	; 0x28
 8006524:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006526:	2b09      	cmp	r3, #9
 8006528:	f200 808c 	bhi.w	8006644 <_dtoa_r+0x2ec>
 800652c:	2b05      	cmp	r3, #5
 800652e:	bfc4      	itt	gt
 8006530:	3b04      	subgt	r3, #4
 8006532:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006534:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006536:	bfc8      	it	gt
 8006538:	2400      	movgt	r4, #0
 800653a:	f1a3 0302 	sub.w	r3, r3, #2
 800653e:	bfd8      	it	le
 8006540:	2401      	movle	r4, #1
 8006542:	2b03      	cmp	r3, #3
 8006544:	f200 808a 	bhi.w	800665c <_dtoa_r+0x304>
 8006548:	e8df f003 	tbb	[pc, r3]
 800654c:	5b4d4f2d 	.word	0x5b4d4f2d
 8006550:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006554:	441c      	add	r4, r3
 8006556:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800655a:	2b20      	cmp	r3, #32
 800655c:	bfc3      	ittte	gt
 800655e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006562:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006566:	fa09 f303 	lslgt.w	r3, r9, r3
 800656a:	f1c3 0320 	rsble	r3, r3, #32
 800656e:	bfc6      	itte	gt
 8006570:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006574:	4318      	orrgt	r0, r3
 8006576:	fa06 f003 	lslle.w	r0, r6, r3
 800657a:	f7f9 ff3d 	bl	80003f8 <__aeabi_ui2d>
 800657e:	2301      	movs	r3, #1
 8006580:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006584:	3c01      	subs	r4, #1
 8006586:	9313      	str	r3, [sp, #76]	; 0x4c
 8006588:	e76f      	b.n	800646a <_dtoa_r+0x112>
 800658a:	2301      	movs	r3, #1
 800658c:	e7b2      	b.n	80064f4 <_dtoa_r+0x19c>
 800658e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006590:	e7b1      	b.n	80064f6 <_dtoa_r+0x19e>
 8006592:	9b06      	ldr	r3, [sp, #24]
 8006594:	eba3 030a 	sub.w	r3, r3, sl
 8006598:	9306      	str	r3, [sp, #24]
 800659a:	f1ca 0300 	rsb	r3, sl, #0
 800659e:	930a      	str	r3, [sp, #40]	; 0x28
 80065a0:	2300      	movs	r3, #0
 80065a2:	930e      	str	r3, [sp, #56]	; 0x38
 80065a4:	e7be      	b.n	8006524 <_dtoa_r+0x1cc>
 80065a6:	2300      	movs	r3, #0
 80065a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80065aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	dc58      	bgt.n	8006662 <_dtoa_r+0x30a>
 80065b0:	f04f 0901 	mov.w	r9, #1
 80065b4:	464b      	mov	r3, r9
 80065b6:	f8cd 9020 	str.w	r9, [sp, #32]
 80065ba:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80065be:	2200      	movs	r2, #0
 80065c0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80065c2:	6042      	str	r2, [r0, #4]
 80065c4:	2204      	movs	r2, #4
 80065c6:	f102 0614 	add.w	r6, r2, #20
 80065ca:	429e      	cmp	r6, r3
 80065cc:	6841      	ldr	r1, [r0, #4]
 80065ce:	d94e      	bls.n	800666e <_dtoa_r+0x316>
 80065d0:	4628      	mov	r0, r5
 80065d2:	f000 fcd7 	bl	8006f84 <_Balloc>
 80065d6:	9003      	str	r0, [sp, #12]
 80065d8:	2800      	cmp	r0, #0
 80065da:	d14c      	bne.n	8006676 <_dtoa_r+0x31e>
 80065dc:	4602      	mov	r2, r0
 80065de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80065e2:	4b17      	ldr	r3, [pc, #92]	; (8006640 <_dtoa_r+0x2e8>)
 80065e4:	e6cc      	b.n	8006380 <_dtoa_r+0x28>
 80065e6:	2301      	movs	r3, #1
 80065e8:	e7de      	b.n	80065a8 <_dtoa_r+0x250>
 80065ea:	2300      	movs	r3, #0
 80065ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80065ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065f0:	eb0a 0903 	add.w	r9, sl, r3
 80065f4:	f109 0301 	add.w	r3, r9, #1
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	9308      	str	r3, [sp, #32]
 80065fc:	bfb8      	it	lt
 80065fe:	2301      	movlt	r3, #1
 8006600:	e7dd      	b.n	80065be <_dtoa_r+0x266>
 8006602:	2301      	movs	r3, #1
 8006604:	e7f2      	b.n	80065ec <_dtoa_r+0x294>
 8006606:	bf00      	nop
 8006608:	636f4361 	.word	0x636f4361
 800660c:	3fd287a7 	.word	0x3fd287a7
 8006610:	8b60c8b3 	.word	0x8b60c8b3
 8006614:	3fc68a28 	.word	0x3fc68a28
 8006618:	509f79fb 	.word	0x509f79fb
 800661c:	3fd34413 	.word	0x3fd34413
 8006620:	080087bd 	.word	0x080087bd
 8006624:	080087d4 	.word	0x080087d4
 8006628:	7ff00000 	.word	0x7ff00000
 800662c:	080087b9 	.word	0x080087b9
 8006630:	080087b0 	.word	0x080087b0
 8006634:	0800878d 	.word	0x0800878d
 8006638:	3ff80000 	.word	0x3ff80000
 800663c:	080088c8 	.word	0x080088c8
 8006640:	0800882f 	.word	0x0800882f
 8006644:	2401      	movs	r4, #1
 8006646:	2300      	movs	r3, #0
 8006648:	940b      	str	r4, [sp, #44]	; 0x2c
 800664a:	9322      	str	r3, [sp, #136]	; 0x88
 800664c:	f04f 39ff 	mov.w	r9, #4294967295
 8006650:	2200      	movs	r2, #0
 8006652:	2312      	movs	r3, #18
 8006654:	f8cd 9020 	str.w	r9, [sp, #32]
 8006658:	9223      	str	r2, [sp, #140]	; 0x8c
 800665a:	e7b0      	b.n	80065be <_dtoa_r+0x266>
 800665c:	2301      	movs	r3, #1
 800665e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006660:	e7f4      	b.n	800664c <_dtoa_r+0x2f4>
 8006662:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006666:	464b      	mov	r3, r9
 8006668:	f8cd 9020 	str.w	r9, [sp, #32]
 800666c:	e7a7      	b.n	80065be <_dtoa_r+0x266>
 800666e:	3101      	adds	r1, #1
 8006670:	6041      	str	r1, [r0, #4]
 8006672:	0052      	lsls	r2, r2, #1
 8006674:	e7a7      	b.n	80065c6 <_dtoa_r+0x26e>
 8006676:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006678:	9a03      	ldr	r2, [sp, #12]
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	9b08      	ldr	r3, [sp, #32]
 800667e:	2b0e      	cmp	r3, #14
 8006680:	f200 80a8 	bhi.w	80067d4 <_dtoa_r+0x47c>
 8006684:	2c00      	cmp	r4, #0
 8006686:	f000 80a5 	beq.w	80067d4 <_dtoa_r+0x47c>
 800668a:	f1ba 0f00 	cmp.w	sl, #0
 800668e:	dd34      	ble.n	80066fa <_dtoa_r+0x3a2>
 8006690:	4a9a      	ldr	r2, [pc, #616]	; (80068fc <_dtoa_r+0x5a4>)
 8006692:	f00a 030f 	and.w	r3, sl, #15
 8006696:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800669a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800669e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80066a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80066a6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80066aa:	d016      	beq.n	80066da <_dtoa_r+0x382>
 80066ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066b0:	4b93      	ldr	r3, [pc, #588]	; (8006900 <_dtoa_r+0x5a8>)
 80066b2:	2703      	movs	r7, #3
 80066b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066b8:	f7fa f842 	bl	8000740 <__aeabi_ddiv>
 80066bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066c0:	f004 040f 	and.w	r4, r4, #15
 80066c4:	4e8e      	ldr	r6, [pc, #568]	; (8006900 <_dtoa_r+0x5a8>)
 80066c6:	b954      	cbnz	r4, 80066de <_dtoa_r+0x386>
 80066c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80066cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066d0:	f7fa f836 	bl	8000740 <__aeabi_ddiv>
 80066d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066d8:	e029      	b.n	800672e <_dtoa_r+0x3d6>
 80066da:	2702      	movs	r7, #2
 80066dc:	e7f2      	b.n	80066c4 <_dtoa_r+0x36c>
 80066de:	07e1      	lsls	r1, r4, #31
 80066e0:	d508      	bpl.n	80066f4 <_dtoa_r+0x39c>
 80066e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80066ea:	f7f9 feff 	bl	80004ec <__aeabi_dmul>
 80066ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80066f2:	3701      	adds	r7, #1
 80066f4:	1064      	asrs	r4, r4, #1
 80066f6:	3608      	adds	r6, #8
 80066f8:	e7e5      	b.n	80066c6 <_dtoa_r+0x36e>
 80066fa:	f000 80a5 	beq.w	8006848 <_dtoa_r+0x4f0>
 80066fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006702:	f1ca 0400 	rsb	r4, sl, #0
 8006706:	4b7d      	ldr	r3, [pc, #500]	; (80068fc <_dtoa_r+0x5a4>)
 8006708:	f004 020f 	and.w	r2, r4, #15
 800670c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	f7f9 feea 	bl	80004ec <__aeabi_dmul>
 8006718:	2702      	movs	r7, #2
 800671a:	2300      	movs	r3, #0
 800671c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006720:	4e77      	ldr	r6, [pc, #476]	; (8006900 <_dtoa_r+0x5a8>)
 8006722:	1124      	asrs	r4, r4, #4
 8006724:	2c00      	cmp	r4, #0
 8006726:	f040 8084 	bne.w	8006832 <_dtoa_r+0x4da>
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1d2      	bne.n	80066d4 <_dtoa_r+0x37c>
 800672e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006730:	2b00      	cmp	r3, #0
 8006732:	f000 808b 	beq.w	800684c <_dtoa_r+0x4f4>
 8006736:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800673a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800673e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006742:	2200      	movs	r2, #0
 8006744:	4b6f      	ldr	r3, [pc, #444]	; (8006904 <_dtoa_r+0x5ac>)
 8006746:	f7fa f943 	bl	80009d0 <__aeabi_dcmplt>
 800674a:	2800      	cmp	r0, #0
 800674c:	d07e      	beq.n	800684c <_dtoa_r+0x4f4>
 800674e:	9b08      	ldr	r3, [sp, #32]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d07b      	beq.n	800684c <_dtoa_r+0x4f4>
 8006754:	f1b9 0f00 	cmp.w	r9, #0
 8006758:	dd38      	ble.n	80067cc <_dtoa_r+0x474>
 800675a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800675e:	2200      	movs	r2, #0
 8006760:	4b69      	ldr	r3, [pc, #420]	; (8006908 <_dtoa_r+0x5b0>)
 8006762:	f7f9 fec3 	bl	80004ec <__aeabi_dmul>
 8006766:	464c      	mov	r4, r9
 8006768:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800676c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006770:	3701      	adds	r7, #1
 8006772:	4638      	mov	r0, r7
 8006774:	f7f9 fe50 	bl	8000418 <__aeabi_i2d>
 8006778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800677c:	f7f9 feb6 	bl	80004ec <__aeabi_dmul>
 8006780:	2200      	movs	r2, #0
 8006782:	4b62      	ldr	r3, [pc, #392]	; (800690c <_dtoa_r+0x5b4>)
 8006784:	f7f9 fcfc 	bl	8000180 <__adddf3>
 8006788:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800678c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006790:	9611      	str	r6, [sp, #68]	; 0x44
 8006792:	2c00      	cmp	r4, #0
 8006794:	d15d      	bne.n	8006852 <_dtoa_r+0x4fa>
 8006796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800679a:	2200      	movs	r2, #0
 800679c:	4b5c      	ldr	r3, [pc, #368]	; (8006910 <_dtoa_r+0x5b8>)
 800679e:	f7f9 fced 	bl	800017c <__aeabi_dsub>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80067aa:	4633      	mov	r3, r6
 80067ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067ae:	f7fa f92d 	bl	8000a0c <__aeabi_dcmpgt>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	f040 829c 	bne.w	8006cf0 <_dtoa_r+0x998>
 80067b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067be:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80067c2:	f7fa f905 	bl	80009d0 <__aeabi_dcmplt>
 80067c6:	2800      	cmp	r0, #0
 80067c8:	f040 8290 	bne.w	8006cec <_dtoa_r+0x994>
 80067cc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80067d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80067d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f2c0 8152 	blt.w	8006a80 <_dtoa_r+0x728>
 80067dc:	f1ba 0f0e 	cmp.w	sl, #14
 80067e0:	f300 814e 	bgt.w	8006a80 <_dtoa_r+0x728>
 80067e4:	4b45      	ldr	r3, [pc, #276]	; (80068fc <_dtoa_r+0x5a4>)
 80067e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80067ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80067ee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80067f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f280 80db 	bge.w	80069b0 <_dtoa_r+0x658>
 80067fa:	9b08      	ldr	r3, [sp, #32]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f300 80d7 	bgt.w	80069b0 <_dtoa_r+0x658>
 8006802:	f040 8272 	bne.w	8006cea <_dtoa_r+0x992>
 8006806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800680a:	2200      	movs	r2, #0
 800680c:	4b40      	ldr	r3, [pc, #256]	; (8006910 <_dtoa_r+0x5b8>)
 800680e:	f7f9 fe6d 	bl	80004ec <__aeabi_dmul>
 8006812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006816:	f7fa f8ef 	bl	80009f8 <__aeabi_dcmpge>
 800681a:	9c08      	ldr	r4, [sp, #32]
 800681c:	4626      	mov	r6, r4
 800681e:	2800      	cmp	r0, #0
 8006820:	f040 8248 	bne.w	8006cb4 <_dtoa_r+0x95c>
 8006824:	2331      	movs	r3, #49	; 0x31
 8006826:	9f03      	ldr	r7, [sp, #12]
 8006828:	f10a 0a01 	add.w	sl, sl, #1
 800682c:	f807 3b01 	strb.w	r3, [r7], #1
 8006830:	e244      	b.n	8006cbc <_dtoa_r+0x964>
 8006832:	07e2      	lsls	r2, r4, #31
 8006834:	d505      	bpl.n	8006842 <_dtoa_r+0x4ea>
 8006836:	e9d6 2300 	ldrd	r2, r3, [r6]
 800683a:	f7f9 fe57 	bl	80004ec <__aeabi_dmul>
 800683e:	2301      	movs	r3, #1
 8006840:	3701      	adds	r7, #1
 8006842:	1064      	asrs	r4, r4, #1
 8006844:	3608      	adds	r6, #8
 8006846:	e76d      	b.n	8006724 <_dtoa_r+0x3cc>
 8006848:	2702      	movs	r7, #2
 800684a:	e770      	b.n	800672e <_dtoa_r+0x3d6>
 800684c:	46d0      	mov	r8, sl
 800684e:	9c08      	ldr	r4, [sp, #32]
 8006850:	e78f      	b.n	8006772 <_dtoa_r+0x41a>
 8006852:	9903      	ldr	r1, [sp, #12]
 8006854:	4b29      	ldr	r3, [pc, #164]	; (80068fc <_dtoa_r+0x5a4>)
 8006856:	4421      	add	r1, r4
 8006858:	9112      	str	r1, [sp, #72]	; 0x48
 800685a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800685c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006860:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006864:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006868:	2900      	cmp	r1, #0
 800686a:	d055      	beq.n	8006918 <_dtoa_r+0x5c0>
 800686c:	2000      	movs	r0, #0
 800686e:	4929      	ldr	r1, [pc, #164]	; (8006914 <_dtoa_r+0x5bc>)
 8006870:	f7f9 ff66 	bl	8000740 <__aeabi_ddiv>
 8006874:	463b      	mov	r3, r7
 8006876:	4632      	mov	r2, r6
 8006878:	f7f9 fc80 	bl	800017c <__aeabi_dsub>
 800687c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006880:	9f03      	ldr	r7, [sp, #12]
 8006882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006886:	f7fa f8e1 	bl	8000a4c <__aeabi_d2iz>
 800688a:	4604      	mov	r4, r0
 800688c:	f7f9 fdc4 	bl	8000418 <__aeabi_i2d>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006898:	f7f9 fc70 	bl	800017c <__aeabi_dsub>
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	3430      	adds	r4, #48	; 0x30
 80068a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068aa:	f807 4b01 	strb.w	r4, [r7], #1
 80068ae:	f7fa f88f 	bl	80009d0 <__aeabi_dcmplt>
 80068b2:	2800      	cmp	r0, #0
 80068b4:	d174      	bne.n	80069a0 <_dtoa_r+0x648>
 80068b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068ba:	2000      	movs	r0, #0
 80068bc:	4911      	ldr	r1, [pc, #68]	; (8006904 <_dtoa_r+0x5ac>)
 80068be:	f7f9 fc5d 	bl	800017c <__aeabi_dsub>
 80068c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068c6:	f7fa f883 	bl	80009d0 <__aeabi_dcmplt>
 80068ca:	2800      	cmp	r0, #0
 80068cc:	f040 80b7 	bne.w	8006a3e <_dtoa_r+0x6e6>
 80068d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068d2:	429f      	cmp	r7, r3
 80068d4:	f43f af7a 	beq.w	80067cc <_dtoa_r+0x474>
 80068d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068dc:	2200      	movs	r2, #0
 80068de:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <_dtoa_r+0x5b0>)
 80068e0:	f7f9 fe04 	bl	80004ec <__aeabi_dmul>
 80068e4:	2200      	movs	r2, #0
 80068e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068ee:	4b06      	ldr	r3, [pc, #24]	; (8006908 <_dtoa_r+0x5b0>)
 80068f0:	f7f9 fdfc 	bl	80004ec <__aeabi_dmul>
 80068f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068f8:	e7c3      	b.n	8006882 <_dtoa_r+0x52a>
 80068fa:	bf00      	nop
 80068fc:	080088c8 	.word	0x080088c8
 8006900:	080088a0 	.word	0x080088a0
 8006904:	3ff00000 	.word	0x3ff00000
 8006908:	40240000 	.word	0x40240000
 800690c:	401c0000 	.word	0x401c0000
 8006910:	40140000 	.word	0x40140000
 8006914:	3fe00000 	.word	0x3fe00000
 8006918:	4630      	mov	r0, r6
 800691a:	4639      	mov	r1, r7
 800691c:	f7f9 fde6 	bl	80004ec <__aeabi_dmul>
 8006920:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006922:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006926:	9c03      	ldr	r4, [sp, #12]
 8006928:	9314      	str	r3, [sp, #80]	; 0x50
 800692a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800692e:	f7fa f88d 	bl	8000a4c <__aeabi_d2iz>
 8006932:	9015      	str	r0, [sp, #84]	; 0x54
 8006934:	f7f9 fd70 	bl	8000418 <__aeabi_i2d>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006940:	f7f9 fc1c 	bl	800017c <__aeabi_dsub>
 8006944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006946:	4606      	mov	r6, r0
 8006948:	3330      	adds	r3, #48	; 0x30
 800694a:	f804 3b01 	strb.w	r3, [r4], #1
 800694e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006950:	460f      	mov	r7, r1
 8006952:	429c      	cmp	r4, r3
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	d124      	bne.n	80069a4 <_dtoa_r+0x64c>
 800695a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800695e:	4bb0      	ldr	r3, [pc, #704]	; (8006c20 <_dtoa_r+0x8c8>)
 8006960:	f7f9 fc0e 	bl	8000180 <__adddf3>
 8006964:	4602      	mov	r2, r0
 8006966:	460b      	mov	r3, r1
 8006968:	4630      	mov	r0, r6
 800696a:	4639      	mov	r1, r7
 800696c:	f7fa f84e 	bl	8000a0c <__aeabi_dcmpgt>
 8006970:	2800      	cmp	r0, #0
 8006972:	d163      	bne.n	8006a3c <_dtoa_r+0x6e4>
 8006974:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006978:	2000      	movs	r0, #0
 800697a:	49a9      	ldr	r1, [pc, #676]	; (8006c20 <_dtoa_r+0x8c8>)
 800697c:	f7f9 fbfe 	bl	800017c <__aeabi_dsub>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4630      	mov	r0, r6
 8006986:	4639      	mov	r1, r7
 8006988:	f7fa f822 	bl	80009d0 <__aeabi_dcmplt>
 800698c:	2800      	cmp	r0, #0
 800698e:	f43f af1d 	beq.w	80067cc <_dtoa_r+0x474>
 8006992:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006994:	1e7b      	subs	r3, r7, #1
 8006996:	9314      	str	r3, [sp, #80]	; 0x50
 8006998:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800699c:	2b30      	cmp	r3, #48	; 0x30
 800699e:	d0f8      	beq.n	8006992 <_dtoa_r+0x63a>
 80069a0:	46c2      	mov	sl, r8
 80069a2:	e03b      	b.n	8006a1c <_dtoa_r+0x6c4>
 80069a4:	4b9f      	ldr	r3, [pc, #636]	; (8006c24 <_dtoa_r+0x8cc>)
 80069a6:	f7f9 fda1 	bl	80004ec <__aeabi_dmul>
 80069aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069ae:	e7bc      	b.n	800692a <_dtoa_r+0x5d2>
 80069b0:	9f03      	ldr	r7, [sp, #12]
 80069b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80069b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069ba:	4640      	mov	r0, r8
 80069bc:	4649      	mov	r1, r9
 80069be:	f7f9 febf 	bl	8000740 <__aeabi_ddiv>
 80069c2:	f7fa f843 	bl	8000a4c <__aeabi_d2iz>
 80069c6:	4604      	mov	r4, r0
 80069c8:	f7f9 fd26 	bl	8000418 <__aeabi_i2d>
 80069cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80069d0:	f7f9 fd8c 	bl	80004ec <__aeabi_dmul>
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	4640      	mov	r0, r8
 80069da:	4649      	mov	r1, r9
 80069dc:	f7f9 fbce 	bl	800017c <__aeabi_dsub>
 80069e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80069e4:	f807 6b01 	strb.w	r6, [r7], #1
 80069e8:	9e03      	ldr	r6, [sp, #12]
 80069ea:	f8dd c020 	ldr.w	ip, [sp, #32]
 80069ee:	1bbe      	subs	r6, r7, r6
 80069f0:	45b4      	cmp	ip, r6
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	d136      	bne.n	8006a66 <_dtoa_r+0x70e>
 80069f8:	f7f9 fbc2 	bl	8000180 <__adddf3>
 80069fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a00:	4680      	mov	r8, r0
 8006a02:	4689      	mov	r9, r1
 8006a04:	f7fa f802 	bl	8000a0c <__aeabi_dcmpgt>
 8006a08:	bb58      	cbnz	r0, 8006a62 <_dtoa_r+0x70a>
 8006a0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a0e:	4640      	mov	r0, r8
 8006a10:	4649      	mov	r1, r9
 8006a12:	f7f9 ffd3 	bl	80009bc <__aeabi_dcmpeq>
 8006a16:	b108      	cbz	r0, 8006a1c <_dtoa_r+0x6c4>
 8006a18:	07e1      	lsls	r1, r4, #31
 8006a1a:	d422      	bmi.n	8006a62 <_dtoa_r+0x70a>
 8006a1c:	4628      	mov	r0, r5
 8006a1e:	4659      	mov	r1, fp
 8006a20:	f000 faf0 	bl	8007004 <_Bfree>
 8006a24:	2300      	movs	r3, #0
 8006a26:	703b      	strb	r3, [r7, #0]
 8006a28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006a2a:	f10a 0001 	add.w	r0, sl, #1
 8006a2e:	6018      	str	r0, [r3, #0]
 8006a30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f43f acde 	beq.w	80063f4 <_dtoa_r+0x9c>
 8006a38:	601f      	str	r7, [r3, #0]
 8006a3a:	e4db      	b.n	80063f4 <_dtoa_r+0x9c>
 8006a3c:	4627      	mov	r7, r4
 8006a3e:	463b      	mov	r3, r7
 8006a40:	461f      	mov	r7, r3
 8006a42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a46:	2a39      	cmp	r2, #57	; 0x39
 8006a48:	d107      	bne.n	8006a5a <_dtoa_r+0x702>
 8006a4a:	9a03      	ldr	r2, [sp, #12]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d1f7      	bne.n	8006a40 <_dtoa_r+0x6e8>
 8006a50:	2230      	movs	r2, #48	; 0x30
 8006a52:	9903      	ldr	r1, [sp, #12]
 8006a54:	f108 0801 	add.w	r8, r8, #1
 8006a58:	700a      	strb	r2, [r1, #0]
 8006a5a:	781a      	ldrb	r2, [r3, #0]
 8006a5c:	3201      	adds	r2, #1
 8006a5e:	701a      	strb	r2, [r3, #0]
 8006a60:	e79e      	b.n	80069a0 <_dtoa_r+0x648>
 8006a62:	46d0      	mov	r8, sl
 8006a64:	e7eb      	b.n	8006a3e <_dtoa_r+0x6e6>
 8006a66:	2200      	movs	r2, #0
 8006a68:	4b6e      	ldr	r3, [pc, #440]	; (8006c24 <_dtoa_r+0x8cc>)
 8006a6a:	f7f9 fd3f 	bl	80004ec <__aeabi_dmul>
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2300      	movs	r3, #0
 8006a72:	4680      	mov	r8, r0
 8006a74:	4689      	mov	r9, r1
 8006a76:	f7f9 ffa1 	bl	80009bc <__aeabi_dcmpeq>
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	d09b      	beq.n	80069b6 <_dtoa_r+0x65e>
 8006a7e:	e7cd      	b.n	8006a1c <_dtoa_r+0x6c4>
 8006a80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a82:	2a00      	cmp	r2, #0
 8006a84:	f000 80d0 	beq.w	8006c28 <_dtoa_r+0x8d0>
 8006a88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a8a:	2a01      	cmp	r2, #1
 8006a8c:	f300 80ae 	bgt.w	8006bec <_dtoa_r+0x894>
 8006a90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a92:	2a00      	cmp	r2, #0
 8006a94:	f000 80a6 	beq.w	8006be4 <_dtoa_r+0x88c>
 8006a98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a9e:	9f06      	ldr	r7, [sp, #24]
 8006aa0:	9a06      	ldr	r2, [sp, #24]
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	441a      	add	r2, r3
 8006aa6:	9206      	str	r2, [sp, #24]
 8006aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006aaa:	4628      	mov	r0, r5
 8006aac:	441a      	add	r2, r3
 8006aae:	9209      	str	r2, [sp, #36]	; 0x24
 8006ab0:	f000 fb5e 	bl	8007170 <__i2b>
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	2f00      	cmp	r7, #0
 8006ab8:	dd0c      	ble.n	8006ad4 <_dtoa_r+0x77c>
 8006aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	dd09      	ble.n	8006ad4 <_dtoa_r+0x77c>
 8006ac0:	42bb      	cmp	r3, r7
 8006ac2:	bfa8      	it	ge
 8006ac4:	463b      	movge	r3, r7
 8006ac6:	9a06      	ldr	r2, [sp, #24]
 8006ac8:	1aff      	subs	r7, r7, r3
 8006aca:	1ad2      	subs	r2, r2, r3
 8006acc:	9206      	str	r2, [sp, #24]
 8006ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad6:	b1f3      	cbz	r3, 8006b16 <_dtoa_r+0x7be>
 8006ad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 80a8 	beq.w	8006c30 <_dtoa_r+0x8d8>
 8006ae0:	2c00      	cmp	r4, #0
 8006ae2:	dd10      	ble.n	8006b06 <_dtoa_r+0x7ae>
 8006ae4:	4631      	mov	r1, r6
 8006ae6:	4622      	mov	r2, r4
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f000 fbff 	bl	80072ec <__pow5mult>
 8006aee:	465a      	mov	r2, fp
 8006af0:	4601      	mov	r1, r0
 8006af2:	4606      	mov	r6, r0
 8006af4:	4628      	mov	r0, r5
 8006af6:	f000 fb51 	bl	800719c <__multiply>
 8006afa:	4680      	mov	r8, r0
 8006afc:	4659      	mov	r1, fp
 8006afe:	4628      	mov	r0, r5
 8006b00:	f000 fa80 	bl	8007004 <_Bfree>
 8006b04:	46c3      	mov	fp, r8
 8006b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b08:	1b1a      	subs	r2, r3, r4
 8006b0a:	d004      	beq.n	8006b16 <_dtoa_r+0x7be>
 8006b0c:	4659      	mov	r1, fp
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f000 fbec 	bl	80072ec <__pow5mult>
 8006b14:	4683      	mov	fp, r0
 8006b16:	2101      	movs	r1, #1
 8006b18:	4628      	mov	r0, r5
 8006b1a:	f000 fb29 	bl	8007170 <__i2b>
 8006b1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b20:	4604      	mov	r4, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f340 8086 	ble.w	8006c34 <_dtoa_r+0x8dc>
 8006b28:	461a      	mov	r2, r3
 8006b2a:	4601      	mov	r1, r0
 8006b2c:	4628      	mov	r0, r5
 8006b2e:	f000 fbdd 	bl	80072ec <__pow5mult>
 8006b32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b34:	4604      	mov	r4, r0
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	dd7f      	ble.n	8006c3a <_dtoa_r+0x8e2>
 8006b3a:	f04f 0800 	mov.w	r8, #0
 8006b3e:	6923      	ldr	r3, [r4, #16]
 8006b40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b44:	6918      	ldr	r0, [r3, #16]
 8006b46:	f000 fac5 	bl	80070d4 <__hi0bits>
 8006b4a:	f1c0 0020 	rsb	r0, r0, #32
 8006b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b50:	4418      	add	r0, r3
 8006b52:	f010 001f 	ands.w	r0, r0, #31
 8006b56:	f000 8092 	beq.w	8006c7e <_dtoa_r+0x926>
 8006b5a:	f1c0 0320 	rsb	r3, r0, #32
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	f340 808a 	ble.w	8006c78 <_dtoa_r+0x920>
 8006b64:	f1c0 001c 	rsb	r0, r0, #28
 8006b68:	9b06      	ldr	r3, [sp, #24]
 8006b6a:	4407      	add	r7, r0
 8006b6c:	4403      	add	r3, r0
 8006b6e:	9306      	str	r3, [sp, #24]
 8006b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b72:	4403      	add	r3, r0
 8006b74:	9309      	str	r3, [sp, #36]	; 0x24
 8006b76:	9b06      	ldr	r3, [sp, #24]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	dd05      	ble.n	8006b88 <_dtoa_r+0x830>
 8006b7c:	4659      	mov	r1, fp
 8006b7e:	461a      	mov	r2, r3
 8006b80:	4628      	mov	r0, r5
 8006b82:	f000 fc0d 	bl	80073a0 <__lshift>
 8006b86:	4683      	mov	fp, r0
 8006b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	dd05      	ble.n	8006b9a <_dtoa_r+0x842>
 8006b8e:	4621      	mov	r1, r4
 8006b90:	461a      	mov	r2, r3
 8006b92:	4628      	mov	r0, r5
 8006b94:	f000 fc04 	bl	80073a0 <__lshift>
 8006b98:	4604      	mov	r4, r0
 8006b9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d070      	beq.n	8006c82 <_dtoa_r+0x92a>
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	4658      	mov	r0, fp
 8006ba4:	f000 fc6c 	bl	8007480 <__mcmp>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	da6a      	bge.n	8006c82 <_dtoa_r+0x92a>
 8006bac:	2300      	movs	r3, #0
 8006bae:	4659      	mov	r1, fp
 8006bb0:	220a      	movs	r2, #10
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f000 fa48 	bl	8007048 <__multadd>
 8006bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bba:	4683      	mov	fp, r0
 8006bbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 8194 	beq.w	8006eee <_dtoa_r+0xb96>
 8006bc6:	4631      	mov	r1, r6
 8006bc8:	2300      	movs	r3, #0
 8006bca:	220a      	movs	r2, #10
 8006bcc:	4628      	mov	r0, r5
 8006bce:	f000 fa3b 	bl	8007048 <__multadd>
 8006bd2:	f1b9 0f00 	cmp.w	r9, #0
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	f300 8093 	bgt.w	8006d02 <_dtoa_r+0x9aa>
 8006bdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	dc57      	bgt.n	8006c92 <_dtoa_r+0x93a>
 8006be2:	e08e      	b.n	8006d02 <_dtoa_r+0x9aa>
 8006be4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006be6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006bea:	e757      	b.n	8006a9c <_dtoa_r+0x744>
 8006bec:	9b08      	ldr	r3, [sp, #32]
 8006bee:	1e5c      	subs	r4, r3, #1
 8006bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf2:	42a3      	cmp	r3, r4
 8006bf4:	bfb7      	itett	lt
 8006bf6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006bf8:	1b1c      	subge	r4, r3, r4
 8006bfa:	1ae2      	sublt	r2, r4, r3
 8006bfc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006bfe:	bfbe      	ittt	lt
 8006c00:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006c02:	189b      	addlt	r3, r3, r2
 8006c04:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006c06:	9b08      	ldr	r3, [sp, #32]
 8006c08:	bfb8      	it	lt
 8006c0a:	2400      	movlt	r4, #0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	bfbb      	ittet	lt
 8006c10:	9b06      	ldrlt	r3, [sp, #24]
 8006c12:	9a08      	ldrlt	r2, [sp, #32]
 8006c14:	9f06      	ldrge	r7, [sp, #24]
 8006c16:	1a9f      	sublt	r7, r3, r2
 8006c18:	bfac      	ite	ge
 8006c1a:	9b08      	ldrge	r3, [sp, #32]
 8006c1c:	2300      	movlt	r3, #0
 8006c1e:	e73f      	b.n	8006aa0 <_dtoa_r+0x748>
 8006c20:	3fe00000 	.word	0x3fe00000
 8006c24:	40240000 	.word	0x40240000
 8006c28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006c2a:	9f06      	ldr	r7, [sp, #24]
 8006c2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006c2e:	e742      	b.n	8006ab6 <_dtoa_r+0x75e>
 8006c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c32:	e76b      	b.n	8006b0c <_dtoa_r+0x7b4>
 8006c34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	dc19      	bgt.n	8006c6e <_dtoa_r+0x916>
 8006c3a:	9b04      	ldr	r3, [sp, #16]
 8006c3c:	b9bb      	cbnz	r3, 8006c6e <_dtoa_r+0x916>
 8006c3e:	9b05      	ldr	r3, [sp, #20]
 8006c40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c44:	b99b      	cbnz	r3, 8006c6e <_dtoa_r+0x916>
 8006c46:	9b05      	ldr	r3, [sp, #20]
 8006c48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c4c:	0d1b      	lsrs	r3, r3, #20
 8006c4e:	051b      	lsls	r3, r3, #20
 8006c50:	b183      	cbz	r3, 8006c74 <_dtoa_r+0x91c>
 8006c52:	f04f 0801 	mov.w	r8, #1
 8006c56:	9b06      	ldr	r3, [sp, #24]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	9306      	str	r3, [sp, #24]
 8006c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c5e:	3301      	adds	r3, #1
 8006c60:	9309      	str	r3, [sp, #36]	; 0x24
 8006c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f47f af6a 	bne.w	8006b3e <_dtoa_r+0x7e6>
 8006c6a:	2001      	movs	r0, #1
 8006c6c:	e76f      	b.n	8006b4e <_dtoa_r+0x7f6>
 8006c6e:	f04f 0800 	mov.w	r8, #0
 8006c72:	e7f6      	b.n	8006c62 <_dtoa_r+0x90a>
 8006c74:	4698      	mov	r8, r3
 8006c76:	e7f4      	b.n	8006c62 <_dtoa_r+0x90a>
 8006c78:	f43f af7d 	beq.w	8006b76 <_dtoa_r+0x81e>
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	301c      	adds	r0, #28
 8006c80:	e772      	b.n	8006b68 <_dtoa_r+0x810>
 8006c82:	9b08      	ldr	r3, [sp, #32]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	dc36      	bgt.n	8006cf6 <_dtoa_r+0x99e>
 8006c88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	dd33      	ble.n	8006cf6 <_dtoa_r+0x99e>
 8006c8e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c92:	f1b9 0f00 	cmp.w	r9, #0
 8006c96:	d10d      	bne.n	8006cb4 <_dtoa_r+0x95c>
 8006c98:	4621      	mov	r1, r4
 8006c9a:	464b      	mov	r3, r9
 8006c9c:	2205      	movs	r2, #5
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f000 f9d2 	bl	8007048 <__multadd>
 8006ca4:	4601      	mov	r1, r0
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	4658      	mov	r0, fp
 8006caa:	f000 fbe9 	bl	8007480 <__mcmp>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	f73f adb8 	bgt.w	8006824 <_dtoa_r+0x4cc>
 8006cb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006cb6:	9f03      	ldr	r7, [sp, #12]
 8006cb8:	ea6f 0a03 	mvn.w	sl, r3
 8006cbc:	f04f 0800 	mov.w	r8, #0
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	f000 f99e 	bl	8007004 <_Bfree>
 8006cc8:	2e00      	cmp	r6, #0
 8006cca:	f43f aea7 	beq.w	8006a1c <_dtoa_r+0x6c4>
 8006cce:	f1b8 0f00 	cmp.w	r8, #0
 8006cd2:	d005      	beq.n	8006ce0 <_dtoa_r+0x988>
 8006cd4:	45b0      	cmp	r8, r6
 8006cd6:	d003      	beq.n	8006ce0 <_dtoa_r+0x988>
 8006cd8:	4641      	mov	r1, r8
 8006cda:	4628      	mov	r0, r5
 8006cdc:	f000 f992 	bl	8007004 <_Bfree>
 8006ce0:	4631      	mov	r1, r6
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	f000 f98e 	bl	8007004 <_Bfree>
 8006ce8:	e698      	b.n	8006a1c <_dtoa_r+0x6c4>
 8006cea:	2400      	movs	r4, #0
 8006cec:	4626      	mov	r6, r4
 8006cee:	e7e1      	b.n	8006cb4 <_dtoa_r+0x95c>
 8006cf0:	46c2      	mov	sl, r8
 8006cf2:	4626      	mov	r6, r4
 8006cf4:	e596      	b.n	8006824 <_dtoa_r+0x4cc>
 8006cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 80fd 	beq.w	8006efc <_dtoa_r+0xba4>
 8006d02:	2f00      	cmp	r7, #0
 8006d04:	dd05      	ble.n	8006d12 <_dtoa_r+0x9ba>
 8006d06:	4631      	mov	r1, r6
 8006d08:	463a      	mov	r2, r7
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	f000 fb48 	bl	80073a0 <__lshift>
 8006d10:	4606      	mov	r6, r0
 8006d12:	f1b8 0f00 	cmp.w	r8, #0
 8006d16:	d05c      	beq.n	8006dd2 <_dtoa_r+0xa7a>
 8006d18:	4628      	mov	r0, r5
 8006d1a:	6871      	ldr	r1, [r6, #4]
 8006d1c:	f000 f932 	bl	8006f84 <_Balloc>
 8006d20:	4607      	mov	r7, r0
 8006d22:	b928      	cbnz	r0, 8006d30 <_dtoa_r+0x9d8>
 8006d24:	4602      	mov	r2, r0
 8006d26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006d2a:	4b7f      	ldr	r3, [pc, #508]	; (8006f28 <_dtoa_r+0xbd0>)
 8006d2c:	f7ff bb28 	b.w	8006380 <_dtoa_r+0x28>
 8006d30:	6932      	ldr	r2, [r6, #16]
 8006d32:	f106 010c 	add.w	r1, r6, #12
 8006d36:	3202      	adds	r2, #2
 8006d38:	0092      	lsls	r2, r2, #2
 8006d3a:	300c      	adds	r0, #12
 8006d3c:	f000 f914 	bl	8006f68 <memcpy>
 8006d40:	2201      	movs	r2, #1
 8006d42:	4639      	mov	r1, r7
 8006d44:	4628      	mov	r0, r5
 8006d46:	f000 fb2b 	bl	80073a0 <__lshift>
 8006d4a:	46b0      	mov	r8, r6
 8006d4c:	4606      	mov	r6, r0
 8006d4e:	9b03      	ldr	r3, [sp, #12]
 8006d50:	3301      	adds	r3, #1
 8006d52:	9308      	str	r3, [sp, #32]
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	444b      	add	r3, r9
 8006d58:	930a      	str	r3, [sp, #40]	; 0x28
 8006d5a:	9b04      	ldr	r3, [sp, #16]
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	9309      	str	r3, [sp, #36]	; 0x24
 8006d62:	9b08      	ldr	r3, [sp, #32]
 8006d64:	4621      	mov	r1, r4
 8006d66:	3b01      	subs	r3, #1
 8006d68:	4658      	mov	r0, fp
 8006d6a:	9304      	str	r3, [sp, #16]
 8006d6c:	f7ff fa68 	bl	8006240 <quorem>
 8006d70:	4603      	mov	r3, r0
 8006d72:	4641      	mov	r1, r8
 8006d74:	3330      	adds	r3, #48	; 0x30
 8006d76:	9006      	str	r0, [sp, #24]
 8006d78:	4658      	mov	r0, fp
 8006d7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d7c:	f000 fb80 	bl	8007480 <__mcmp>
 8006d80:	4632      	mov	r2, r6
 8006d82:	4681      	mov	r9, r0
 8006d84:	4621      	mov	r1, r4
 8006d86:	4628      	mov	r0, r5
 8006d88:	f000 fb96 	bl	80074b8 <__mdiff>
 8006d8c:	68c2      	ldr	r2, [r0, #12]
 8006d8e:	4607      	mov	r7, r0
 8006d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d92:	bb02      	cbnz	r2, 8006dd6 <_dtoa_r+0xa7e>
 8006d94:	4601      	mov	r1, r0
 8006d96:	4658      	mov	r0, fp
 8006d98:	f000 fb72 	bl	8007480 <__mcmp>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006da0:	4639      	mov	r1, r7
 8006da2:	4628      	mov	r0, r5
 8006da4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006da8:	f000 f92c 	bl	8007004 <_Bfree>
 8006dac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006db0:	9f08      	ldr	r7, [sp, #32]
 8006db2:	ea43 0102 	orr.w	r1, r3, r2
 8006db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db8:	430b      	orrs	r3, r1
 8006dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dbc:	d10d      	bne.n	8006dda <_dtoa_r+0xa82>
 8006dbe:	2b39      	cmp	r3, #57	; 0x39
 8006dc0:	d029      	beq.n	8006e16 <_dtoa_r+0xabe>
 8006dc2:	f1b9 0f00 	cmp.w	r9, #0
 8006dc6:	dd01      	ble.n	8006dcc <_dtoa_r+0xa74>
 8006dc8:	9b06      	ldr	r3, [sp, #24]
 8006dca:	3331      	adds	r3, #49	; 0x31
 8006dcc:	9a04      	ldr	r2, [sp, #16]
 8006dce:	7013      	strb	r3, [r2, #0]
 8006dd0:	e776      	b.n	8006cc0 <_dtoa_r+0x968>
 8006dd2:	4630      	mov	r0, r6
 8006dd4:	e7b9      	b.n	8006d4a <_dtoa_r+0x9f2>
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	e7e2      	b.n	8006da0 <_dtoa_r+0xa48>
 8006dda:	f1b9 0f00 	cmp.w	r9, #0
 8006dde:	db06      	blt.n	8006dee <_dtoa_r+0xa96>
 8006de0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006de2:	ea41 0909 	orr.w	r9, r1, r9
 8006de6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006de8:	ea59 0101 	orrs.w	r1, r9, r1
 8006dec:	d120      	bne.n	8006e30 <_dtoa_r+0xad8>
 8006dee:	2a00      	cmp	r2, #0
 8006df0:	ddec      	ble.n	8006dcc <_dtoa_r+0xa74>
 8006df2:	4659      	mov	r1, fp
 8006df4:	2201      	movs	r2, #1
 8006df6:	4628      	mov	r0, r5
 8006df8:	9308      	str	r3, [sp, #32]
 8006dfa:	f000 fad1 	bl	80073a0 <__lshift>
 8006dfe:	4621      	mov	r1, r4
 8006e00:	4683      	mov	fp, r0
 8006e02:	f000 fb3d 	bl	8007480 <__mcmp>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	9b08      	ldr	r3, [sp, #32]
 8006e0a:	dc02      	bgt.n	8006e12 <_dtoa_r+0xaba>
 8006e0c:	d1de      	bne.n	8006dcc <_dtoa_r+0xa74>
 8006e0e:	07da      	lsls	r2, r3, #31
 8006e10:	d5dc      	bpl.n	8006dcc <_dtoa_r+0xa74>
 8006e12:	2b39      	cmp	r3, #57	; 0x39
 8006e14:	d1d8      	bne.n	8006dc8 <_dtoa_r+0xa70>
 8006e16:	2339      	movs	r3, #57	; 0x39
 8006e18:	9a04      	ldr	r2, [sp, #16]
 8006e1a:	7013      	strb	r3, [r2, #0]
 8006e1c:	463b      	mov	r3, r7
 8006e1e:	461f      	mov	r7, r3
 8006e20:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006e24:	3b01      	subs	r3, #1
 8006e26:	2a39      	cmp	r2, #57	; 0x39
 8006e28:	d050      	beq.n	8006ecc <_dtoa_r+0xb74>
 8006e2a:	3201      	adds	r2, #1
 8006e2c:	701a      	strb	r2, [r3, #0]
 8006e2e:	e747      	b.n	8006cc0 <_dtoa_r+0x968>
 8006e30:	2a00      	cmp	r2, #0
 8006e32:	dd03      	ble.n	8006e3c <_dtoa_r+0xae4>
 8006e34:	2b39      	cmp	r3, #57	; 0x39
 8006e36:	d0ee      	beq.n	8006e16 <_dtoa_r+0xabe>
 8006e38:	3301      	adds	r3, #1
 8006e3a:	e7c7      	b.n	8006dcc <_dtoa_r+0xa74>
 8006e3c:	9a08      	ldr	r2, [sp, #32]
 8006e3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006e40:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006e44:	428a      	cmp	r2, r1
 8006e46:	d02a      	beq.n	8006e9e <_dtoa_r+0xb46>
 8006e48:	4659      	mov	r1, fp
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	220a      	movs	r2, #10
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f000 f8fa 	bl	8007048 <__multadd>
 8006e54:	45b0      	cmp	r8, r6
 8006e56:	4683      	mov	fp, r0
 8006e58:	f04f 0300 	mov.w	r3, #0
 8006e5c:	f04f 020a 	mov.w	r2, #10
 8006e60:	4641      	mov	r1, r8
 8006e62:	4628      	mov	r0, r5
 8006e64:	d107      	bne.n	8006e76 <_dtoa_r+0xb1e>
 8006e66:	f000 f8ef 	bl	8007048 <__multadd>
 8006e6a:	4680      	mov	r8, r0
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	9b08      	ldr	r3, [sp, #32]
 8006e70:	3301      	adds	r3, #1
 8006e72:	9308      	str	r3, [sp, #32]
 8006e74:	e775      	b.n	8006d62 <_dtoa_r+0xa0a>
 8006e76:	f000 f8e7 	bl	8007048 <__multadd>
 8006e7a:	4631      	mov	r1, r6
 8006e7c:	4680      	mov	r8, r0
 8006e7e:	2300      	movs	r3, #0
 8006e80:	220a      	movs	r2, #10
 8006e82:	4628      	mov	r0, r5
 8006e84:	f000 f8e0 	bl	8007048 <__multadd>
 8006e88:	4606      	mov	r6, r0
 8006e8a:	e7f0      	b.n	8006e6e <_dtoa_r+0xb16>
 8006e8c:	f1b9 0f00 	cmp.w	r9, #0
 8006e90:	bfcc      	ite	gt
 8006e92:	464f      	movgt	r7, r9
 8006e94:	2701      	movle	r7, #1
 8006e96:	f04f 0800 	mov.w	r8, #0
 8006e9a:	9a03      	ldr	r2, [sp, #12]
 8006e9c:	4417      	add	r7, r2
 8006e9e:	4659      	mov	r1, fp
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	9308      	str	r3, [sp, #32]
 8006ea6:	f000 fa7b 	bl	80073a0 <__lshift>
 8006eaa:	4621      	mov	r1, r4
 8006eac:	4683      	mov	fp, r0
 8006eae:	f000 fae7 	bl	8007480 <__mcmp>
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	dcb2      	bgt.n	8006e1c <_dtoa_r+0xac4>
 8006eb6:	d102      	bne.n	8006ebe <_dtoa_r+0xb66>
 8006eb8:	9b08      	ldr	r3, [sp, #32]
 8006eba:	07db      	lsls	r3, r3, #31
 8006ebc:	d4ae      	bmi.n	8006e1c <_dtoa_r+0xac4>
 8006ebe:	463b      	mov	r3, r7
 8006ec0:	461f      	mov	r7, r3
 8006ec2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ec6:	2a30      	cmp	r2, #48	; 0x30
 8006ec8:	d0fa      	beq.n	8006ec0 <_dtoa_r+0xb68>
 8006eca:	e6f9      	b.n	8006cc0 <_dtoa_r+0x968>
 8006ecc:	9a03      	ldr	r2, [sp, #12]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d1a5      	bne.n	8006e1e <_dtoa_r+0xac6>
 8006ed2:	2331      	movs	r3, #49	; 0x31
 8006ed4:	f10a 0a01 	add.w	sl, sl, #1
 8006ed8:	e779      	b.n	8006dce <_dtoa_r+0xa76>
 8006eda:	4b14      	ldr	r3, [pc, #80]	; (8006f2c <_dtoa_r+0xbd4>)
 8006edc:	f7ff baa8 	b.w	8006430 <_dtoa_r+0xd8>
 8006ee0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f47f aa81 	bne.w	80063ea <_dtoa_r+0x92>
 8006ee8:	4b11      	ldr	r3, [pc, #68]	; (8006f30 <_dtoa_r+0xbd8>)
 8006eea:	f7ff baa1 	b.w	8006430 <_dtoa_r+0xd8>
 8006eee:	f1b9 0f00 	cmp.w	r9, #0
 8006ef2:	dc03      	bgt.n	8006efc <_dtoa_r+0xba4>
 8006ef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	f73f aecb 	bgt.w	8006c92 <_dtoa_r+0x93a>
 8006efc:	9f03      	ldr	r7, [sp, #12]
 8006efe:	4621      	mov	r1, r4
 8006f00:	4658      	mov	r0, fp
 8006f02:	f7ff f99d 	bl	8006240 <quorem>
 8006f06:	9a03      	ldr	r2, [sp, #12]
 8006f08:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006f0c:	f807 3b01 	strb.w	r3, [r7], #1
 8006f10:	1aba      	subs	r2, r7, r2
 8006f12:	4591      	cmp	r9, r2
 8006f14:	ddba      	ble.n	8006e8c <_dtoa_r+0xb34>
 8006f16:	4659      	mov	r1, fp
 8006f18:	2300      	movs	r3, #0
 8006f1a:	220a      	movs	r2, #10
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	f000 f893 	bl	8007048 <__multadd>
 8006f22:	4683      	mov	fp, r0
 8006f24:	e7eb      	b.n	8006efe <_dtoa_r+0xba6>
 8006f26:	bf00      	nop
 8006f28:	0800882f 	.word	0x0800882f
 8006f2c:	0800878c 	.word	0x0800878c
 8006f30:	080087b0 	.word	0x080087b0

08006f34 <_localeconv_r>:
 8006f34:	4800      	ldr	r0, [pc, #0]	; (8006f38 <_localeconv_r+0x4>)
 8006f36:	4770      	bx	lr
 8006f38:	20000180 	.word	0x20000180

08006f3c <malloc>:
 8006f3c:	4b02      	ldr	r3, [pc, #8]	; (8006f48 <malloc+0xc>)
 8006f3e:	4601      	mov	r1, r0
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	f000 bc1d 	b.w	8007780 <_malloc_r>
 8006f46:	bf00      	nop
 8006f48:	2000002c 	.word	0x2000002c

08006f4c <memchr>:
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	b510      	push	{r4, lr}
 8006f50:	b2c9      	uxtb	r1, r1
 8006f52:	4402      	add	r2, r0
 8006f54:	4293      	cmp	r3, r2
 8006f56:	4618      	mov	r0, r3
 8006f58:	d101      	bne.n	8006f5e <memchr+0x12>
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	e003      	b.n	8006f66 <memchr+0x1a>
 8006f5e:	7804      	ldrb	r4, [r0, #0]
 8006f60:	3301      	adds	r3, #1
 8006f62:	428c      	cmp	r4, r1
 8006f64:	d1f6      	bne.n	8006f54 <memchr+0x8>
 8006f66:	bd10      	pop	{r4, pc}

08006f68 <memcpy>:
 8006f68:	440a      	add	r2, r1
 8006f6a:	4291      	cmp	r1, r2
 8006f6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f70:	d100      	bne.n	8006f74 <memcpy+0xc>
 8006f72:	4770      	bx	lr
 8006f74:	b510      	push	{r4, lr}
 8006f76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f7a:	4291      	cmp	r1, r2
 8006f7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f80:	d1f9      	bne.n	8006f76 <memcpy+0xe>
 8006f82:	bd10      	pop	{r4, pc}

08006f84 <_Balloc>:
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f88:	4604      	mov	r4, r0
 8006f8a:	460d      	mov	r5, r1
 8006f8c:	b976      	cbnz	r6, 8006fac <_Balloc+0x28>
 8006f8e:	2010      	movs	r0, #16
 8006f90:	f7ff ffd4 	bl	8006f3c <malloc>
 8006f94:	4602      	mov	r2, r0
 8006f96:	6260      	str	r0, [r4, #36]	; 0x24
 8006f98:	b920      	cbnz	r0, 8006fa4 <_Balloc+0x20>
 8006f9a:	2166      	movs	r1, #102	; 0x66
 8006f9c:	4b17      	ldr	r3, [pc, #92]	; (8006ffc <_Balloc+0x78>)
 8006f9e:	4818      	ldr	r0, [pc, #96]	; (8007000 <_Balloc+0x7c>)
 8006fa0:	f000 fdce 	bl	8007b40 <__assert_func>
 8006fa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fa8:	6006      	str	r6, [r0, #0]
 8006faa:	60c6      	str	r6, [r0, #12]
 8006fac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006fae:	68f3      	ldr	r3, [r6, #12]
 8006fb0:	b183      	cbz	r3, 8006fd4 <_Balloc+0x50>
 8006fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006fba:	b9b8      	cbnz	r0, 8006fec <_Balloc+0x68>
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	fa01 f605 	lsl.w	r6, r1, r5
 8006fc2:	1d72      	adds	r2, r6, #5
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	0092      	lsls	r2, r2, #2
 8006fc8:	f000 fb5e 	bl	8007688 <_calloc_r>
 8006fcc:	b160      	cbz	r0, 8006fe8 <_Balloc+0x64>
 8006fce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006fd2:	e00e      	b.n	8006ff2 <_Balloc+0x6e>
 8006fd4:	2221      	movs	r2, #33	; 0x21
 8006fd6:	2104      	movs	r1, #4
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f000 fb55 	bl	8007688 <_calloc_r>
 8006fde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fe0:	60f0      	str	r0, [r6, #12]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1e4      	bne.n	8006fb2 <_Balloc+0x2e>
 8006fe8:	2000      	movs	r0, #0
 8006fea:	bd70      	pop	{r4, r5, r6, pc}
 8006fec:	6802      	ldr	r2, [r0, #0]
 8006fee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ff8:	e7f7      	b.n	8006fea <_Balloc+0x66>
 8006ffa:	bf00      	nop
 8006ffc:	080087bd 	.word	0x080087bd
 8007000:	08008840 	.word	0x08008840

08007004 <_Bfree>:
 8007004:	b570      	push	{r4, r5, r6, lr}
 8007006:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007008:	4605      	mov	r5, r0
 800700a:	460c      	mov	r4, r1
 800700c:	b976      	cbnz	r6, 800702c <_Bfree+0x28>
 800700e:	2010      	movs	r0, #16
 8007010:	f7ff ff94 	bl	8006f3c <malloc>
 8007014:	4602      	mov	r2, r0
 8007016:	6268      	str	r0, [r5, #36]	; 0x24
 8007018:	b920      	cbnz	r0, 8007024 <_Bfree+0x20>
 800701a:	218a      	movs	r1, #138	; 0x8a
 800701c:	4b08      	ldr	r3, [pc, #32]	; (8007040 <_Bfree+0x3c>)
 800701e:	4809      	ldr	r0, [pc, #36]	; (8007044 <_Bfree+0x40>)
 8007020:	f000 fd8e 	bl	8007b40 <__assert_func>
 8007024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007028:	6006      	str	r6, [r0, #0]
 800702a:	60c6      	str	r6, [r0, #12]
 800702c:	b13c      	cbz	r4, 800703e <_Bfree+0x3a>
 800702e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007030:	6862      	ldr	r2, [r4, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007038:	6021      	str	r1, [r4, #0]
 800703a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800703e:	bd70      	pop	{r4, r5, r6, pc}
 8007040:	080087bd 	.word	0x080087bd
 8007044:	08008840 	.word	0x08008840

08007048 <__multadd>:
 8007048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800704c:	4607      	mov	r7, r0
 800704e:	460c      	mov	r4, r1
 8007050:	461e      	mov	r6, r3
 8007052:	2000      	movs	r0, #0
 8007054:	690d      	ldr	r5, [r1, #16]
 8007056:	f101 0c14 	add.w	ip, r1, #20
 800705a:	f8dc 3000 	ldr.w	r3, [ip]
 800705e:	3001      	adds	r0, #1
 8007060:	b299      	uxth	r1, r3
 8007062:	fb02 6101 	mla	r1, r2, r1, r6
 8007066:	0c1e      	lsrs	r6, r3, #16
 8007068:	0c0b      	lsrs	r3, r1, #16
 800706a:	fb02 3306 	mla	r3, r2, r6, r3
 800706e:	b289      	uxth	r1, r1
 8007070:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007074:	4285      	cmp	r5, r0
 8007076:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800707a:	f84c 1b04 	str.w	r1, [ip], #4
 800707e:	dcec      	bgt.n	800705a <__multadd+0x12>
 8007080:	b30e      	cbz	r6, 80070c6 <__multadd+0x7e>
 8007082:	68a3      	ldr	r3, [r4, #8]
 8007084:	42ab      	cmp	r3, r5
 8007086:	dc19      	bgt.n	80070bc <__multadd+0x74>
 8007088:	6861      	ldr	r1, [r4, #4]
 800708a:	4638      	mov	r0, r7
 800708c:	3101      	adds	r1, #1
 800708e:	f7ff ff79 	bl	8006f84 <_Balloc>
 8007092:	4680      	mov	r8, r0
 8007094:	b928      	cbnz	r0, 80070a2 <__multadd+0x5a>
 8007096:	4602      	mov	r2, r0
 8007098:	21b5      	movs	r1, #181	; 0xb5
 800709a:	4b0c      	ldr	r3, [pc, #48]	; (80070cc <__multadd+0x84>)
 800709c:	480c      	ldr	r0, [pc, #48]	; (80070d0 <__multadd+0x88>)
 800709e:	f000 fd4f 	bl	8007b40 <__assert_func>
 80070a2:	6922      	ldr	r2, [r4, #16]
 80070a4:	f104 010c 	add.w	r1, r4, #12
 80070a8:	3202      	adds	r2, #2
 80070aa:	0092      	lsls	r2, r2, #2
 80070ac:	300c      	adds	r0, #12
 80070ae:	f7ff ff5b 	bl	8006f68 <memcpy>
 80070b2:	4621      	mov	r1, r4
 80070b4:	4638      	mov	r0, r7
 80070b6:	f7ff ffa5 	bl	8007004 <_Bfree>
 80070ba:	4644      	mov	r4, r8
 80070bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80070c0:	3501      	adds	r5, #1
 80070c2:	615e      	str	r6, [r3, #20]
 80070c4:	6125      	str	r5, [r4, #16]
 80070c6:	4620      	mov	r0, r4
 80070c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070cc:	0800882f 	.word	0x0800882f
 80070d0:	08008840 	.word	0x08008840

080070d4 <__hi0bits>:
 80070d4:	0c02      	lsrs	r2, r0, #16
 80070d6:	0412      	lsls	r2, r2, #16
 80070d8:	4603      	mov	r3, r0
 80070da:	b9ca      	cbnz	r2, 8007110 <__hi0bits+0x3c>
 80070dc:	0403      	lsls	r3, r0, #16
 80070de:	2010      	movs	r0, #16
 80070e0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80070e4:	bf04      	itt	eq
 80070e6:	021b      	lsleq	r3, r3, #8
 80070e8:	3008      	addeq	r0, #8
 80070ea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80070ee:	bf04      	itt	eq
 80070f0:	011b      	lsleq	r3, r3, #4
 80070f2:	3004      	addeq	r0, #4
 80070f4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80070f8:	bf04      	itt	eq
 80070fa:	009b      	lsleq	r3, r3, #2
 80070fc:	3002      	addeq	r0, #2
 80070fe:	2b00      	cmp	r3, #0
 8007100:	db05      	blt.n	800710e <__hi0bits+0x3a>
 8007102:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007106:	f100 0001 	add.w	r0, r0, #1
 800710a:	bf08      	it	eq
 800710c:	2020      	moveq	r0, #32
 800710e:	4770      	bx	lr
 8007110:	2000      	movs	r0, #0
 8007112:	e7e5      	b.n	80070e0 <__hi0bits+0xc>

08007114 <__lo0bits>:
 8007114:	6803      	ldr	r3, [r0, #0]
 8007116:	4602      	mov	r2, r0
 8007118:	f013 0007 	ands.w	r0, r3, #7
 800711c:	d00b      	beq.n	8007136 <__lo0bits+0x22>
 800711e:	07d9      	lsls	r1, r3, #31
 8007120:	d421      	bmi.n	8007166 <__lo0bits+0x52>
 8007122:	0798      	lsls	r0, r3, #30
 8007124:	bf49      	itett	mi
 8007126:	085b      	lsrmi	r3, r3, #1
 8007128:	089b      	lsrpl	r3, r3, #2
 800712a:	2001      	movmi	r0, #1
 800712c:	6013      	strmi	r3, [r2, #0]
 800712e:	bf5c      	itt	pl
 8007130:	2002      	movpl	r0, #2
 8007132:	6013      	strpl	r3, [r2, #0]
 8007134:	4770      	bx	lr
 8007136:	b299      	uxth	r1, r3
 8007138:	b909      	cbnz	r1, 800713e <__lo0bits+0x2a>
 800713a:	2010      	movs	r0, #16
 800713c:	0c1b      	lsrs	r3, r3, #16
 800713e:	b2d9      	uxtb	r1, r3
 8007140:	b909      	cbnz	r1, 8007146 <__lo0bits+0x32>
 8007142:	3008      	adds	r0, #8
 8007144:	0a1b      	lsrs	r3, r3, #8
 8007146:	0719      	lsls	r1, r3, #28
 8007148:	bf04      	itt	eq
 800714a:	091b      	lsreq	r3, r3, #4
 800714c:	3004      	addeq	r0, #4
 800714e:	0799      	lsls	r1, r3, #30
 8007150:	bf04      	itt	eq
 8007152:	089b      	lsreq	r3, r3, #2
 8007154:	3002      	addeq	r0, #2
 8007156:	07d9      	lsls	r1, r3, #31
 8007158:	d403      	bmi.n	8007162 <__lo0bits+0x4e>
 800715a:	085b      	lsrs	r3, r3, #1
 800715c:	f100 0001 	add.w	r0, r0, #1
 8007160:	d003      	beq.n	800716a <__lo0bits+0x56>
 8007162:	6013      	str	r3, [r2, #0]
 8007164:	4770      	bx	lr
 8007166:	2000      	movs	r0, #0
 8007168:	4770      	bx	lr
 800716a:	2020      	movs	r0, #32
 800716c:	4770      	bx	lr
	...

08007170 <__i2b>:
 8007170:	b510      	push	{r4, lr}
 8007172:	460c      	mov	r4, r1
 8007174:	2101      	movs	r1, #1
 8007176:	f7ff ff05 	bl	8006f84 <_Balloc>
 800717a:	4602      	mov	r2, r0
 800717c:	b928      	cbnz	r0, 800718a <__i2b+0x1a>
 800717e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007182:	4b04      	ldr	r3, [pc, #16]	; (8007194 <__i2b+0x24>)
 8007184:	4804      	ldr	r0, [pc, #16]	; (8007198 <__i2b+0x28>)
 8007186:	f000 fcdb 	bl	8007b40 <__assert_func>
 800718a:	2301      	movs	r3, #1
 800718c:	6144      	str	r4, [r0, #20]
 800718e:	6103      	str	r3, [r0, #16]
 8007190:	bd10      	pop	{r4, pc}
 8007192:	bf00      	nop
 8007194:	0800882f 	.word	0x0800882f
 8007198:	08008840 	.word	0x08008840

0800719c <__multiply>:
 800719c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a0:	4691      	mov	r9, r2
 80071a2:	690a      	ldr	r2, [r1, #16]
 80071a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071a8:	460c      	mov	r4, r1
 80071aa:	429a      	cmp	r2, r3
 80071ac:	bfbe      	ittt	lt
 80071ae:	460b      	movlt	r3, r1
 80071b0:	464c      	movlt	r4, r9
 80071b2:	4699      	movlt	r9, r3
 80071b4:	6927      	ldr	r7, [r4, #16]
 80071b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80071ba:	68a3      	ldr	r3, [r4, #8]
 80071bc:	6861      	ldr	r1, [r4, #4]
 80071be:	eb07 060a 	add.w	r6, r7, sl
 80071c2:	42b3      	cmp	r3, r6
 80071c4:	b085      	sub	sp, #20
 80071c6:	bfb8      	it	lt
 80071c8:	3101      	addlt	r1, #1
 80071ca:	f7ff fedb 	bl	8006f84 <_Balloc>
 80071ce:	b930      	cbnz	r0, 80071de <__multiply+0x42>
 80071d0:	4602      	mov	r2, r0
 80071d2:	f240 115d 	movw	r1, #349	; 0x15d
 80071d6:	4b43      	ldr	r3, [pc, #268]	; (80072e4 <__multiply+0x148>)
 80071d8:	4843      	ldr	r0, [pc, #268]	; (80072e8 <__multiply+0x14c>)
 80071da:	f000 fcb1 	bl	8007b40 <__assert_func>
 80071de:	f100 0514 	add.w	r5, r0, #20
 80071e2:	462b      	mov	r3, r5
 80071e4:	2200      	movs	r2, #0
 80071e6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071ea:	4543      	cmp	r3, r8
 80071ec:	d321      	bcc.n	8007232 <__multiply+0x96>
 80071ee:	f104 0314 	add.w	r3, r4, #20
 80071f2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071f6:	f109 0314 	add.w	r3, r9, #20
 80071fa:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071fe:	9202      	str	r2, [sp, #8]
 8007200:	1b3a      	subs	r2, r7, r4
 8007202:	3a15      	subs	r2, #21
 8007204:	f022 0203 	bic.w	r2, r2, #3
 8007208:	3204      	adds	r2, #4
 800720a:	f104 0115 	add.w	r1, r4, #21
 800720e:	428f      	cmp	r7, r1
 8007210:	bf38      	it	cc
 8007212:	2204      	movcc	r2, #4
 8007214:	9201      	str	r2, [sp, #4]
 8007216:	9a02      	ldr	r2, [sp, #8]
 8007218:	9303      	str	r3, [sp, #12]
 800721a:	429a      	cmp	r2, r3
 800721c:	d80c      	bhi.n	8007238 <__multiply+0x9c>
 800721e:	2e00      	cmp	r6, #0
 8007220:	dd03      	ble.n	800722a <__multiply+0x8e>
 8007222:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007226:	2b00      	cmp	r3, #0
 8007228:	d059      	beq.n	80072de <__multiply+0x142>
 800722a:	6106      	str	r6, [r0, #16]
 800722c:	b005      	add	sp, #20
 800722e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007232:	f843 2b04 	str.w	r2, [r3], #4
 8007236:	e7d8      	b.n	80071ea <__multiply+0x4e>
 8007238:	f8b3 a000 	ldrh.w	sl, [r3]
 800723c:	f1ba 0f00 	cmp.w	sl, #0
 8007240:	d023      	beq.n	800728a <__multiply+0xee>
 8007242:	46a9      	mov	r9, r5
 8007244:	f04f 0c00 	mov.w	ip, #0
 8007248:	f104 0e14 	add.w	lr, r4, #20
 800724c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007250:	f8d9 1000 	ldr.w	r1, [r9]
 8007254:	fa1f fb82 	uxth.w	fp, r2
 8007258:	b289      	uxth	r1, r1
 800725a:	fb0a 110b 	mla	r1, sl, fp, r1
 800725e:	4461      	add	r1, ip
 8007260:	f8d9 c000 	ldr.w	ip, [r9]
 8007264:	0c12      	lsrs	r2, r2, #16
 8007266:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800726a:	fb0a c202 	mla	r2, sl, r2, ip
 800726e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007272:	b289      	uxth	r1, r1
 8007274:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007278:	4577      	cmp	r7, lr
 800727a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800727e:	f849 1b04 	str.w	r1, [r9], #4
 8007282:	d8e3      	bhi.n	800724c <__multiply+0xb0>
 8007284:	9a01      	ldr	r2, [sp, #4]
 8007286:	f845 c002 	str.w	ip, [r5, r2]
 800728a:	9a03      	ldr	r2, [sp, #12]
 800728c:	3304      	adds	r3, #4
 800728e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007292:	f1b9 0f00 	cmp.w	r9, #0
 8007296:	d020      	beq.n	80072da <__multiply+0x13e>
 8007298:	46ae      	mov	lr, r5
 800729a:	f04f 0a00 	mov.w	sl, #0
 800729e:	6829      	ldr	r1, [r5, #0]
 80072a0:	f104 0c14 	add.w	ip, r4, #20
 80072a4:	f8bc b000 	ldrh.w	fp, [ip]
 80072a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80072ac:	b289      	uxth	r1, r1
 80072ae:	fb09 220b 	mla	r2, r9, fp, r2
 80072b2:	4492      	add	sl, r2
 80072b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80072b8:	f84e 1b04 	str.w	r1, [lr], #4
 80072bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80072c0:	f8be 1000 	ldrh.w	r1, [lr]
 80072c4:	0c12      	lsrs	r2, r2, #16
 80072c6:	fb09 1102 	mla	r1, r9, r2, r1
 80072ca:	4567      	cmp	r7, ip
 80072cc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80072d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072d4:	d8e6      	bhi.n	80072a4 <__multiply+0x108>
 80072d6:	9a01      	ldr	r2, [sp, #4]
 80072d8:	50a9      	str	r1, [r5, r2]
 80072da:	3504      	adds	r5, #4
 80072dc:	e79b      	b.n	8007216 <__multiply+0x7a>
 80072de:	3e01      	subs	r6, #1
 80072e0:	e79d      	b.n	800721e <__multiply+0x82>
 80072e2:	bf00      	nop
 80072e4:	0800882f 	.word	0x0800882f
 80072e8:	08008840 	.word	0x08008840

080072ec <__pow5mult>:
 80072ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072f0:	4615      	mov	r5, r2
 80072f2:	f012 0203 	ands.w	r2, r2, #3
 80072f6:	4606      	mov	r6, r0
 80072f8:	460f      	mov	r7, r1
 80072fa:	d007      	beq.n	800730c <__pow5mult+0x20>
 80072fc:	4c25      	ldr	r4, [pc, #148]	; (8007394 <__pow5mult+0xa8>)
 80072fe:	3a01      	subs	r2, #1
 8007300:	2300      	movs	r3, #0
 8007302:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007306:	f7ff fe9f 	bl	8007048 <__multadd>
 800730a:	4607      	mov	r7, r0
 800730c:	10ad      	asrs	r5, r5, #2
 800730e:	d03d      	beq.n	800738c <__pow5mult+0xa0>
 8007310:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007312:	b97c      	cbnz	r4, 8007334 <__pow5mult+0x48>
 8007314:	2010      	movs	r0, #16
 8007316:	f7ff fe11 	bl	8006f3c <malloc>
 800731a:	4602      	mov	r2, r0
 800731c:	6270      	str	r0, [r6, #36]	; 0x24
 800731e:	b928      	cbnz	r0, 800732c <__pow5mult+0x40>
 8007320:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007324:	4b1c      	ldr	r3, [pc, #112]	; (8007398 <__pow5mult+0xac>)
 8007326:	481d      	ldr	r0, [pc, #116]	; (800739c <__pow5mult+0xb0>)
 8007328:	f000 fc0a 	bl	8007b40 <__assert_func>
 800732c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007330:	6004      	str	r4, [r0, #0]
 8007332:	60c4      	str	r4, [r0, #12]
 8007334:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007338:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800733c:	b94c      	cbnz	r4, 8007352 <__pow5mult+0x66>
 800733e:	f240 2171 	movw	r1, #625	; 0x271
 8007342:	4630      	mov	r0, r6
 8007344:	f7ff ff14 	bl	8007170 <__i2b>
 8007348:	2300      	movs	r3, #0
 800734a:	4604      	mov	r4, r0
 800734c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007350:	6003      	str	r3, [r0, #0]
 8007352:	f04f 0900 	mov.w	r9, #0
 8007356:	07eb      	lsls	r3, r5, #31
 8007358:	d50a      	bpl.n	8007370 <__pow5mult+0x84>
 800735a:	4639      	mov	r1, r7
 800735c:	4622      	mov	r2, r4
 800735e:	4630      	mov	r0, r6
 8007360:	f7ff ff1c 	bl	800719c <__multiply>
 8007364:	4680      	mov	r8, r0
 8007366:	4639      	mov	r1, r7
 8007368:	4630      	mov	r0, r6
 800736a:	f7ff fe4b 	bl	8007004 <_Bfree>
 800736e:	4647      	mov	r7, r8
 8007370:	106d      	asrs	r5, r5, #1
 8007372:	d00b      	beq.n	800738c <__pow5mult+0xa0>
 8007374:	6820      	ldr	r0, [r4, #0]
 8007376:	b938      	cbnz	r0, 8007388 <__pow5mult+0x9c>
 8007378:	4622      	mov	r2, r4
 800737a:	4621      	mov	r1, r4
 800737c:	4630      	mov	r0, r6
 800737e:	f7ff ff0d 	bl	800719c <__multiply>
 8007382:	6020      	str	r0, [r4, #0]
 8007384:	f8c0 9000 	str.w	r9, [r0]
 8007388:	4604      	mov	r4, r0
 800738a:	e7e4      	b.n	8007356 <__pow5mult+0x6a>
 800738c:	4638      	mov	r0, r7
 800738e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007392:	bf00      	nop
 8007394:	08008990 	.word	0x08008990
 8007398:	080087bd 	.word	0x080087bd
 800739c:	08008840 	.word	0x08008840

080073a0 <__lshift>:
 80073a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a4:	460c      	mov	r4, r1
 80073a6:	4607      	mov	r7, r0
 80073a8:	4691      	mov	r9, r2
 80073aa:	6923      	ldr	r3, [r4, #16]
 80073ac:	6849      	ldr	r1, [r1, #4]
 80073ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073b2:	68a3      	ldr	r3, [r4, #8]
 80073b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073b8:	f108 0601 	add.w	r6, r8, #1
 80073bc:	42b3      	cmp	r3, r6
 80073be:	db0b      	blt.n	80073d8 <__lshift+0x38>
 80073c0:	4638      	mov	r0, r7
 80073c2:	f7ff fddf 	bl	8006f84 <_Balloc>
 80073c6:	4605      	mov	r5, r0
 80073c8:	b948      	cbnz	r0, 80073de <__lshift+0x3e>
 80073ca:	4602      	mov	r2, r0
 80073cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80073d0:	4b29      	ldr	r3, [pc, #164]	; (8007478 <__lshift+0xd8>)
 80073d2:	482a      	ldr	r0, [pc, #168]	; (800747c <__lshift+0xdc>)
 80073d4:	f000 fbb4 	bl	8007b40 <__assert_func>
 80073d8:	3101      	adds	r1, #1
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	e7ee      	b.n	80073bc <__lshift+0x1c>
 80073de:	2300      	movs	r3, #0
 80073e0:	f100 0114 	add.w	r1, r0, #20
 80073e4:	f100 0210 	add.w	r2, r0, #16
 80073e8:	4618      	mov	r0, r3
 80073ea:	4553      	cmp	r3, sl
 80073ec:	db37      	blt.n	800745e <__lshift+0xbe>
 80073ee:	6920      	ldr	r0, [r4, #16]
 80073f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073f4:	f104 0314 	add.w	r3, r4, #20
 80073f8:	f019 091f 	ands.w	r9, r9, #31
 80073fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007400:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007404:	d02f      	beq.n	8007466 <__lshift+0xc6>
 8007406:	468a      	mov	sl, r1
 8007408:	f04f 0c00 	mov.w	ip, #0
 800740c:	f1c9 0e20 	rsb	lr, r9, #32
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	fa02 f209 	lsl.w	r2, r2, r9
 8007416:	ea42 020c 	orr.w	r2, r2, ip
 800741a:	f84a 2b04 	str.w	r2, [sl], #4
 800741e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007422:	4298      	cmp	r0, r3
 8007424:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007428:	d8f2      	bhi.n	8007410 <__lshift+0x70>
 800742a:	1b03      	subs	r3, r0, r4
 800742c:	3b15      	subs	r3, #21
 800742e:	f023 0303 	bic.w	r3, r3, #3
 8007432:	3304      	adds	r3, #4
 8007434:	f104 0215 	add.w	r2, r4, #21
 8007438:	4290      	cmp	r0, r2
 800743a:	bf38      	it	cc
 800743c:	2304      	movcc	r3, #4
 800743e:	f841 c003 	str.w	ip, [r1, r3]
 8007442:	f1bc 0f00 	cmp.w	ip, #0
 8007446:	d001      	beq.n	800744c <__lshift+0xac>
 8007448:	f108 0602 	add.w	r6, r8, #2
 800744c:	3e01      	subs	r6, #1
 800744e:	4638      	mov	r0, r7
 8007450:	4621      	mov	r1, r4
 8007452:	612e      	str	r6, [r5, #16]
 8007454:	f7ff fdd6 	bl	8007004 <_Bfree>
 8007458:	4628      	mov	r0, r5
 800745a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800745e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007462:	3301      	adds	r3, #1
 8007464:	e7c1      	b.n	80073ea <__lshift+0x4a>
 8007466:	3904      	subs	r1, #4
 8007468:	f853 2b04 	ldr.w	r2, [r3], #4
 800746c:	4298      	cmp	r0, r3
 800746e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007472:	d8f9      	bhi.n	8007468 <__lshift+0xc8>
 8007474:	e7ea      	b.n	800744c <__lshift+0xac>
 8007476:	bf00      	nop
 8007478:	0800882f 	.word	0x0800882f
 800747c:	08008840 	.word	0x08008840

08007480 <__mcmp>:
 8007480:	4603      	mov	r3, r0
 8007482:	690a      	ldr	r2, [r1, #16]
 8007484:	6900      	ldr	r0, [r0, #16]
 8007486:	b530      	push	{r4, r5, lr}
 8007488:	1a80      	subs	r0, r0, r2
 800748a:	d10d      	bne.n	80074a8 <__mcmp+0x28>
 800748c:	3314      	adds	r3, #20
 800748e:	3114      	adds	r1, #20
 8007490:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007494:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007498:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800749c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80074a0:	4295      	cmp	r5, r2
 80074a2:	d002      	beq.n	80074aa <__mcmp+0x2a>
 80074a4:	d304      	bcc.n	80074b0 <__mcmp+0x30>
 80074a6:	2001      	movs	r0, #1
 80074a8:	bd30      	pop	{r4, r5, pc}
 80074aa:	42a3      	cmp	r3, r4
 80074ac:	d3f4      	bcc.n	8007498 <__mcmp+0x18>
 80074ae:	e7fb      	b.n	80074a8 <__mcmp+0x28>
 80074b0:	f04f 30ff 	mov.w	r0, #4294967295
 80074b4:	e7f8      	b.n	80074a8 <__mcmp+0x28>
	...

080074b8 <__mdiff>:
 80074b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	460d      	mov	r5, r1
 80074be:	4607      	mov	r7, r0
 80074c0:	4611      	mov	r1, r2
 80074c2:	4628      	mov	r0, r5
 80074c4:	4614      	mov	r4, r2
 80074c6:	f7ff ffdb 	bl	8007480 <__mcmp>
 80074ca:	1e06      	subs	r6, r0, #0
 80074cc:	d111      	bne.n	80074f2 <__mdiff+0x3a>
 80074ce:	4631      	mov	r1, r6
 80074d0:	4638      	mov	r0, r7
 80074d2:	f7ff fd57 	bl	8006f84 <_Balloc>
 80074d6:	4602      	mov	r2, r0
 80074d8:	b928      	cbnz	r0, 80074e6 <__mdiff+0x2e>
 80074da:	f240 2132 	movw	r1, #562	; 0x232
 80074de:	4b3a      	ldr	r3, [pc, #232]	; (80075c8 <__mdiff+0x110>)
 80074e0:	483a      	ldr	r0, [pc, #232]	; (80075cc <__mdiff+0x114>)
 80074e2:	f000 fb2d 	bl	8007b40 <__assert_func>
 80074e6:	2301      	movs	r3, #1
 80074e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80074ec:	4610      	mov	r0, r2
 80074ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f2:	bfa4      	itt	ge
 80074f4:	4623      	movge	r3, r4
 80074f6:	462c      	movge	r4, r5
 80074f8:	4638      	mov	r0, r7
 80074fa:	6861      	ldr	r1, [r4, #4]
 80074fc:	bfa6      	itte	ge
 80074fe:	461d      	movge	r5, r3
 8007500:	2600      	movge	r6, #0
 8007502:	2601      	movlt	r6, #1
 8007504:	f7ff fd3e 	bl	8006f84 <_Balloc>
 8007508:	4602      	mov	r2, r0
 800750a:	b918      	cbnz	r0, 8007514 <__mdiff+0x5c>
 800750c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007510:	4b2d      	ldr	r3, [pc, #180]	; (80075c8 <__mdiff+0x110>)
 8007512:	e7e5      	b.n	80074e0 <__mdiff+0x28>
 8007514:	f102 0814 	add.w	r8, r2, #20
 8007518:	46c2      	mov	sl, r8
 800751a:	f04f 0c00 	mov.w	ip, #0
 800751e:	6927      	ldr	r7, [r4, #16]
 8007520:	60c6      	str	r6, [r0, #12]
 8007522:	692e      	ldr	r6, [r5, #16]
 8007524:	f104 0014 	add.w	r0, r4, #20
 8007528:	f105 0914 	add.w	r9, r5, #20
 800752c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007530:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007534:	3410      	adds	r4, #16
 8007536:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800753a:	f859 3b04 	ldr.w	r3, [r9], #4
 800753e:	fa1f f18b 	uxth.w	r1, fp
 8007542:	448c      	add	ip, r1
 8007544:	b299      	uxth	r1, r3
 8007546:	0c1b      	lsrs	r3, r3, #16
 8007548:	ebac 0101 	sub.w	r1, ip, r1
 800754c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007550:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007554:	b289      	uxth	r1, r1
 8007556:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800755a:	454e      	cmp	r6, r9
 800755c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007560:	f84a 3b04 	str.w	r3, [sl], #4
 8007564:	d8e7      	bhi.n	8007536 <__mdiff+0x7e>
 8007566:	1b73      	subs	r3, r6, r5
 8007568:	3b15      	subs	r3, #21
 800756a:	f023 0303 	bic.w	r3, r3, #3
 800756e:	3515      	adds	r5, #21
 8007570:	3304      	adds	r3, #4
 8007572:	42ae      	cmp	r6, r5
 8007574:	bf38      	it	cc
 8007576:	2304      	movcc	r3, #4
 8007578:	4418      	add	r0, r3
 800757a:	4443      	add	r3, r8
 800757c:	461e      	mov	r6, r3
 800757e:	4605      	mov	r5, r0
 8007580:	4575      	cmp	r5, lr
 8007582:	d30e      	bcc.n	80075a2 <__mdiff+0xea>
 8007584:	f10e 0103 	add.w	r1, lr, #3
 8007588:	1a09      	subs	r1, r1, r0
 800758a:	f021 0103 	bic.w	r1, r1, #3
 800758e:	3803      	subs	r0, #3
 8007590:	4586      	cmp	lr, r0
 8007592:	bf38      	it	cc
 8007594:	2100      	movcc	r1, #0
 8007596:	4419      	add	r1, r3
 8007598:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800759c:	b18b      	cbz	r3, 80075c2 <__mdiff+0x10a>
 800759e:	6117      	str	r7, [r2, #16]
 80075a0:	e7a4      	b.n	80074ec <__mdiff+0x34>
 80075a2:	f855 8b04 	ldr.w	r8, [r5], #4
 80075a6:	fa1f f188 	uxth.w	r1, r8
 80075aa:	4461      	add	r1, ip
 80075ac:	140c      	asrs	r4, r1, #16
 80075ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80075b2:	b289      	uxth	r1, r1
 80075b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80075b8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80075bc:	f846 1b04 	str.w	r1, [r6], #4
 80075c0:	e7de      	b.n	8007580 <__mdiff+0xc8>
 80075c2:	3f01      	subs	r7, #1
 80075c4:	e7e8      	b.n	8007598 <__mdiff+0xe0>
 80075c6:	bf00      	nop
 80075c8:	0800882f 	.word	0x0800882f
 80075cc:	08008840 	.word	0x08008840

080075d0 <__d2b>:
 80075d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80075d4:	2101      	movs	r1, #1
 80075d6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80075da:	4690      	mov	r8, r2
 80075dc:	461d      	mov	r5, r3
 80075de:	f7ff fcd1 	bl	8006f84 <_Balloc>
 80075e2:	4604      	mov	r4, r0
 80075e4:	b930      	cbnz	r0, 80075f4 <__d2b+0x24>
 80075e6:	4602      	mov	r2, r0
 80075e8:	f240 310a 	movw	r1, #778	; 0x30a
 80075ec:	4b24      	ldr	r3, [pc, #144]	; (8007680 <__d2b+0xb0>)
 80075ee:	4825      	ldr	r0, [pc, #148]	; (8007684 <__d2b+0xb4>)
 80075f0:	f000 faa6 	bl	8007b40 <__assert_func>
 80075f4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80075f8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80075fc:	bb2d      	cbnz	r5, 800764a <__d2b+0x7a>
 80075fe:	9301      	str	r3, [sp, #4]
 8007600:	f1b8 0300 	subs.w	r3, r8, #0
 8007604:	d026      	beq.n	8007654 <__d2b+0x84>
 8007606:	4668      	mov	r0, sp
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	f7ff fd83 	bl	8007114 <__lo0bits>
 800760e:	9900      	ldr	r1, [sp, #0]
 8007610:	b1f0      	cbz	r0, 8007650 <__d2b+0x80>
 8007612:	9a01      	ldr	r2, [sp, #4]
 8007614:	f1c0 0320 	rsb	r3, r0, #32
 8007618:	fa02 f303 	lsl.w	r3, r2, r3
 800761c:	430b      	orrs	r3, r1
 800761e:	40c2      	lsrs	r2, r0
 8007620:	6163      	str	r3, [r4, #20]
 8007622:	9201      	str	r2, [sp, #4]
 8007624:	9b01      	ldr	r3, [sp, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	bf14      	ite	ne
 800762a:	2102      	movne	r1, #2
 800762c:	2101      	moveq	r1, #1
 800762e:	61a3      	str	r3, [r4, #24]
 8007630:	6121      	str	r1, [r4, #16]
 8007632:	b1c5      	cbz	r5, 8007666 <__d2b+0x96>
 8007634:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007638:	4405      	add	r5, r0
 800763a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800763e:	603d      	str	r5, [r7, #0]
 8007640:	6030      	str	r0, [r6, #0]
 8007642:	4620      	mov	r0, r4
 8007644:	b002      	add	sp, #8
 8007646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800764a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800764e:	e7d6      	b.n	80075fe <__d2b+0x2e>
 8007650:	6161      	str	r1, [r4, #20]
 8007652:	e7e7      	b.n	8007624 <__d2b+0x54>
 8007654:	a801      	add	r0, sp, #4
 8007656:	f7ff fd5d 	bl	8007114 <__lo0bits>
 800765a:	2101      	movs	r1, #1
 800765c:	9b01      	ldr	r3, [sp, #4]
 800765e:	6121      	str	r1, [r4, #16]
 8007660:	6163      	str	r3, [r4, #20]
 8007662:	3020      	adds	r0, #32
 8007664:	e7e5      	b.n	8007632 <__d2b+0x62>
 8007666:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800766a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800766e:	6038      	str	r0, [r7, #0]
 8007670:	6918      	ldr	r0, [r3, #16]
 8007672:	f7ff fd2f 	bl	80070d4 <__hi0bits>
 8007676:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800767a:	6031      	str	r1, [r6, #0]
 800767c:	e7e1      	b.n	8007642 <__d2b+0x72>
 800767e:	bf00      	nop
 8007680:	0800882f 	.word	0x0800882f
 8007684:	08008840 	.word	0x08008840

08007688 <_calloc_r>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	fba1 5402 	umull	r5, r4, r1, r2
 800768e:	b934      	cbnz	r4, 800769e <_calloc_r+0x16>
 8007690:	4629      	mov	r1, r5
 8007692:	f000 f875 	bl	8007780 <_malloc_r>
 8007696:	4606      	mov	r6, r0
 8007698:	b928      	cbnz	r0, 80076a6 <_calloc_r+0x1e>
 800769a:	4630      	mov	r0, r6
 800769c:	bd70      	pop	{r4, r5, r6, pc}
 800769e:	220c      	movs	r2, #12
 80076a0:	2600      	movs	r6, #0
 80076a2:	6002      	str	r2, [r0, #0]
 80076a4:	e7f9      	b.n	800769a <_calloc_r+0x12>
 80076a6:	462a      	mov	r2, r5
 80076a8:	4621      	mov	r1, r4
 80076aa:	f7fe f91f 	bl	80058ec <memset>
 80076ae:	e7f4      	b.n	800769a <_calloc_r+0x12>

080076b0 <_free_r>:
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	4605      	mov	r5, r0
 80076b4:	2900      	cmp	r1, #0
 80076b6:	d040      	beq.n	800773a <_free_r+0x8a>
 80076b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076bc:	1f0c      	subs	r4, r1, #4
 80076be:	2b00      	cmp	r3, #0
 80076c0:	bfb8      	it	lt
 80076c2:	18e4      	addlt	r4, r4, r3
 80076c4:	f000 fa98 	bl	8007bf8 <__malloc_lock>
 80076c8:	4a1c      	ldr	r2, [pc, #112]	; (800773c <_free_r+0x8c>)
 80076ca:	6813      	ldr	r3, [r2, #0]
 80076cc:	b933      	cbnz	r3, 80076dc <_free_r+0x2c>
 80076ce:	6063      	str	r3, [r4, #4]
 80076d0:	6014      	str	r4, [r2, #0]
 80076d2:	4628      	mov	r0, r5
 80076d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076d8:	f000 ba94 	b.w	8007c04 <__malloc_unlock>
 80076dc:	42a3      	cmp	r3, r4
 80076de:	d908      	bls.n	80076f2 <_free_r+0x42>
 80076e0:	6820      	ldr	r0, [r4, #0]
 80076e2:	1821      	adds	r1, r4, r0
 80076e4:	428b      	cmp	r3, r1
 80076e6:	bf01      	itttt	eq
 80076e8:	6819      	ldreq	r1, [r3, #0]
 80076ea:	685b      	ldreq	r3, [r3, #4]
 80076ec:	1809      	addeq	r1, r1, r0
 80076ee:	6021      	streq	r1, [r4, #0]
 80076f0:	e7ed      	b.n	80076ce <_free_r+0x1e>
 80076f2:	461a      	mov	r2, r3
 80076f4:	685b      	ldr	r3, [r3, #4]
 80076f6:	b10b      	cbz	r3, 80076fc <_free_r+0x4c>
 80076f8:	42a3      	cmp	r3, r4
 80076fa:	d9fa      	bls.n	80076f2 <_free_r+0x42>
 80076fc:	6811      	ldr	r1, [r2, #0]
 80076fe:	1850      	adds	r0, r2, r1
 8007700:	42a0      	cmp	r0, r4
 8007702:	d10b      	bne.n	800771c <_free_r+0x6c>
 8007704:	6820      	ldr	r0, [r4, #0]
 8007706:	4401      	add	r1, r0
 8007708:	1850      	adds	r0, r2, r1
 800770a:	4283      	cmp	r3, r0
 800770c:	6011      	str	r1, [r2, #0]
 800770e:	d1e0      	bne.n	80076d2 <_free_r+0x22>
 8007710:	6818      	ldr	r0, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	4401      	add	r1, r0
 8007716:	6011      	str	r1, [r2, #0]
 8007718:	6053      	str	r3, [r2, #4]
 800771a:	e7da      	b.n	80076d2 <_free_r+0x22>
 800771c:	d902      	bls.n	8007724 <_free_r+0x74>
 800771e:	230c      	movs	r3, #12
 8007720:	602b      	str	r3, [r5, #0]
 8007722:	e7d6      	b.n	80076d2 <_free_r+0x22>
 8007724:	6820      	ldr	r0, [r4, #0]
 8007726:	1821      	adds	r1, r4, r0
 8007728:	428b      	cmp	r3, r1
 800772a:	bf01      	itttt	eq
 800772c:	6819      	ldreq	r1, [r3, #0]
 800772e:	685b      	ldreq	r3, [r3, #4]
 8007730:	1809      	addeq	r1, r1, r0
 8007732:	6021      	streq	r1, [r4, #0]
 8007734:	6063      	str	r3, [r4, #4]
 8007736:	6054      	str	r4, [r2, #4]
 8007738:	e7cb      	b.n	80076d2 <_free_r+0x22>
 800773a:	bd38      	pop	{r3, r4, r5, pc}
 800773c:	20000370 	.word	0x20000370

08007740 <sbrk_aligned>:
 8007740:	b570      	push	{r4, r5, r6, lr}
 8007742:	4e0e      	ldr	r6, [pc, #56]	; (800777c <sbrk_aligned+0x3c>)
 8007744:	460c      	mov	r4, r1
 8007746:	6831      	ldr	r1, [r6, #0]
 8007748:	4605      	mov	r5, r0
 800774a:	b911      	cbnz	r1, 8007752 <sbrk_aligned+0x12>
 800774c:	f000 f9e8 	bl	8007b20 <_sbrk_r>
 8007750:	6030      	str	r0, [r6, #0]
 8007752:	4621      	mov	r1, r4
 8007754:	4628      	mov	r0, r5
 8007756:	f000 f9e3 	bl	8007b20 <_sbrk_r>
 800775a:	1c43      	adds	r3, r0, #1
 800775c:	d00a      	beq.n	8007774 <sbrk_aligned+0x34>
 800775e:	1cc4      	adds	r4, r0, #3
 8007760:	f024 0403 	bic.w	r4, r4, #3
 8007764:	42a0      	cmp	r0, r4
 8007766:	d007      	beq.n	8007778 <sbrk_aligned+0x38>
 8007768:	1a21      	subs	r1, r4, r0
 800776a:	4628      	mov	r0, r5
 800776c:	f000 f9d8 	bl	8007b20 <_sbrk_r>
 8007770:	3001      	adds	r0, #1
 8007772:	d101      	bne.n	8007778 <sbrk_aligned+0x38>
 8007774:	f04f 34ff 	mov.w	r4, #4294967295
 8007778:	4620      	mov	r0, r4
 800777a:	bd70      	pop	{r4, r5, r6, pc}
 800777c:	20000374 	.word	0x20000374

08007780 <_malloc_r>:
 8007780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007784:	1ccd      	adds	r5, r1, #3
 8007786:	f025 0503 	bic.w	r5, r5, #3
 800778a:	3508      	adds	r5, #8
 800778c:	2d0c      	cmp	r5, #12
 800778e:	bf38      	it	cc
 8007790:	250c      	movcc	r5, #12
 8007792:	2d00      	cmp	r5, #0
 8007794:	4607      	mov	r7, r0
 8007796:	db01      	blt.n	800779c <_malloc_r+0x1c>
 8007798:	42a9      	cmp	r1, r5
 800779a:	d905      	bls.n	80077a8 <_malloc_r+0x28>
 800779c:	230c      	movs	r3, #12
 800779e:	2600      	movs	r6, #0
 80077a0:	603b      	str	r3, [r7, #0]
 80077a2:	4630      	mov	r0, r6
 80077a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077a8:	4e2e      	ldr	r6, [pc, #184]	; (8007864 <_malloc_r+0xe4>)
 80077aa:	f000 fa25 	bl	8007bf8 <__malloc_lock>
 80077ae:	6833      	ldr	r3, [r6, #0]
 80077b0:	461c      	mov	r4, r3
 80077b2:	bb34      	cbnz	r4, 8007802 <_malloc_r+0x82>
 80077b4:	4629      	mov	r1, r5
 80077b6:	4638      	mov	r0, r7
 80077b8:	f7ff ffc2 	bl	8007740 <sbrk_aligned>
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	4604      	mov	r4, r0
 80077c0:	d14d      	bne.n	800785e <_malloc_r+0xde>
 80077c2:	6834      	ldr	r4, [r6, #0]
 80077c4:	4626      	mov	r6, r4
 80077c6:	2e00      	cmp	r6, #0
 80077c8:	d140      	bne.n	800784c <_malloc_r+0xcc>
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	4631      	mov	r1, r6
 80077ce:	4638      	mov	r0, r7
 80077d0:	eb04 0803 	add.w	r8, r4, r3
 80077d4:	f000 f9a4 	bl	8007b20 <_sbrk_r>
 80077d8:	4580      	cmp	r8, r0
 80077da:	d13a      	bne.n	8007852 <_malloc_r+0xd2>
 80077dc:	6821      	ldr	r1, [r4, #0]
 80077de:	3503      	adds	r5, #3
 80077e0:	1a6d      	subs	r5, r5, r1
 80077e2:	f025 0503 	bic.w	r5, r5, #3
 80077e6:	3508      	adds	r5, #8
 80077e8:	2d0c      	cmp	r5, #12
 80077ea:	bf38      	it	cc
 80077ec:	250c      	movcc	r5, #12
 80077ee:	4638      	mov	r0, r7
 80077f0:	4629      	mov	r1, r5
 80077f2:	f7ff ffa5 	bl	8007740 <sbrk_aligned>
 80077f6:	3001      	adds	r0, #1
 80077f8:	d02b      	beq.n	8007852 <_malloc_r+0xd2>
 80077fa:	6823      	ldr	r3, [r4, #0]
 80077fc:	442b      	add	r3, r5
 80077fe:	6023      	str	r3, [r4, #0]
 8007800:	e00e      	b.n	8007820 <_malloc_r+0xa0>
 8007802:	6822      	ldr	r2, [r4, #0]
 8007804:	1b52      	subs	r2, r2, r5
 8007806:	d41e      	bmi.n	8007846 <_malloc_r+0xc6>
 8007808:	2a0b      	cmp	r2, #11
 800780a:	d916      	bls.n	800783a <_malloc_r+0xba>
 800780c:	1961      	adds	r1, r4, r5
 800780e:	42a3      	cmp	r3, r4
 8007810:	6025      	str	r5, [r4, #0]
 8007812:	bf18      	it	ne
 8007814:	6059      	strne	r1, [r3, #4]
 8007816:	6863      	ldr	r3, [r4, #4]
 8007818:	bf08      	it	eq
 800781a:	6031      	streq	r1, [r6, #0]
 800781c:	5162      	str	r2, [r4, r5]
 800781e:	604b      	str	r3, [r1, #4]
 8007820:	4638      	mov	r0, r7
 8007822:	f104 060b 	add.w	r6, r4, #11
 8007826:	f000 f9ed 	bl	8007c04 <__malloc_unlock>
 800782a:	f026 0607 	bic.w	r6, r6, #7
 800782e:	1d23      	adds	r3, r4, #4
 8007830:	1af2      	subs	r2, r6, r3
 8007832:	d0b6      	beq.n	80077a2 <_malloc_r+0x22>
 8007834:	1b9b      	subs	r3, r3, r6
 8007836:	50a3      	str	r3, [r4, r2]
 8007838:	e7b3      	b.n	80077a2 <_malloc_r+0x22>
 800783a:	6862      	ldr	r2, [r4, #4]
 800783c:	42a3      	cmp	r3, r4
 800783e:	bf0c      	ite	eq
 8007840:	6032      	streq	r2, [r6, #0]
 8007842:	605a      	strne	r2, [r3, #4]
 8007844:	e7ec      	b.n	8007820 <_malloc_r+0xa0>
 8007846:	4623      	mov	r3, r4
 8007848:	6864      	ldr	r4, [r4, #4]
 800784a:	e7b2      	b.n	80077b2 <_malloc_r+0x32>
 800784c:	4634      	mov	r4, r6
 800784e:	6876      	ldr	r6, [r6, #4]
 8007850:	e7b9      	b.n	80077c6 <_malloc_r+0x46>
 8007852:	230c      	movs	r3, #12
 8007854:	4638      	mov	r0, r7
 8007856:	603b      	str	r3, [r7, #0]
 8007858:	f000 f9d4 	bl	8007c04 <__malloc_unlock>
 800785c:	e7a1      	b.n	80077a2 <_malloc_r+0x22>
 800785e:	6025      	str	r5, [r4, #0]
 8007860:	e7de      	b.n	8007820 <_malloc_r+0xa0>
 8007862:	bf00      	nop
 8007864:	20000370 	.word	0x20000370

08007868 <__ssputs_r>:
 8007868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800786c:	688e      	ldr	r6, [r1, #8]
 800786e:	4682      	mov	sl, r0
 8007870:	429e      	cmp	r6, r3
 8007872:	460c      	mov	r4, r1
 8007874:	4690      	mov	r8, r2
 8007876:	461f      	mov	r7, r3
 8007878:	d838      	bhi.n	80078ec <__ssputs_r+0x84>
 800787a:	898a      	ldrh	r2, [r1, #12]
 800787c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007880:	d032      	beq.n	80078e8 <__ssputs_r+0x80>
 8007882:	6825      	ldr	r5, [r4, #0]
 8007884:	6909      	ldr	r1, [r1, #16]
 8007886:	3301      	adds	r3, #1
 8007888:	eba5 0901 	sub.w	r9, r5, r1
 800788c:	6965      	ldr	r5, [r4, #20]
 800788e:	444b      	add	r3, r9
 8007890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007894:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007898:	106d      	asrs	r5, r5, #1
 800789a:	429d      	cmp	r5, r3
 800789c:	bf38      	it	cc
 800789e:	461d      	movcc	r5, r3
 80078a0:	0553      	lsls	r3, r2, #21
 80078a2:	d531      	bpl.n	8007908 <__ssputs_r+0xa0>
 80078a4:	4629      	mov	r1, r5
 80078a6:	f7ff ff6b 	bl	8007780 <_malloc_r>
 80078aa:	4606      	mov	r6, r0
 80078ac:	b950      	cbnz	r0, 80078c4 <__ssputs_r+0x5c>
 80078ae:	230c      	movs	r3, #12
 80078b0:	f04f 30ff 	mov.w	r0, #4294967295
 80078b4:	f8ca 3000 	str.w	r3, [sl]
 80078b8:	89a3      	ldrh	r3, [r4, #12]
 80078ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078be:	81a3      	strh	r3, [r4, #12]
 80078c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078c4:	464a      	mov	r2, r9
 80078c6:	6921      	ldr	r1, [r4, #16]
 80078c8:	f7ff fb4e 	bl	8006f68 <memcpy>
 80078cc:	89a3      	ldrh	r3, [r4, #12]
 80078ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80078d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d6:	81a3      	strh	r3, [r4, #12]
 80078d8:	6126      	str	r6, [r4, #16]
 80078da:	444e      	add	r6, r9
 80078dc:	6026      	str	r6, [r4, #0]
 80078de:	463e      	mov	r6, r7
 80078e0:	6165      	str	r5, [r4, #20]
 80078e2:	eba5 0509 	sub.w	r5, r5, r9
 80078e6:	60a5      	str	r5, [r4, #8]
 80078e8:	42be      	cmp	r6, r7
 80078ea:	d900      	bls.n	80078ee <__ssputs_r+0x86>
 80078ec:	463e      	mov	r6, r7
 80078ee:	4632      	mov	r2, r6
 80078f0:	4641      	mov	r1, r8
 80078f2:	6820      	ldr	r0, [r4, #0]
 80078f4:	f000 f966 	bl	8007bc4 <memmove>
 80078f8:	68a3      	ldr	r3, [r4, #8]
 80078fa:	2000      	movs	r0, #0
 80078fc:	1b9b      	subs	r3, r3, r6
 80078fe:	60a3      	str	r3, [r4, #8]
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	4433      	add	r3, r6
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	e7db      	b.n	80078c0 <__ssputs_r+0x58>
 8007908:	462a      	mov	r2, r5
 800790a:	f000 f981 	bl	8007c10 <_realloc_r>
 800790e:	4606      	mov	r6, r0
 8007910:	2800      	cmp	r0, #0
 8007912:	d1e1      	bne.n	80078d8 <__ssputs_r+0x70>
 8007914:	4650      	mov	r0, sl
 8007916:	6921      	ldr	r1, [r4, #16]
 8007918:	f7ff feca 	bl	80076b0 <_free_r>
 800791c:	e7c7      	b.n	80078ae <__ssputs_r+0x46>
	...

08007920 <_svfiprintf_r>:
 8007920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007924:	4698      	mov	r8, r3
 8007926:	898b      	ldrh	r3, [r1, #12]
 8007928:	4607      	mov	r7, r0
 800792a:	061b      	lsls	r3, r3, #24
 800792c:	460d      	mov	r5, r1
 800792e:	4614      	mov	r4, r2
 8007930:	b09d      	sub	sp, #116	; 0x74
 8007932:	d50e      	bpl.n	8007952 <_svfiprintf_r+0x32>
 8007934:	690b      	ldr	r3, [r1, #16]
 8007936:	b963      	cbnz	r3, 8007952 <_svfiprintf_r+0x32>
 8007938:	2140      	movs	r1, #64	; 0x40
 800793a:	f7ff ff21 	bl	8007780 <_malloc_r>
 800793e:	6028      	str	r0, [r5, #0]
 8007940:	6128      	str	r0, [r5, #16]
 8007942:	b920      	cbnz	r0, 800794e <_svfiprintf_r+0x2e>
 8007944:	230c      	movs	r3, #12
 8007946:	603b      	str	r3, [r7, #0]
 8007948:	f04f 30ff 	mov.w	r0, #4294967295
 800794c:	e0d1      	b.n	8007af2 <_svfiprintf_r+0x1d2>
 800794e:	2340      	movs	r3, #64	; 0x40
 8007950:	616b      	str	r3, [r5, #20]
 8007952:	2300      	movs	r3, #0
 8007954:	9309      	str	r3, [sp, #36]	; 0x24
 8007956:	2320      	movs	r3, #32
 8007958:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800795c:	2330      	movs	r3, #48	; 0x30
 800795e:	f04f 0901 	mov.w	r9, #1
 8007962:	f8cd 800c 	str.w	r8, [sp, #12]
 8007966:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007b0c <_svfiprintf_r+0x1ec>
 800796a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800796e:	4623      	mov	r3, r4
 8007970:	469a      	mov	sl, r3
 8007972:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007976:	b10a      	cbz	r2, 800797c <_svfiprintf_r+0x5c>
 8007978:	2a25      	cmp	r2, #37	; 0x25
 800797a:	d1f9      	bne.n	8007970 <_svfiprintf_r+0x50>
 800797c:	ebba 0b04 	subs.w	fp, sl, r4
 8007980:	d00b      	beq.n	800799a <_svfiprintf_r+0x7a>
 8007982:	465b      	mov	r3, fp
 8007984:	4622      	mov	r2, r4
 8007986:	4629      	mov	r1, r5
 8007988:	4638      	mov	r0, r7
 800798a:	f7ff ff6d 	bl	8007868 <__ssputs_r>
 800798e:	3001      	adds	r0, #1
 8007990:	f000 80aa 	beq.w	8007ae8 <_svfiprintf_r+0x1c8>
 8007994:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007996:	445a      	add	r2, fp
 8007998:	9209      	str	r2, [sp, #36]	; 0x24
 800799a:	f89a 3000 	ldrb.w	r3, [sl]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f000 80a2 	beq.w	8007ae8 <_svfiprintf_r+0x1c8>
 80079a4:	2300      	movs	r3, #0
 80079a6:	f04f 32ff 	mov.w	r2, #4294967295
 80079aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079ae:	f10a 0a01 	add.w	sl, sl, #1
 80079b2:	9304      	str	r3, [sp, #16]
 80079b4:	9307      	str	r3, [sp, #28]
 80079b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079ba:	931a      	str	r3, [sp, #104]	; 0x68
 80079bc:	4654      	mov	r4, sl
 80079be:	2205      	movs	r2, #5
 80079c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079c4:	4851      	ldr	r0, [pc, #324]	; (8007b0c <_svfiprintf_r+0x1ec>)
 80079c6:	f7ff fac1 	bl	8006f4c <memchr>
 80079ca:	9a04      	ldr	r2, [sp, #16]
 80079cc:	b9d8      	cbnz	r0, 8007a06 <_svfiprintf_r+0xe6>
 80079ce:	06d0      	lsls	r0, r2, #27
 80079d0:	bf44      	itt	mi
 80079d2:	2320      	movmi	r3, #32
 80079d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079d8:	0711      	lsls	r1, r2, #28
 80079da:	bf44      	itt	mi
 80079dc:	232b      	movmi	r3, #43	; 0x2b
 80079de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079e2:	f89a 3000 	ldrb.w	r3, [sl]
 80079e6:	2b2a      	cmp	r3, #42	; 0x2a
 80079e8:	d015      	beq.n	8007a16 <_svfiprintf_r+0xf6>
 80079ea:	4654      	mov	r4, sl
 80079ec:	2000      	movs	r0, #0
 80079ee:	f04f 0c0a 	mov.w	ip, #10
 80079f2:	9a07      	ldr	r2, [sp, #28]
 80079f4:	4621      	mov	r1, r4
 80079f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079fa:	3b30      	subs	r3, #48	; 0x30
 80079fc:	2b09      	cmp	r3, #9
 80079fe:	d94e      	bls.n	8007a9e <_svfiprintf_r+0x17e>
 8007a00:	b1b0      	cbz	r0, 8007a30 <_svfiprintf_r+0x110>
 8007a02:	9207      	str	r2, [sp, #28]
 8007a04:	e014      	b.n	8007a30 <_svfiprintf_r+0x110>
 8007a06:	eba0 0308 	sub.w	r3, r0, r8
 8007a0a:	fa09 f303 	lsl.w	r3, r9, r3
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	46a2      	mov	sl, r4
 8007a12:	9304      	str	r3, [sp, #16]
 8007a14:	e7d2      	b.n	80079bc <_svfiprintf_r+0x9c>
 8007a16:	9b03      	ldr	r3, [sp, #12]
 8007a18:	1d19      	adds	r1, r3, #4
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	9103      	str	r1, [sp, #12]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bfbb      	ittet	lt
 8007a22:	425b      	neglt	r3, r3
 8007a24:	f042 0202 	orrlt.w	r2, r2, #2
 8007a28:	9307      	strge	r3, [sp, #28]
 8007a2a:	9307      	strlt	r3, [sp, #28]
 8007a2c:	bfb8      	it	lt
 8007a2e:	9204      	strlt	r2, [sp, #16]
 8007a30:	7823      	ldrb	r3, [r4, #0]
 8007a32:	2b2e      	cmp	r3, #46	; 0x2e
 8007a34:	d10c      	bne.n	8007a50 <_svfiprintf_r+0x130>
 8007a36:	7863      	ldrb	r3, [r4, #1]
 8007a38:	2b2a      	cmp	r3, #42	; 0x2a
 8007a3a:	d135      	bne.n	8007aa8 <_svfiprintf_r+0x188>
 8007a3c:	9b03      	ldr	r3, [sp, #12]
 8007a3e:	3402      	adds	r4, #2
 8007a40:	1d1a      	adds	r2, r3, #4
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	9203      	str	r2, [sp, #12]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	bfb8      	it	lt
 8007a4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a4e:	9305      	str	r3, [sp, #20]
 8007a50:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007b10 <_svfiprintf_r+0x1f0>
 8007a54:	2203      	movs	r2, #3
 8007a56:	4650      	mov	r0, sl
 8007a58:	7821      	ldrb	r1, [r4, #0]
 8007a5a:	f7ff fa77 	bl	8006f4c <memchr>
 8007a5e:	b140      	cbz	r0, 8007a72 <_svfiprintf_r+0x152>
 8007a60:	2340      	movs	r3, #64	; 0x40
 8007a62:	eba0 000a 	sub.w	r0, r0, sl
 8007a66:	fa03 f000 	lsl.w	r0, r3, r0
 8007a6a:	9b04      	ldr	r3, [sp, #16]
 8007a6c:	3401      	adds	r4, #1
 8007a6e:	4303      	orrs	r3, r0
 8007a70:	9304      	str	r3, [sp, #16]
 8007a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a76:	2206      	movs	r2, #6
 8007a78:	4826      	ldr	r0, [pc, #152]	; (8007b14 <_svfiprintf_r+0x1f4>)
 8007a7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a7e:	f7ff fa65 	bl	8006f4c <memchr>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d038      	beq.n	8007af8 <_svfiprintf_r+0x1d8>
 8007a86:	4b24      	ldr	r3, [pc, #144]	; (8007b18 <_svfiprintf_r+0x1f8>)
 8007a88:	bb1b      	cbnz	r3, 8007ad2 <_svfiprintf_r+0x1b2>
 8007a8a:	9b03      	ldr	r3, [sp, #12]
 8007a8c:	3307      	adds	r3, #7
 8007a8e:	f023 0307 	bic.w	r3, r3, #7
 8007a92:	3308      	adds	r3, #8
 8007a94:	9303      	str	r3, [sp, #12]
 8007a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a98:	4433      	add	r3, r6
 8007a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8007a9c:	e767      	b.n	800796e <_svfiprintf_r+0x4e>
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	2001      	movs	r0, #1
 8007aa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007aa6:	e7a5      	b.n	80079f4 <_svfiprintf_r+0xd4>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f04f 0c0a 	mov.w	ip, #10
 8007aae:	4619      	mov	r1, r3
 8007ab0:	3401      	adds	r4, #1
 8007ab2:	9305      	str	r3, [sp, #20]
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007aba:	3a30      	subs	r2, #48	; 0x30
 8007abc:	2a09      	cmp	r2, #9
 8007abe:	d903      	bls.n	8007ac8 <_svfiprintf_r+0x1a8>
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d0c5      	beq.n	8007a50 <_svfiprintf_r+0x130>
 8007ac4:	9105      	str	r1, [sp, #20]
 8007ac6:	e7c3      	b.n	8007a50 <_svfiprintf_r+0x130>
 8007ac8:	4604      	mov	r4, r0
 8007aca:	2301      	movs	r3, #1
 8007acc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ad0:	e7f0      	b.n	8007ab4 <_svfiprintf_r+0x194>
 8007ad2:	ab03      	add	r3, sp, #12
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	462a      	mov	r2, r5
 8007ad8:	4638      	mov	r0, r7
 8007ada:	4b10      	ldr	r3, [pc, #64]	; (8007b1c <_svfiprintf_r+0x1fc>)
 8007adc:	a904      	add	r1, sp, #16
 8007ade:	f7fd ffab 	bl	8005a38 <_printf_float>
 8007ae2:	1c42      	adds	r2, r0, #1
 8007ae4:	4606      	mov	r6, r0
 8007ae6:	d1d6      	bne.n	8007a96 <_svfiprintf_r+0x176>
 8007ae8:	89ab      	ldrh	r3, [r5, #12]
 8007aea:	065b      	lsls	r3, r3, #25
 8007aec:	f53f af2c 	bmi.w	8007948 <_svfiprintf_r+0x28>
 8007af0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007af2:	b01d      	add	sp, #116	; 0x74
 8007af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af8:	ab03      	add	r3, sp, #12
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	462a      	mov	r2, r5
 8007afe:	4638      	mov	r0, r7
 8007b00:	4b06      	ldr	r3, [pc, #24]	; (8007b1c <_svfiprintf_r+0x1fc>)
 8007b02:	a904      	add	r1, sp, #16
 8007b04:	f7fe fa34 	bl	8005f70 <_printf_i>
 8007b08:	e7eb      	b.n	8007ae2 <_svfiprintf_r+0x1c2>
 8007b0a:	bf00      	nop
 8007b0c:	0800899c 	.word	0x0800899c
 8007b10:	080089a2 	.word	0x080089a2
 8007b14:	080089a6 	.word	0x080089a6
 8007b18:	08005a39 	.word	0x08005a39
 8007b1c:	08007869 	.word	0x08007869

08007b20 <_sbrk_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	2300      	movs	r3, #0
 8007b24:	4d05      	ldr	r5, [pc, #20]	; (8007b3c <_sbrk_r+0x1c>)
 8007b26:	4604      	mov	r4, r0
 8007b28:	4608      	mov	r0, r1
 8007b2a:	602b      	str	r3, [r5, #0]
 8007b2c:	f7fa fc6a 	bl	8002404 <_sbrk>
 8007b30:	1c43      	adds	r3, r0, #1
 8007b32:	d102      	bne.n	8007b3a <_sbrk_r+0x1a>
 8007b34:	682b      	ldr	r3, [r5, #0]
 8007b36:	b103      	cbz	r3, 8007b3a <_sbrk_r+0x1a>
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	bd38      	pop	{r3, r4, r5, pc}
 8007b3c:	20000378 	.word	0x20000378

08007b40 <__assert_func>:
 8007b40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b42:	4614      	mov	r4, r2
 8007b44:	461a      	mov	r2, r3
 8007b46:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <__assert_func+0x2c>)
 8007b48:	4605      	mov	r5, r0
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68d8      	ldr	r0, [r3, #12]
 8007b4e:	b14c      	cbz	r4, 8007b64 <__assert_func+0x24>
 8007b50:	4b07      	ldr	r3, [pc, #28]	; (8007b70 <__assert_func+0x30>)
 8007b52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b56:	9100      	str	r1, [sp, #0]
 8007b58:	462b      	mov	r3, r5
 8007b5a:	4906      	ldr	r1, [pc, #24]	; (8007b74 <__assert_func+0x34>)
 8007b5c:	f000 f80e 	bl	8007b7c <fiprintf>
 8007b60:	f000 faaa 	bl	80080b8 <abort>
 8007b64:	4b04      	ldr	r3, [pc, #16]	; (8007b78 <__assert_func+0x38>)
 8007b66:	461c      	mov	r4, r3
 8007b68:	e7f3      	b.n	8007b52 <__assert_func+0x12>
 8007b6a:	bf00      	nop
 8007b6c:	2000002c 	.word	0x2000002c
 8007b70:	080089ad 	.word	0x080089ad
 8007b74:	080089ba 	.word	0x080089ba
 8007b78:	080089e8 	.word	0x080089e8

08007b7c <fiprintf>:
 8007b7c:	b40e      	push	{r1, r2, r3}
 8007b7e:	b503      	push	{r0, r1, lr}
 8007b80:	4601      	mov	r1, r0
 8007b82:	ab03      	add	r3, sp, #12
 8007b84:	4805      	ldr	r0, [pc, #20]	; (8007b9c <fiprintf+0x20>)
 8007b86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b8a:	6800      	ldr	r0, [r0, #0]
 8007b8c:	9301      	str	r3, [sp, #4]
 8007b8e:	f000 f895 	bl	8007cbc <_vfiprintf_r>
 8007b92:	b002      	add	sp, #8
 8007b94:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b98:	b003      	add	sp, #12
 8007b9a:	4770      	bx	lr
 8007b9c:	2000002c 	.word	0x2000002c

08007ba0 <__ascii_mbtowc>:
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	b901      	cbnz	r1, 8007ba6 <__ascii_mbtowc+0x6>
 8007ba4:	a901      	add	r1, sp, #4
 8007ba6:	b142      	cbz	r2, 8007bba <__ascii_mbtowc+0x1a>
 8007ba8:	b14b      	cbz	r3, 8007bbe <__ascii_mbtowc+0x1e>
 8007baa:	7813      	ldrb	r3, [r2, #0]
 8007bac:	600b      	str	r3, [r1, #0]
 8007bae:	7812      	ldrb	r2, [r2, #0]
 8007bb0:	1e10      	subs	r0, r2, #0
 8007bb2:	bf18      	it	ne
 8007bb4:	2001      	movne	r0, #1
 8007bb6:	b002      	add	sp, #8
 8007bb8:	4770      	bx	lr
 8007bba:	4610      	mov	r0, r2
 8007bbc:	e7fb      	b.n	8007bb6 <__ascii_mbtowc+0x16>
 8007bbe:	f06f 0001 	mvn.w	r0, #1
 8007bc2:	e7f8      	b.n	8007bb6 <__ascii_mbtowc+0x16>

08007bc4 <memmove>:
 8007bc4:	4288      	cmp	r0, r1
 8007bc6:	b510      	push	{r4, lr}
 8007bc8:	eb01 0402 	add.w	r4, r1, r2
 8007bcc:	d902      	bls.n	8007bd4 <memmove+0x10>
 8007bce:	4284      	cmp	r4, r0
 8007bd0:	4623      	mov	r3, r4
 8007bd2:	d807      	bhi.n	8007be4 <memmove+0x20>
 8007bd4:	1e43      	subs	r3, r0, #1
 8007bd6:	42a1      	cmp	r1, r4
 8007bd8:	d008      	beq.n	8007bec <memmove+0x28>
 8007bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007be2:	e7f8      	b.n	8007bd6 <memmove+0x12>
 8007be4:	4601      	mov	r1, r0
 8007be6:	4402      	add	r2, r0
 8007be8:	428a      	cmp	r2, r1
 8007bea:	d100      	bne.n	8007bee <memmove+0x2a>
 8007bec:	bd10      	pop	{r4, pc}
 8007bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bf6:	e7f7      	b.n	8007be8 <memmove+0x24>

08007bf8 <__malloc_lock>:
 8007bf8:	4801      	ldr	r0, [pc, #4]	; (8007c00 <__malloc_lock+0x8>)
 8007bfa:	f000 bc19 	b.w	8008430 <__retarget_lock_acquire_recursive>
 8007bfe:	bf00      	nop
 8007c00:	2000037c 	.word	0x2000037c

08007c04 <__malloc_unlock>:
 8007c04:	4801      	ldr	r0, [pc, #4]	; (8007c0c <__malloc_unlock+0x8>)
 8007c06:	f000 bc14 	b.w	8008432 <__retarget_lock_release_recursive>
 8007c0a:	bf00      	nop
 8007c0c:	2000037c 	.word	0x2000037c

08007c10 <_realloc_r>:
 8007c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c14:	4680      	mov	r8, r0
 8007c16:	4614      	mov	r4, r2
 8007c18:	460e      	mov	r6, r1
 8007c1a:	b921      	cbnz	r1, 8007c26 <_realloc_r+0x16>
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c22:	f7ff bdad 	b.w	8007780 <_malloc_r>
 8007c26:	b92a      	cbnz	r2, 8007c34 <_realloc_r+0x24>
 8007c28:	f7ff fd42 	bl	80076b0 <_free_r>
 8007c2c:	4625      	mov	r5, r4
 8007c2e:	4628      	mov	r0, r5
 8007c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c34:	f000 fc64 	bl	8008500 <_malloc_usable_size_r>
 8007c38:	4284      	cmp	r4, r0
 8007c3a:	4607      	mov	r7, r0
 8007c3c:	d802      	bhi.n	8007c44 <_realloc_r+0x34>
 8007c3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c42:	d812      	bhi.n	8007c6a <_realloc_r+0x5a>
 8007c44:	4621      	mov	r1, r4
 8007c46:	4640      	mov	r0, r8
 8007c48:	f7ff fd9a 	bl	8007780 <_malloc_r>
 8007c4c:	4605      	mov	r5, r0
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	d0ed      	beq.n	8007c2e <_realloc_r+0x1e>
 8007c52:	42bc      	cmp	r4, r7
 8007c54:	4622      	mov	r2, r4
 8007c56:	4631      	mov	r1, r6
 8007c58:	bf28      	it	cs
 8007c5a:	463a      	movcs	r2, r7
 8007c5c:	f7ff f984 	bl	8006f68 <memcpy>
 8007c60:	4631      	mov	r1, r6
 8007c62:	4640      	mov	r0, r8
 8007c64:	f7ff fd24 	bl	80076b0 <_free_r>
 8007c68:	e7e1      	b.n	8007c2e <_realloc_r+0x1e>
 8007c6a:	4635      	mov	r5, r6
 8007c6c:	e7df      	b.n	8007c2e <_realloc_r+0x1e>

08007c6e <__sfputc_r>:
 8007c6e:	6893      	ldr	r3, [r2, #8]
 8007c70:	b410      	push	{r4}
 8007c72:	3b01      	subs	r3, #1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	6093      	str	r3, [r2, #8]
 8007c78:	da07      	bge.n	8007c8a <__sfputc_r+0x1c>
 8007c7a:	6994      	ldr	r4, [r2, #24]
 8007c7c:	42a3      	cmp	r3, r4
 8007c7e:	db01      	blt.n	8007c84 <__sfputc_r+0x16>
 8007c80:	290a      	cmp	r1, #10
 8007c82:	d102      	bne.n	8007c8a <__sfputc_r+0x1c>
 8007c84:	bc10      	pop	{r4}
 8007c86:	f000 b949 	b.w	8007f1c <__swbuf_r>
 8007c8a:	6813      	ldr	r3, [r2, #0]
 8007c8c:	1c58      	adds	r0, r3, #1
 8007c8e:	6010      	str	r0, [r2, #0]
 8007c90:	7019      	strb	r1, [r3, #0]
 8007c92:	4608      	mov	r0, r1
 8007c94:	bc10      	pop	{r4}
 8007c96:	4770      	bx	lr

08007c98 <__sfputs_r>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	460f      	mov	r7, r1
 8007c9e:	4614      	mov	r4, r2
 8007ca0:	18d5      	adds	r5, r2, r3
 8007ca2:	42ac      	cmp	r4, r5
 8007ca4:	d101      	bne.n	8007caa <__sfputs_r+0x12>
 8007ca6:	2000      	movs	r0, #0
 8007ca8:	e007      	b.n	8007cba <__sfputs_r+0x22>
 8007caa:	463a      	mov	r2, r7
 8007cac:	4630      	mov	r0, r6
 8007cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb2:	f7ff ffdc 	bl	8007c6e <__sfputc_r>
 8007cb6:	1c43      	adds	r3, r0, #1
 8007cb8:	d1f3      	bne.n	8007ca2 <__sfputs_r+0xa>
 8007cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007cbc <_vfiprintf_r>:
 8007cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc0:	460d      	mov	r5, r1
 8007cc2:	4614      	mov	r4, r2
 8007cc4:	4698      	mov	r8, r3
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	b09d      	sub	sp, #116	; 0x74
 8007cca:	b118      	cbz	r0, 8007cd4 <_vfiprintf_r+0x18>
 8007ccc:	6983      	ldr	r3, [r0, #24]
 8007cce:	b90b      	cbnz	r3, 8007cd4 <_vfiprintf_r+0x18>
 8007cd0:	f000 fb10 	bl	80082f4 <__sinit>
 8007cd4:	4b89      	ldr	r3, [pc, #548]	; (8007efc <_vfiprintf_r+0x240>)
 8007cd6:	429d      	cmp	r5, r3
 8007cd8:	d11b      	bne.n	8007d12 <_vfiprintf_r+0x56>
 8007cda:	6875      	ldr	r5, [r6, #4]
 8007cdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cde:	07d9      	lsls	r1, r3, #31
 8007ce0:	d405      	bmi.n	8007cee <_vfiprintf_r+0x32>
 8007ce2:	89ab      	ldrh	r3, [r5, #12]
 8007ce4:	059a      	lsls	r2, r3, #22
 8007ce6:	d402      	bmi.n	8007cee <_vfiprintf_r+0x32>
 8007ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cea:	f000 fba1 	bl	8008430 <__retarget_lock_acquire_recursive>
 8007cee:	89ab      	ldrh	r3, [r5, #12]
 8007cf0:	071b      	lsls	r3, r3, #28
 8007cf2:	d501      	bpl.n	8007cf8 <_vfiprintf_r+0x3c>
 8007cf4:	692b      	ldr	r3, [r5, #16]
 8007cf6:	b9eb      	cbnz	r3, 8007d34 <_vfiprintf_r+0x78>
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f000 f96e 	bl	8007fdc <__swsetup_r>
 8007d00:	b1c0      	cbz	r0, 8007d34 <_vfiprintf_r+0x78>
 8007d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d04:	07dc      	lsls	r4, r3, #31
 8007d06:	d50e      	bpl.n	8007d26 <_vfiprintf_r+0x6a>
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0c:	b01d      	add	sp, #116	; 0x74
 8007d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d12:	4b7b      	ldr	r3, [pc, #492]	; (8007f00 <_vfiprintf_r+0x244>)
 8007d14:	429d      	cmp	r5, r3
 8007d16:	d101      	bne.n	8007d1c <_vfiprintf_r+0x60>
 8007d18:	68b5      	ldr	r5, [r6, #8]
 8007d1a:	e7df      	b.n	8007cdc <_vfiprintf_r+0x20>
 8007d1c:	4b79      	ldr	r3, [pc, #484]	; (8007f04 <_vfiprintf_r+0x248>)
 8007d1e:	429d      	cmp	r5, r3
 8007d20:	bf08      	it	eq
 8007d22:	68f5      	ldreq	r5, [r6, #12]
 8007d24:	e7da      	b.n	8007cdc <_vfiprintf_r+0x20>
 8007d26:	89ab      	ldrh	r3, [r5, #12]
 8007d28:	0598      	lsls	r0, r3, #22
 8007d2a:	d4ed      	bmi.n	8007d08 <_vfiprintf_r+0x4c>
 8007d2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d2e:	f000 fb80 	bl	8008432 <__retarget_lock_release_recursive>
 8007d32:	e7e9      	b.n	8007d08 <_vfiprintf_r+0x4c>
 8007d34:	2300      	movs	r3, #0
 8007d36:	9309      	str	r3, [sp, #36]	; 0x24
 8007d38:	2320      	movs	r3, #32
 8007d3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d3e:	2330      	movs	r3, #48	; 0x30
 8007d40:	f04f 0901 	mov.w	r9, #1
 8007d44:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d48:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007f08 <_vfiprintf_r+0x24c>
 8007d4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d50:	4623      	mov	r3, r4
 8007d52:	469a      	mov	sl, r3
 8007d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d58:	b10a      	cbz	r2, 8007d5e <_vfiprintf_r+0xa2>
 8007d5a:	2a25      	cmp	r2, #37	; 0x25
 8007d5c:	d1f9      	bne.n	8007d52 <_vfiprintf_r+0x96>
 8007d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8007d62:	d00b      	beq.n	8007d7c <_vfiprintf_r+0xc0>
 8007d64:	465b      	mov	r3, fp
 8007d66:	4622      	mov	r2, r4
 8007d68:	4629      	mov	r1, r5
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	f7ff ff94 	bl	8007c98 <__sfputs_r>
 8007d70:	3001      	adds	r0, #1
 8007d72:	f000 80aa 	beq.w	8007eca <_vfiprintf_r+0x20e>
 8007d76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d78:	445a      	add	r2, fp
 8007d7a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 80a2 	beq.w	8007eca <_vfiprintf_r+0x20e>
 8007d86:	2300      	movs	r3, #0
 8007d88:	f04f 32ff 	mov.w	r2, #4294967295
 8007d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d90:	f10a 0a01 	add.w	sl, sl, #1
 8007d94:	9304      	str	r3, [sp, #16]
 8007d96:	9307      	str	r3, [sp, #28]
 8007d98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d9c:	931a      	str	r3, [sp, #104]	; 0x68
 8007d9e:	4654      	mov	r4, sl
 8007da0:	2205      	movs	r2, #5
 8007da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da6:	4858      	ldr	r0, [pc, #352]	; (8007f08 <_vfiprintf_r+0x24c>)
 8007da8:	f7ff f8d0 	bl	8006f4c <memchr>
 8007dac:	9a04      	ldr	r2, [sp, #16]
 8007dae:	b9d8      	cbnz	r0, 8007de8 <_vfiprintf_r+0x12c>
 8007db0:	06d1      	lsls	r1, r2, #27
 8007db2:	bf44      	itt	mi
 8007db4:	2320      	movmi	r3, #32
 8007db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dba:	0713      	lsls	r3, r2, #28
 8007dbc:	bf44      	itt	mi
 8007dbe:	232b      	movmi	r3, #43	; 0x2b
 8007dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8007dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8007dca:	d015      	beq.n	8007df8 <_vfiprintf_r+0x13c>
 8007dcc:	4654      	mov	r4, sl
 8007dce:	2000      	movs	r0, #0
 8007dd0:	f04f 0c0a 	mov.w	ip, #10
 8007dd4:	9a07      	ldr	r2, [sp, #28]
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ddc:	3b30      	subs	r3, #48	; 0x30
 8007dde:	2b09      	cmp	r3, #9
 8007de0:	d94e      	bls.n	8007e80 <_vfiprintf_r+0x1c4>
 8007de2:	b1b0      	cbz	r0, 8007e12 <_vfiprintf_r+0x156>
 8007de4:	9207      	str	r2, [sp, #28]
 8007de6:	e014      	b.n	8007e12 <_vfiprintf_r+0x156>
 8007de8:	eba0 0308 	sub.w	r3, r0, r8
 8007dec:	fa09 f303 	lsl.w	r3, r9, r3
 8007df0:	4313      	orrs	r3, r2
 8007df2:	46a2      	mov	sl, r4
 8007df4:	9304      	str	r3, [sp, #16]
 8007df6:	e7d2      	b.n	8007d9e <_vfiprintf_r+0xe2>
 8007df8:	9b03      	ldr	r3, [sp, #12]
 8007dfa:	1d19      	adds	r1, r3, #4
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	9103      	str	r1, [sp, #12]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	bfbb      	ittet	lt
 8007e04:	425b      	neglt	r3, r3
 8007e06:	f042 0202 	orrlt.w	r2, r2, #2
 8007e0a:	9307      	strge	r3, [sp, #28]
 8007e0c:	9307      	strlt	r3, [sp, #28]
 8007e0e:	bfb8      	it	lt
 8007e10:	9204      	strlt	r2, [sp, #16]
 8007e12:	7823      	ldrb	r3, [r4, #0]
 8007e14:	2b2e      	cmp	r3, #46	; 0x2e
 8007e16:	d10c      	bne.n	8007e32 <_vfiprintf_r+0x176>
 8007e18:	7863      	ldrb	r3, [r4, #1]
 8007e1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007e1c:	d135      	bne.n	8007e8a <_vfiprintf_r+0x1ce>
 8007e1e:	9b03      	ldr	r3, [sp, #12]
 8007e20:	3402      	adds	r4, #2
 8007e22:	1d1a      	adds	r2, r3, #4
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	9203      	str	r2, [sp, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	bfb8      	it	lt
 8007e2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e30:	9305      	str	r3, [sp, #20]
 8007e32:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007f0c <_vfiprintf_r+0x250>
 8007e36:	2203      	movs	r2, #3
 8007e38:	4650      	mov	r0, sl
 8007e3a:	7821      	ldrb	r1, [r4, #0]
 8007e3c:	f7ff f886 	bl	8006f4c <memchr>
 8007e40:	b140      	cbz	r0, 8007e54 <_vfiprintf_r+0x198>
 8007e42:	2340      	movs	r3, #64	; 0x40
 8007e44:	eba0 000a 	sub.w	r0, r0, sl
 8007e48:	fa03 f000 	lsl.w	r0, r3, r0
 8007e4c:	9b04      	ldr	r3, [sp, #16]
 8007e4e:	3401      	adds	r4, #1
 8007e50:	4303      	orrs	r3, r0
 8007e52:	9304      	str	r3, [sp, #16]
 8007e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e58:	2206      	movs	r2, #6
 8007e5a:	482d      	ldr	r0, [pc, #180]	; (8007f10 <_vfiprintf_r+0x254>)
 8007e5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e60:	f7ff f874 	bl	8006f4c <memchr>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d03f      	beq.n	8007ee8 <_vfiprintf_r+0x22c>
 8007e68:	4b2a      	ldr	r3, [pc, #168]	; (8007f14 <_vfiprintf_r+0x258>)
 8007e6a:	bb1b      	cbnz	r3, 8007eb4 <_vfiprintf_r+0x1f8>
 8007e6c:	9b03      	ldr	r3, [sp, #12]
 8007e6e:	3307      	adds	r3, #7
 8007e70:	f023 0307 	bic.w	r3, r3, #7
 8007e74:	3308      	adds	r3, #8
 8007e76:	9303      	str	r3, [sp, #12]
 8007e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e7a:	443b      	add	r3, r7
 8007e7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e7e:	e767      	b.n	8007d50 <_vfiprintf_r+0x94>
 8007e80:	460c      	mov	r4, r1
 8007e82:	2001      	movs	r0, #1
 8007e84:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e88:	e7a5      	b.n	8007dd6 <_vfiprintf_r+0x11a>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	f04f 0c0a 	mov.w	ip, #10
 8007e90:	4619      	mov	r1, r3
 8007e92:	3401      	adds	r4, #1
 8007e94:	9305      	str	r3, [sp, #20]
 8007e96:	4620      	mov	r0, r4
 8007e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e9c:	3a30      	subs	r2, #48	; 0x30
 8007e9e:	2a09      	cmp	r2, #9
 8007ea0:	d903      	bls.n	8007eaa <_vfiprintf_r+0x1ee>
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0c5      	beq.n	8007e32 <_vfiprintf_r+0x176>
 8007ea6:	9105      	str	r1, [sp, #20]
 8007ea8:	e7c3      	b.n	8007e32 <_vfiprintf_r+0x176>
 8007eaa:	4604      	mov	r4, r0
 8007eac:	2301      	movs	r3, #1
 8007eae:	fb0c 2101 	mla	r1, ip, r1, r2
 8007eb2:	e7f0      	b.n	8007e96 <_vfiprintf_r+0x1da>
 8007eb4:	ab03      	add	r3, sp, #12
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	462a      	mov	r2, r5
 8007eba:	4630      	mov	r0, r6
 8007ebc:	4b16      	ldr	r3, [pc, #88]	; (8007f18 <_vfiprintf_r+0x25c>)
 8007ebe:	a904      	add	r1, sp, #16
 8007ec0:	f7fd fdba 	bl	8005a38 <_printf_float>
 8007ec4:	4607      	mov	r7, r0
 8007ec6:	1c78      	adds	r0, r7, #1
 8007ec8:	d1d6      	bne.n	8007e78 <_vfiprintf_r+0x1bc>
 8007eca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ecc:	07d9      	lsls	r1, r3, #31
 8007ece:	d405      	bmi.n	8007edc <_vfiprintf_r+0x220>
 8007ed0:	89ab      	ldrh	r3, [r5, #12]
 8007ed2:	059a      	lsls	r2, r3, #22
 8007ed4:	d402      	bmi.n	8007edc <_vfiprintf_r+0x220>
 8007ed6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ed8:	f000 faab 	bl	8008432 <__retarget_lock_release_recursive>
 8007edc:	89ab      	ldrh	r3, [r5, #12]
 8007ede:	065b      	lsls	r3, r3, #25
 8007ee0:	f53f af12 	bmi.w	8007d08 <_vfiprintf_r+0x4c>
 8007ee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ee6:	e711      	b.n	8007d0c <_vfiprintf_r+0x50>
 8007ee8:	ab03      	add	r3, sp, #12
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	462a      	mov	r2, r5
 8007eee:	4630      	mov	r0, r6
 8007ef0:	4b09      	ldr	r3, [pc, #36]	; (8007f18 <_vfiprintf_r+0x25c>)
 8007ef2:	a904      	add	r1, sp, #16
 8007ef4:	f7fe f83c 	bl	8005f70 <_printf_i>
 8007ef8:	e7e4      	b.n	8007ec4 <_vfiprintf_r+0x208>
 8007efa:	bf00      	nop
 8007efc:	08008b14 	.word	0x08008b14
 8007f00:	08008b34 	.word	0x08008b34
 8007f04:	08008af4 	.word	0x08008af4
 8007f08:	0800899c 	.word	0x0800899c
 8007f0c:	080089a2 	.word	0x080089a2
 8007f10:	080089a6 	.word	0x080089a6
 8007f14:	08005a39 	.word	0x08005a39
 8007f18:	08007c99 	.word	0x08007c99

08007f1c <__swbuf_r>:
 8007f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1e:	460e      	mov	r6, r1
 8007f20:	4614      	mov	r4, r2
 8007f22:	4605      	mov	r5, r0
 8007f24:	b118      	cbz	r0, 8007f2e <__swbuf_r+0x12>
 8007f26:	6983      	ldr	r3, [r0, #24]
 8007f28:	b90b      	cbnz	r3, 8007f2e <__swbuf_r+0x12>
 8007f2a:	f000 f9e3 	bl	80082f4 <__sinit>
 8007f2e:	4b21      	ldr	r3, [pc, #132]	; (8007fb4 <__swbuf_r+0x98>)
 8007f30:	429c      	cmp	r4, r3
 8007f32:	d12b      	bne.n	8007f8c <__swbuf_r+0x70>
 8007f34:	686c      	ldr	r4, [r5, #4]
 8007f36:	69a3      	ldr	r3, [r4, #24]
 8007f38:	60a3      	str	r3, [r4, #8]
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	071a      	lsls	r2, r3, #28
 8007f3e:	d52f      	bpl.n	8007fa0 <__swbuf_r+0x84>
 8007f40:	6923      	ldr	r3, [r4, #16]
 8007f42:	b36b      	cbz	r3, 8007fa0 <__swbuf_r+0x84>
 8007f44:	6923      	ldr	r3, [r4, #16]
 8007f46:	6820      	ldr	r0, [r4, #0]
 8007f48:	b2f6      	uxtb	r6, r6
 8007f4a:	1ac0      	subs	r0, r0, r3
 8007f4c:	6963      	ldr	r3, [r4, #20]
 8007f4e:	4637      	mov	r7, r6
 8007f50:	4283      	cmp	r3, r0
 8007f52:	dc04      	bgt.n	8007f5e <__swbuf_r+0x42>
 8007f54:	4621      	mov	r1, r4
 8007f56:	4628      	mov	r0, r5
 8007f58:	f000 f938 	bl	80081cc <_fflush_r>
 8007f5c:	bb30      	cbnz	r0, 8007fac <__swbuf_r+0x90>
 8007f5e:	68a3      	ldr	r3, [r4, #8]
 8007f60:	3001      	adds	r0, #1
 8007f62:	3b01      	subs	r3, #1
 8007f64:	60a3      	str	r3, [r4, #8]
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	6022      	str	r2, [r4, #0]
 8007f6c:	701e      	strb	r6, [r3, #0]
 8007f6e:	6963      	ldr	r3, [r4, #20]
 8007f70:	4283      	cmp	r3, r0
 8007f72:	d004      	beq.n	8007f7e <__swbuf_r+0x62>
 8007f74:	89a3      	ldrh	r3, [r4, #12]
 8007f76:	07db      	lsls	r3, r3, #31
 8007f78:	d506      	bpl.n	8007f88 <__swbuf_r+0x6c>
 8007f7a:	2e0a      	cmp	r6, #10
 8007f7c:	d104      	bne.n	8007f88 <__swbuf_r+0x6c>
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4628      	mov	r0, r5
 8007f82:	f000 f923 	bl	80081cc <_fflush_r>
 8007f86:	b988      	cbnz	r0, 8007fac <__swbuf_r+0x90>
 8007f88:	4638      	mov	r0, r7
 8007f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f8c:	4b0a      	ldr	r3, [pc, #40]	; (8007fb8 <__swbuf_r+0x9c>)
 8007f8e:	429c      	cmp	r4, r3
 8007f90:	d101      	bne.n	8007f96 <__swbuf_r+0x7a>
 8007f92:	68ac      	ldr	r4, [r5, #8]
 8007f94:	e7cf      	b.n	8007f36 <__swbuf_r+0x1a>
 8007f96:	4b09      	ldr	r3, [pc, #36]	; (8007fbc <__swbuf_r+0xa0>)
 8007f98:	429c      	cmp	r4, r3
 8007f9a:	bf08      	it	eq
 8007f9c:	68ec      	ldreq	r4, [r5, #12]
 8007f9e:	e7ca      	b.n	8007f36 <__swbuf_r+0x1a>
 8007fa0:	4621      	mov	r1, r4
 8007fa2:	4628      	mov	r0, r5
 8007fa4:	f000 f81a 	bl	8007fdc <__swsetup_r>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d0cb      	beq.n	8007f44 <__swbuf_r+0x28>
 8007fac:	f04f 37ff 	mov.w	r7, #4294967295
 8007fb0:	e7ea      	b.n	8007f88 <__swbuf_r+0x6c>
 8007fb2:	bf00      	nop
 8007fb4:	08008b14 	.word	0x08008b14
 8007fb8:	08008b34 	.word	0x08008b34
 8007fbc:	08008af4 	.word	0x08008af4

08007fc0 <__ascii_wctomb>:
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	4608      	mov	r0, r1
 8007fc4:	b141      	cbz	r1, 8007fd8 <__ascii_wctomb+0x18>
 8007fc6:	2aff      	cmp	r2, #255	; 0xff
 8007fc8:	d904      	bls.n	8007fd4 <__ascii_wctomb+0x14>
 8007fca:	228a      	movs	r2, #138	; 0x8a
 8007fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	4770      	bx	lr
 8007fd4:	2001      	movs	r0, #1
 8007fd6:	700a      	strb	r2, [r1, #0]
 8007fd8:	4770      	bx	lr
	...

08007fdc <__swsetup_r>:
 8007fdc:	4b32      	ldr	r3, [pc, #200]	; (80080a8 <__swsetup_r+0xcc>)
 8007fde:	b570      	push	{r4, r5, r6, lr}
 8007fe0:	681d      	ldr	r5, [r3, #0]
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	b125      	cbz	r5, 8007ff2 <__swsetup_r+0x16>
 8007fe8:	69ab      	ldr	r3, [r5, #24]
 8007fea:	b913      	cbnz	r3, 8007ff2 <__swsetup_r+0x16>
 8007fec:	4628      	mov	r0, r5
 8007fee:	f000 f981 	bl	80082f4 <__sinit>
 8007ff2:	4b2e      	ldr	r3, [pc, #184]	; (80080ac <__swsetup_r+0xd0>)
 8007ff4:	429c      	cmp	r4, r3
 8007ff6:	d10f      	bne.n	8008018 <__swsetup_r+0x3c>
 8007ff8:	686c      	ldr	r4, [r5, #4]
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008000:	0719      	lsls	r1, r3, #28
 8008002:	d42c      	bmi.n	800805e <__swsetup_r+0x82>
 8008004:	06dd      	lsls	r5, r3, #27
 8008006:	d411      	bmi.n	800802c <__swsetup_r+0x50>
 8008008:	2309      	movs	r3, #9
 800800a:	6033      	str	r3, [r6, #0]
 800800c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008010:	f04f 30ff 	mov.w	r0, #4294967295
 8008014:	81a3      	strh	r3, [r4, #12]
 8008016:	e03e      	b.n	8008096 <__swsetup_r+0xba>
 8008018:	4b25      	ldr	r3, [pc, #148]	; (80080b0 <__swsetup_r+0xd4>)
 800801a:	429c      	cmp	r4, r3
 800801c:	d101      	bne.n	8008022 <__swsetup_r+0x46>
 800801e:	68ac      	ldr	r4, [r5, #8]
 8008020:	e7eb      	b.n	8007ffa <__swsetup_r+0x1e>
 8008022:	4b24      	ldr	r3, [pc, #144]	; (80080b4 <__swsetup_r+0xd8>)
 8008024:	429c      	cmp	r4, r3
 8008026:	bf08      	it	eq
 8008028:	68ec      	ldreq	r4, [r5, #12]
 800802a:	e7e6      	b.n	8007ffa <__swsetup_r+0x1e>
 800802c:	0758      	lsls	r0, r3, #29
 800802e:	d512      	bpl.n	8008056 <__swsetup_r+0x7a>
 8008030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008032:	b141      	cbz	r1, 8008046 <__swsetup_r+0x6a>
 8008034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008038:	4299      	cmp	r1, r3
 800803a:	d002      	beq.n	8008042 <__swsetup_r+0x66>
 800803c:	4630      	mov	r0, r6
 800803e:	f7ff fb37 	bl	80076b0 <_free_r>
 8008042:	2300      	movs	r3, #0
 8008044:	6363      	str	r3, [r4, #52]	; 0x34
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800804c:	81a3      	strh	r3, [r4, #12]
 800804e:	2300      	movs	r3, #0
 8008050:	6063      	str	r3, [r4, #4]
 8008052:	6923      	ldr	r3, [r4, #16]
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	f043 0308 	orr.w	r3, r3, #8
 800805c:	81a3      	strh	r3, [r4, #12]
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	b94b      	cbnz	r3, 8008076 <__swsetup_r+0x9a>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800806c:	d003      	beq.n	8008076 <__swsetup_r+0x9a>
 800806e:	4621      	mov	r1, r4
 8008070:	4630      	mov	r0, r6
 8008072:	f000 fa05 	bl	8008480 <__smakebuf_r>
 8008076:	89a0      	ldrh	r0, [r4, #12]
 8008078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800807c:	f010 0301 	ands.w	r3, r0, #1
 8008080:	d00a      	beq.n	8008098 <__swsetup_r+0xbc>
 8008082:	2300      	movs	r3, #0
 8008084:	60a3      	str	r3, [r4, #8]
 8008086:	6963      	ldr	r3, [r4, #20]
 8008088:	425b      	negs	r3, r3
 800808a:	61a3      	str	r3, [r4, #24]
 800808c:	6923      	ldr	r3, [r4, #16]
 800808e:	b943      	cbnz	r3, 80080a2 <__swsetup_r+0xc6>
 8008090:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008094:	d1ba      	bne.n	800800c <__swsetup_r+0x30>
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	0781      	lsls	r1, r0, #30
 800809a:	bf58      	it	pl
 800809c:	6963      	ldrpl	r3, [r4, #20]
 800809e:	60a3      	str	r3, [r4, #8]
 80080a0:	e7f4      	b.n	800808c <__swsetup_r+0xb0>
 80080a2:	2000      	movs	r0, #0
 80080a4:	e7f7      	b.n	8008096 <__swsetup_r+0xba>
 80080a6:	bf00      	nop
 80080a8:	2000002c 	.word	0x2000002c
 80080ac:	08008b14 	.word	0x08008b14
 80080b0:	08008b34 	.word	0x08008b34
 80080b4:	08008af4 	.word	0x08008af4

080080b8 <abort>:
 80080b8:	2006      	movs	r0, #6
 80080ba:	b508      	push	{r3, lr}
 80080bc:	f000 fa50 	bl	8008560 <raise>
 80080c0:	2001      	movs	r0, #1
 80080c2:	f7fa f92c 	bl	800231e <_exit>
	...

080080c8 <__sflush_r>:
 80080c8:	898a      	ldrh	r2, [r1, #12]
 80080ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080cc:	4605      	mov	r5, r0
 80080ce:	0710      	lsls	r0, r2, #28
 80080d0:	460c      	mov	r4, r1
 80080d2:	d457      	bmi.n	8008184 <__sflush_r+0xbc>
 80080d4:	684b      	ldr	r3, [r1, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	dc04      	bgt.n	80080e4 <__sflush_r+0x1c>
 80080da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080dc:	2b00      	cmp	r3, #0
 80080de:	dc01      	bgt.n	80080e4 <__sflush_r+0x1c>
 80080e0:	2000      	movs	r0, #0
 80080e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080e6:	2e00      	cmp	r6, #0
 80080e8:	d0fa      	beq.n	80080e0 <__sflush_r+0x18>
 80080ea:	2300      	movs	r3, #0
 80080ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080f0:	682f      	ldr	r7, [r5, #0]
 80080f2:	602b      	str	r3, [r5, #0]
 80080f4:	d032      	beq.n	800815c <__sflush_r+0x94>
 80080f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080f8:	89a3      	ldrh	r3, [r4, #12]
 80080fa:	075a      	lsls	r2, r3, #29
 80080fc:	d505      	bpl.n	800810a <__sflush_r+0x42>
 80080fe:	6863      	ldr	r3, [r4, #4]
 8008100:	1ac0      	subs	r0, r0, r3
 8008102:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008104:	b10b      	cbz	r3, 800810a <__sflush_r+0x42>
 8008106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008108:	1ac0      	subs	r0, r0, r3
 800810a:	2300      	movs	r3, #0
 800810c:	4602      	mov	r2, r0
 800810e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008110:	4628      	mov	r0, r5
 8008112:	6a21      	ldr	r1, [r4, #32]
 8008114:	47b0      	blx	r6
 8008116:	1c43      	adds	r3, r0, #1
 8008118:	89a3      	ldrh	r3, [r4, #12]
 800811a:	d106      	bne.n	800812a <__sflush_r+0x62>
 800811c:	6829      	ldr	r1, [r5, #0]
 800811e:	291d      	cmp	r1, #29
 8008120:	d82c      	bhi.n	800817c <__sflush_r+0xb4>
 8008122:	4a29      	ldr	r2, [pc, #164]	; (80081c8 <__sflush_r+0x100>)
 8008124:	40ca      	lsrs	r2, r1
 8008126:	07d6      	lsls	r6, r2, #31
 8008128:	d528      	bpl.n	800817c <__sflush_r+0xb4>
 800812a:	2200      	movs	r2, #0
 800812c:	6062      	str	r2, [r4, #4]
 800812e:	6922      	ldr	r2, [r4, #16]
 8008130:	04d9      	lsls	r1, r3, #19
 8008132:	6022      	str	r2, [r4, #0]
 8008134:	d504      	bpl.n	8008140 <__sflush_r+0x78>
 8008136:	1c42      	adds	r2, r0, #1
 8008138:	d101      	bne.n	800813e <__sflush_r+0x76>
 800813a:	682b      	ldr	r3, [r5, #0]
 800813c:	b903      	cbnz	r3, 8008140 <__sflush_r+0x78>
 800813e:	6560      	str	r0, [r4, #84]	; 0x54
 8008140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008142:	602f      	str	r7, [r5, #0]
 8008144:	2900      	cmp	r1, #0
 8008146:	d0cb      	beq.n	80080e0 <__sflush_r+0x18>
 8008148:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800814c:	4299      	cmp	r1, r3
 800814e:	d002      	beq.n	8008156 <__sflush_r+0x8e>
 8008150:	4628      	mov	r0, r5
 8008152:	f7ff faad 	bl	80076b0 <_free_r>
 8008156:	2000      	movs	r0, #0
 8008158:	6360      	str	r0, [r4, #52]	; 0x34
 800815a:	e7c2      	b.n	80080e2 <__sflush_r+0x1a>
 800815c:	6a21      	ldr	r1, [r4, #32]
 800815e:	2301      	movs	r3, #1
 8008160:	4628      	mov	r0, r5
 8008162:	47b0      	blx	r6
 8008164:	1c41      	adds	r1, r0, #1
 8008166:	d1c7      	bne.n	80080f8 <__sflush_r+0x30>
 8008168:	682b      	ldr	r3, [r5, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d0c4      	beq.n	80080f8 <__sflush_r+0x30>
 800816e:	2b1d      	cmp	r3, #29
 8008170:	d001      	beq.n	8008176 <__sflush_r+0xae>
 8008172:	2b16      	cmp	r3, #22
 8008174:	d101      	bne.n	800817a <__sflush_r+0xb2>
 8008176:	602f      	str	r7, [r5, #0]
 8008178:	e7b2      	b.n	80080e0 <__sflush_r+0x18>
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008180:	81a3      	strh	r3, [r4, #12]
 8008182:	e7ae      	b.n	80080e2 <__sflush_r+0x1a>
 8008184:	690f      	ldr	r7, [r1, #16]
 8008186:	2f00      	cmp	r7, #0
 8008188:	d0aa      	beq.n	80080e0 <__sflush_r+0x18>
 800818a:	0793      	lsls	r3, r2, #30
 800818c:	bf18      	it	ne
 800818e:	2300      	movne	r3, #0
 8008190:	680e      	ldr	r6, [r1, #0]
 8008192:	bf08      	it	eq
 8008194:	694b      	ldreq	r3, [r1, #20]
 8008196:	1bf6      	subs	r6, r6, r7
 8008198:	600f      	str	r7, [r1, #0]
 800819a:	608b      	str	r3, [r1, #8]
 800819c:	2e00      	cmp	r6, #0
 800819e:	dd9f      	ble.n	80080e0 <__sflush_r+0x18>
 80081a0:	4633      	mov	r3, r6
 80081a2:	463a      	mov	r2, r7
 80081a4:	4628      	mov	r0, r5
 80081a6:	6a21      	ldr	r1, [r4, #32]
 80081a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80081ac:	47e0      	blx	ip
 80081ae:	2800      	cmp	r0, #0
 80081b0:	dc06      	bgt.n	80081c0 <__sflush_r+0xf8>
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	f04f 30ff 	mov.w	r0, #4294967295
 80081b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081bc:	81a3      	strh	r3, [r4, #12]
 80081be:	e790      	b.n	80080e2 <__sflush_r+0x1a>
 80081c0:	4407      	add	r7, r0
 80081c2:	1a36      	subs	r6, r6, r0
 80081c4:	e7ea      	b.n	800819c <__sflush_r+0xd4>
 80081c6:	bf00      	nop
 80081c8:	20400001 	.word	0x20400001

080081cc <_fflush_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	690b      	ldr	r3, [r1, #16]
 80081d0:	4605      	mov	r5, r0
 80081d2:	460c      	mov	r4, r1
 80081d4:	b913      	cbnz	r3, 80081dc <_fflush_r+0x10>
 80081d6:	2500      	movs	r5, #0
 80081d8:	4628      	mov	r0, r5
 80081da:	bd38      	pop	{r3, r4, r5, pc}
 80081dc:	b118      	cbz	r0, 80081e6 <_fflush_r+0x1a>
 80081de:	6983      	ldr	r3, [r0, #24]
 80081e0:	b90b      	cbnz	r3, 80081e6 <_fflush_r+0x1a>
 80081e2:	f000 f887 	bl	80082f4 <__sinit>
 80081e6:	4b14      	ldr	r3, [pc, #80]	; (8008238 <_fflush_r+0x6c>)
 80081e8:	429c      	cmp	r4, r3
 80081ea:	d11b      	bne.n	8008224 <_fflush_r+0x58>
 80081ec:	686c      	ldr	r4, [r5, #4]
 80081ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d0ef      	beq.n	80081d6 <_fflush_r+0xa>
 80081f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081f8:	07d0      	lsls	r0, r2, #31
 80081fa:	d404      	bmi.n	8008206 <_fflush_r+0x3a>
 80081fc:	0599      	lsls	r1, r3, #22
 80081fe:	d402      	bmi.n	8008206 <_fflush_r+0x3a>
 8008200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008202:	f000 f915 	bl	8008430 <__retarget_lock_acquire_recursive>
 8008206:	4628      	mov	r0, r5
 8008208:	4621      	mov	r1, r4
 800820a:	f7ff ff5d 	bl	80080c8 <__sflush_r>
 800820e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008210:	4605      	mov	r5, r0
 8008212:	07da      	lsls	r2, r3, #31
 8008214:	d4e0      	bmi.n	80081d8 <_fflush_r+0xc>
 8008216:	89a3      	ldrh	r3, [r4, #12]
 8008218:	059b      	lsls	r3, r3, #22
 800821a:	d4dd      	bmi.n	80081d8 <_fflush_r+0xc>
 800821c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800821e:	f000 f908 	bl	8008432 <__retarget_lock_release_recursive>
 8008222:	e7d9      	b.n	80081d8 <_fflush_r+0xc>
 8008224:	4b05      	ldr	r3, [pc, #20]	; (800823c <_fflush_r+0x70>)
 8008226:	429c      	cmp	r4, r3
 8008228:	d101      	bne.n	800822e <_fflush_r+0x62>
 800822a:	68ac      	ldr	r4, [r5, #8]
 800822c:	e7df      	b.n	80081ee <_fflush_r+0x22>
 800822e:	4b04      	ldr	r3, [pc, #16]	; (8008240 <_fflush_r+0x74>)
 8008230:	429c      	cmp	r4, r3
 8008232:	bf08      	it	eq
 8008234:	68ec      	ldreq	r4, [r5, #12]
 8008236:	e7da      	b.n	80081ee <_fflush_r+0x22>
 8008238:	08008b14 	.word	0x08008b14
 800823c:	08008b34 	.word	0x08008b34
 8008240:	08008af4 	.word	0x08008af4

08008244 <std>:
 8008244:	2300      	movs	r3, #0
 8008246:	b510      	push	{r4, lr}
 8008248:	4604      	mov	r4, r0
 800824a:	e9c0 3300 	strd	r3, r3, [r0]
 800824e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008252:	6083      	str	r3, [r0, #8]
 8008254:	8181      	strh	r1, [r0, #12]
 8008256:	6643      	str	r3, [r0, #100]	; 0x64
 8008258:	81c2      	strh	r2, [r0, #14]
 800825a:	6183      	str	r3, [r0, #24]
 800825c:	4619      	mov	r1, r3
 800825e:	2208      	movs	r2, #8
 8008260:	305c      	adds	r0, #92	; 0x5c
 8008262:	f7fd fb43 	bl	80058ec <memset>
 8008266:	4b05      	ldr	r3, [pc, #20]	; (800827c <std+0x38>)
 8008268:	6224      	str	r4, [r4, #32]
 800826a:	6263      	str	r3, [r4, #36]	; 0x24
 800826c:	4b04      	ldr	r3, [pc, #16]	; (8008280 <std+0x3c>)
 800826e:	62a3      	str	r3, [r4, #40]	; 0x28
 8008270:	4b04      	ldr	r3, [pc, #16]	; (8008284 <std+0x40>)
 8008272:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008274:	4b04      	ldr	r3, [pc, #16]	; (8008288 <std+0x44>)
 8008276:	6323      	str	r3, [r4, #48]	; 0x30
 8008278:	bd10      	pop	{r4, pc}
 800827a:	bf00      	nop
 800827c:	08008599 	.word	0x08008599
 8008280:	080085bb 	.word	0x080085bb
 8008284:	080085f3 	.word	0x080085f3
 8008288:	08008617 	.word	0x08008617

0800828c <_cleanup_r>:
 800828c:	4901      	ldr	r1, [pc, #4]	; (8008294 <_cleanup_r+0x8>)
 800828e:	f000 b8af 	b.w	80083f0 <_fwalk_reent>
 8008292:	bf00      	nop
 8008294:	080081cd 	.word	0x080081cd

08008298 <__sfmoreglue>:
 8008298:	2268      	movs	r2, #104	; 0x68
 800829a:	b570      	push	{r4, r5, r6, lr}
 800829c:	1e4d      	subs	r5, r1, #1
 800829e:	4355      	muls	r5, r2
 80082a0:	460e      	mov	r6, r1
 80082a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082a6:	f7ff fa6b 	bl	8007780 <_malloc_r>
 80082aa:	4604      	mov	r4, r0
 80082ac:	b140      	cbz	r0, 80082c0 <__sfmoreglue+0x28>
 80082ae:	2100      	movs	r1, #0
 80082b0:	e9c0 1600 	strd	r1, r6, [r0]
 80082b4:	300c      	adds	r0, #12
 80082b6:	60a0      	str	r0, [r4, #8]
 80082b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082bc:	f7fd fb16 	bl	80058ec <memset>
 80082c0:	4620      	mov	r0, r4
 80082c2:	bd70      	pop	{r4, r5, r6, pc}

080082c4 <__sfp_lock_acquire>:
 80082c4:	4801      	ldr	r0, [pc, #4]	; (80082cc <__sfp_lock_acquire+0x8>)
 80082c6:	f000 b8b3 	b.w	8008430 <__retarget_lock_acquire_recursive>
 80082ca:	bf00      	nop
 80082cc:	2000037d 	.word	0x2000037d

080082d0 <__sfp_lock_release>:
 80082d0:	4801      	ldr	r0, [pc, #4]	; (80082d8 <__sfp_lock_release+0x8>)
 80082d2:	f000 b8ae 	b.w	8008432 <__retarget_lock_release_recursive>
 80082d6:	bf00      	nop
 80082d8:	2000037d 	.word	0x2000037d

080082dc <__sinit_lock_acquire>:
 80082dc:	4801      	ldr	r0, [pc, #4]	; (80082e4 <__sinit_lock_acquire+0x8>)
 80082de:	f000 b8a7 	b.w	8008430 <__retarget_lock_acquire_recursive>
 80082e2:	bf00      	nop
 80082e4:	2000037e 	.word	0x2000037e

080082e8 <__sinit_lock_release>:
 80082e8:	4801      	ldr	r0, [pc, #4]	; (80082f0 <__sinit_lock_release+0x8>)
 80082ea:	f000 b8a2 	b.w	8008432 <__retarget_lock_release_recursive>
 80082ee:	bf00      	nop
 80082f0:	2000037e 	.word	0x2000037e

080082f4 <__sinit>:
 80082f4:	b510      	push	{r4, lr}
 80082f6:	4604      	mov	r4, r0
 80082f8:	f7ff fff0 	bl	80082dc <__sinit_lock_acquire>
 80082fc:	69a3      	ldr	r3, [r4, #24]
 80082fe:	b11b      	cbz	r3, 8008308 <__sinit+0x14>
 8008300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008304:	f7ff bff0 	b.w	80082e8 <__sinit_lock_release>
 8008308:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800830c:	6523      	str	r3, [r4, #80]	; 0x50
 800830e:	4b13      	ldr	r3, [pc, #76]	; (800835c <__sinit+0x68>)
 8008310:	4a13      	ldr	r2, [pc, #76]	; (8008360 <__sinit+0x6c>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	62a2      	str	r2, [r4, #40]	; 0x28
 8008316:	42a3      	cmp	r3, r4
 8008318:	bf08      	it	eq
 800831a:	2301      	moveq	r3, #1
 800831c:	4620      	mov	r0, r4
 800831e:	bf08      	it	eq
 8008320:	61a3      	streq	r3, [r4, #24]
 8008322:	f000 f81f 	bl	8008364 <__sfp>
 8008326:	6060      	str	r0, [r4, #4]
 8008328:	4620      	mov	r0, r4
 800832a:	f000 f81b 	bl	8008364 <__sfp>
 800832e:	60a0      	str	r0, [r4, #8]
 8008330:	4620      	mov	r0, r4
 8008332:	f000 f817 	bl	8008364 <__sfp>
 8008336:	2200      	movs	r2, #0
 8008338:	2104      	movs	r1, #4
 800833a:	60e0      	str	r0, [r4, #12]
 800833c:	6860      	ldr	r0, [r4, #4]
 800833e:	f7ff ff81 	bl	8008244 <std>
 8008342:	2201      	movs	r2, #1
 8008344:	2109      	movs	r1, #9
 8008346:	68a0      	ldr	r0, [r4, #8]
 8008348:	f7ff ff7c 	bl	8008244 <std>
 800834c:	2202      	movs	r2, #2
 800834e:	2112      	movs	r1, #18
 8008350:	68e0      	ldr	r0, [r4, #12]
 8008352:	f7ff ff77 	bl	8008244 <std>
 8008356:	2301      	movs	r3, #1
 8008358:	61a3      	str	r3, [r4, #24]
 800835a:	e7d1      	b.n	8008300 <__sinit+0xc>
 800835c:	08008778 	.word	0x08008778
 8008360:	0800828d 	.word	0x0800828d

08008364 <__sfp>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	4607      	mov	r7, r0
 8008368:	f7ff ffac 	bl	80082c4 <__sfp_lock_acquire>
 800836c:	4b1e      	ldr	r3, [pc, #120]	; (80083e8 <__sfp+0x84>)
 800836e:	681e      	ldr	r6, [r3, #0]
 8008370:	69b3      	ldr	r3, [r6, #24]
 8008372:	b913      	cbnz	r3, 800837a <__sfp+0x16>
 8008374:	4630      	mov	r0, r6
 8008376:	f7ff ffbd 	bl	80082f4 <__sinit>
 800837a:	3648      	adds	r6, #72	; 0x48
 800837c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008380:	3b01      	subs	r3, #1
 8008382:	d503      	bpl.n	800838c <__sfp+0x28>
 8008384:	6833      	ldr	r3, [r6, #0]
 8008386:	b30b      	cbz	r3, 80083cc <__sfp+0x68>
 8008388:	6836      	ldr	r6, [r6, #0]
 800838a:	e7f7      	b.n	800837c <__sfp+0x18>
 800838c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008390:	b9d5      	cbnz	r5, 80083c8 <__sfp+0x64>
 8008392:	4b16      	ldr	r3, [pc, #88]	; (80083ec <__sfp+0x88>)
 8008394:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008398:	60e3      	str	r3, [r4, #12]
 800839a:	6665      	str	r5, [r4, #100]	; 0x64
 800839c:	f000 f847 	bl	800842e <__retarget_lock_init_recursive>
 80083a0:	f7ff ff96 	bl	80082d0 <__sfp_lock_release>
 80083a4:	2208      	movs	r2, #8
 80083a6:	4629      	mov	r1, r5
 80083a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083b0:	6025      	str	r5, [r4, #0]
 80083b2:	61a5      	str	r5, [r4, #24]
 80083b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083b8:	f7fd fa98 	bl	80058ec <memset>
 80083bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083c4:	4620      	mov	r0, r4
 80083c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083c8:	3468      	adds	r4, #104	; 0x68
 80083ca:	e7d9      	b.n	8008380 <__sfp+0x1c>
 80083cc:	2104      	movs	r1, #4
 80083ce:	4638      	mov	r0, r7
 80083d0:	f7ff ff62 	bl	8008298 <__sfmoreglue>
 80083d4:	4604      	mov	r4, r0
 80083d6:	6030      	str	r0, [r6, #0]
 80083d8:	2800      	cmp	r0, #0
 80083da:	d1d5      	bne.n	8008388 <__sfp+0x24>
 80083dc:	f7ff ff78 	bl	80082d0 <__sfp_lock_release>
 80083e0:	230c      	movs	r3, #12
 80083e2:	603b      	str	r3, [r7, #0]
 80083e4:	e7ee      	b.n	80083c4 <__sfp+0x60>
 80083e6:	bf00      	nop
 80083e8:	08008778 	.word	0x08008778
 80083ec:	ffff0001 	.word	0xffff0001

080083f0 <_fwalk_reent>:
 80083f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083f4:	4606      	mov	r6, r0
 80083f6:	4688      	mov	r8, r1
 80083f8:	2700      	movs	r7, #0
 80083fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008402:	f1b9 0901 	subs.w	r9, r9, #1
 8008406:	d505      	bpl.n	8008414 <_fwalk_reent+0x24>
 8008408:	6824      	ldr	r4, [r4, #0]
 800840a:	2c00      	cmp	r4, #0
 800840c:	d1f7      	bne.n	80083fe <_fwalk_reent+0xe>
 800840e:	4638      	mov	r0, r7
 8008410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008414:	89ab      	ldrh	r3, [r5, #12]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d907      	bls.n	800842a <_fwalk_reent+0x3a>
 800841a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800841e:	3301      	adds	r3, #1
 8008420:	d003      	beq.n	800842a <_fwalk_reent+0x3a>
 8008422:	4629      	mov	r1, r5
 8008424:	4630      	mov	r0, r6
 8008426:	47c0      	blx	r8
 8008428:	4307      	orrs	r7, r0
 800842a:	3568      	adds	r5, #104	; 0x68
 800842c:	e7e9      	b.n	8008402 <_fwalk_reent+0x12>

0800842e <__retarget_lock_init_recursive>:
 800842e:	4770      	bx	lr

08008430 <__retarget_lock_acquire_recursive>:
 8008430:	4770      	bx	lr

08008432 <__retarget_lock_release_recursive>:
 8008432:	4770      	bx	lr

08008434 <__swhatbuf_r>:
 8008434:	b570      	push	{r4, r5, r6, lr}
 8008436:	460e      	mov	r6, r1
 8008438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800843c:	4614      	mov	r4, r2
 800843e:	2900      	cmp	r1, #0
 8008440:	461d      	mov	r5, r3
 8008442:	b096      	sub	sp, #88	; 0x58
 8008444:	da08      	bge.n	8008458 <__swhatbuf_r+0x24>
 8008446:	2200      	movs	r2, #0
 8008448:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800844c:	602a      	str	r2, [r5, #0]
 800844e:	061a      	lsls	r2, r3, #24
 8008450:	d410      	bmi.n	8008474 <__swhatbuf_r+0x40>
 8008452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008456:	e00e      	b.n	8008476 <__swhatbuf_r+0x42>
 8008458:	466a      	mov	r2, sp
 800845a:	f000 f903 	bl	8008664 <_fstat_r>
 800845e:	2800      	cmp	r0, #0
 8008460:	dbf1      	blt.n	8008446 <__swhatbuf_r+0x12>
 8008462:	9a01      	ldr	r2, [sp, #4]
 8008464:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008468:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800846c:	425a      	negs	r2, r3
 800846e:	415a      	adcs	r2, r3
 8008470:	602a      	str	r2, [r5, #0]
 8008472:	e7ee      	b.n	8008452 <__swhatbuf_r+0x1e>
 8008474:	2340      	movs	r3, #64	; 0x40
 8008476:	2000      	movs	r0, #0
 8008478:	6023      	str	r3, [r4, #0]
 800847a:	b016      	add	sp, #88	; 0x58
 800847c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008480 <__smakebuf_r>:
 8008480:	898b      	ldrh	r3, [r1, #12]
 8008482:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008484:	079d      	lsls	r5, r3, #30
 8008486:	4606      	mov	r6, r0
 8008488:	460c      	mov	r4, r1
 800848a:	d507      	bpl.n	800849c <__smakebuf_r+0x1c>
 800848c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008490:	6023      	str	r3, [r4, #0]
 8008492:	6123      	str	r3, [r4, #16]
 8008494:	2301      	movs	r3, #1
 8008496:	6163      	str	r3, [r4, #20]
 8008498:	b002      	add	sp, #8
 800849a:	bd70      	pop	{r4, r5, r6, pc}
 800849c:	466a      	mov	r2, sp
 800849e:	ab01      	add	r3, sp, #4
 80084a0:	f7ff ffc8 	bl	8008434 <__swhatbuf_r>
 80084a4:	9900      	ldr	r1, [sp, #0]
 80084a6:	4605      	mov	r5, r0
 80084a8:	4630      	mov	r0, r6
 80084aa:	f7ff f969 	bl	8007780 <_malloc_r>
 80084ae:	b948      	cbnz	r0, 80084c4 <__smakebuf_r+0x44>
 80084b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084b4:	059a      	lsls	r2, r3, #22
 80084b6:	d4ef      	bmi.n	8008498 <__smakebuf_r+0x18>
 80084b8:	f023 0303 	bic.w	r3, r3, #3
 80084bc:	f043 0302 	orr.w	r3, r3, #2
 80084c0:	81a3      	strh	r3, [r4, #12]
 80084c2:	e7e3      	b.n	800848c <__smakebuf_r+0xc>
 80084c4:	4b0d      	ldr	r3, [pc, #52]	; (80084fc <__smakebuf_r+0x7c>)
 80084c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	6020      	str	r0, [r4, #0]
 80084cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084d0:	81a3      	strh	r3, [r4, #12]
 80084d2:	9b00      	ldr	r3, [sp, #0]
 80084d4:	6120      	str	r0, [r4, #16]
 80084d6:	6163      	str	r3, [r4, #20]
 80084d8:	9b01      	ldr	r3, [sp, #4]
 80084da:	b15b      	cbz	r3, 80084f4 <__smakebuf_r+0x74>
 80084dc:	4630      	mov	r0, r6
 80084de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084e2:	f000 f8d1 	bl	8008688 <_isatty_r>
 80084e6:	b128      	cbz	r0, 80084f4 <__smakebuf_r+0x74>
 80084e8:	89a3      	ldrh	r3, [r4, #12]
 80084ea:	f023 0303 	bic.w	r3, r3, #3
 80084ee:	f043 0301 	orr.w	r3, r3, #1
 80084f2:	81a3      	strh	r3, [r4, #12]
 80084f4:	89a0      	ldrh	r0, [r4, #12]
 80084f6:	4305      	orrs	r5, r0
 80084f8:	81a5      	strh	r5, [r4, #12]
 80084fa:	e7cd      	b.n	8008498 <__smakebuf_r+0x18>
 80084fc:	0800828d 	.word	0x0800828d

08008500 <_malloc_usable_size_r>:
 8008500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008504:	1f18      	subs	r0, r3, #4
 8008506:	2b00      	cmp	r3, #0
 8008508:	bfbc      	itt	lt
 800850a:	580b      	ldrlt	r3, [r1, r0]
 800850c:	18c0      	addlt	r0, r0, r3
 800850e:	4770      	bx	lr

08008510 <_raise_r>:
 8008510:	291f      	cmp	r1, #31
 8008512:	b538      	push	{r3, r4, r5, lr}
 8008514:	4604      	mov	r4, r0
 8008516:	460d      	mov	r5, r1
 8008518:	d904      	bls.n	8008524 <_raise_r+0x14>
 800851a:	2316      	movs	r3, #22
 800851c:	6003      	str	r3, [r0, #0]
 800851e:	f04f 30ff 	mov.w	r0, #4294967295
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008526:	b112      	cbz	r2, 800852e <_raise_r+0x1e>
 8008528:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800852c:	b94b      	cbnz	r3, 8008542 <_raise_r+0x32>
 800852e:	4620      	mov	r0, r4
 8008530:	f000 f830 	bl	8008594 <_getpid_r>
 8008534:	462a      	mov	r2, r5
 8008536:	4601      	mov	r1, r0
 8008538:	4620      	mov	r0, r4
 800853a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800853e:	f000 b817 	b.w	8008570 <_kill_r>
 8008542:	2b01      	cmp	r3, #1
 8008544:	d00a      	beq.n	800855c <_raise_r+0x4c>
 8008546:	1c59      	adds	r1, r3, #1
 8008548:	d103      	bne.n	8008552 <_raise_r+0x42>
 800854a:	2316      	movs	r3, #22
 800854c:	6003      	str	r3, [r0, #0]
 800854e:	2001      	movs	r0, #1
 8008550:	e7e7      	b.n	8008522 <_raise_r+0x12>
 8008552:	2400      	movs	r4, #0
 8008554:	4628      	mov	r0, r5
 8008556:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800855a:	4798      	blx	r3
 800855c:	2000      	movs	r0, #0
 800855e:	e7e0      	b.n	8008522 <_raise_r+0x12>

08008560 <raise>:
 8008560:	4b02      	ldr	r3, [pc, #8]	; (800856c <raise+0xc>)
 8008562:	4601      	mov	r1, r0
 8008564:	6818      	ldr	r0, [r3, #0]
 8008566:	f7ff bfd3 	b.w	8008510 <_raise_r>
 800856a:	bf00      	nop
 800856c:	2000002c 	.word	0x2000002c

08008570 <_kill_r>:
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	2300      	movs	r3, #0
 8008574:	4d06      	ldr	r5, [pc, #24]	; (8008590 <_kill_r+0x20>)
 8008576:	4604      	mov	r4, r0
 8008578:	4608      	mov	r0, r1
 800857a:	4611      	mov	r1, r2
 800857c:	602b      	str	r3, [r5, #0]
 800857e:	f7f9 febe 	bl	80022fe <_kill>
 8008582:	1c43      	adds	r3, r0, #1
 8008584:	d102      	bne.n	800858c <_kill_r+0x1c>
 8008586:	682b      	ldr	r3, [r5, #0]
 8008588:	b103      	cbz	r3, 800858c <_kill_r+0x1c>
 800858a:	6023      	str	r3, [r4, #0]
 800858c:	bd38      	pop	{r3, r4, r5, pc}
 800858e:	bf00      	nop
 8008590:	20000378 	.word	0x20000378

08008594 <_getpid_r>:
 8008594:	f7f9 beac 	b.w	80022f0 <_getpid>

08008598 <__sread>:
 8008598:	b510      	push	{r4, lr}
 800859a:	460c      	mov	r4, r1
 800859c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a0:	f000 f894 	bl	80086cc <_read_r>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	bfab      	itete	ge
 80085a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085aa:	89a3      	ldrhlt	r3, [r4, #12]
 80085ac:	181b      	addge	r3, r3, r0
 80085ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085b2:	bfac      	ite	ge
 80085b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80085b6:	81a3      	strhlt	r3, [r4, #12]
 80085b8:	bd10      	pop	{r4, pc}

080085ba <__swrite>:
 80085ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085be:	461f      	mov	r7, r3
 80085c0:	898b      	ldrh	r3, [r1, #12]
 80085c2:	4605      	mov	r5, r0
 80085c4:	05db      	lsls	r3, r3, #23
 80085c6:	460c      	mov	r4, r1
 80085c8:	4616      	mov	r6, r2
 80085ca:	d505      	bpl.n	80085d8 <__swrite+0x1e>
 80085cc:	2302      	movs	r3, #2
 80085ce:	2200      	movs	r2, #0
 80085d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d4:	f000 f868 	bl	80086a8 <_lseek_r>
 80085d8:	89a3      	ldrh	r3, [r4, #12]
 80085da:	4632      	mov	r2, r6
 80085dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085e0:	81a3      	strh	r3, [r4, #12]
 80085e2:	4628      	mov	r0, r5
 80085e4:	463b      	mov	r3, r7
 80085e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085ee:	f000 b817 	b.w	8008620 <_write_r>

080085f2 <__sseek>:
 80085f2:	b510      	push	{r4, lr}
 80085f4:	460c      	mov	r4, r1
 80085f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085fa:	f000 f855 	bl	80086a8 <_lseek_r>
 80085fe:	1c43      	adds	r3, r0, #1
 8008600:	89a3      	ldrh	r3, [r4, #12]
 8008602:	bf15      	itete	ne
 8008604:	6560      	strne	r0, [r4, #84]	; 0x54
 8008606:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800860a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800860e:	81a3      	strheq	r3, [r4, #12]
 8008610:	bf18      	it	ne
 8008612:	81a3      	strhne	r3, [r4, #12]
 8008614:	bd10      	pop	{r4, pc}

08008616 <__sclose>:
 8008616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800861a:	f000 b813 	b.w	8008644 <_close_r>
	...

08008620 <_write_r>:
 8008620:	b538      	push	{r3, r4, r5, lr}
 8008622:	4604      	mov	r4, r0
 8008624:	4608      	mov	r0, r1
 8008626:	4611      	mov	r1, r2
 8008628:	2200      	movs	r2, #0
 800862a:	4d05      	ldr	r5, [pc, #20]	; (8008640 <_write_r+0x20>)
 800862c:	602a      	str	r2, [r5, #0]
 800862e:	461a      	mov	r2, r3
 8008630:	f7f9 fe9c 	bl	800236c <_write>
 8008634:	1c43      	adds	r3, r0, #1
 8008636:	d102      	bne.n	800863e <_write_r+0x1e>
 8008638:	682b      	ldr	r3, [r5, #0]
 800863a:	b103      	cbz	r3, 800863e <_write_r+0x1e>
 800863c:	6023      	str	r3, [r4, #0]
 800863e:	bd38      	pop	{r3, r4, r5, pc}
 8008640:	20000378 	.word	0x20000378

08008644 <_close_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	2300      	movs	r3, #0
 8008648:	4d05      	ldr	r5, [pc, #20]	; (8008660 <_close_r+0x1c>)
 800864a:	4604      	mov	r4, r0
 800864c:	4608      	mov	r0, r1
 800864e:	602b      	str	r3, [r5, #0]
 8008650:	f7f9 fea8 	bl	80023a4 <_close>
 8008654:	1c43      	adds	r3, r0, #1
 8008656:	d102      	bne.n	800865e <_close_r+0x1a>
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	b103      	cbz	r3, 800865e <_close_r+0x1a>
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	bd38      	pop	{r3, r4, r5, pc}
 8008660:	20000378 	.word	0x20000378

08008664 <_fstat_r>:
 8008664:	b538      	push	{r3, r4, r5, lr}
 8008666:	2300      	movs	r3, #0
 8008668:	4d06      	ldr	r5, [pc, #24]	; (8008684 <_fstat_r+0x20>)
 800866a:	4604      	mov	r4, r0
 800866c:	4608      	mov	r0, r1
 800866e:	4611      	mov	r1, r2
 8008670:	602b      	str	r3, [r5, #0]
 8008672:	f7f9 fea2 	bl	80023ba <_fstat>
 8008676:	1c43      	adds	r3, r0, #1
 8008678:	d102      	bne.n	8008680 <_fstat_r+0x1c>
 800867a:	682b      	ldr	r3, [r5, #0]
 800867c:	b103      	cbz	r3, 8008680 <_fstat_r+0x1c>
 800867e:	6023      	str	r3, [r4, #0]
 8008680:	bd38      	pop	{r3, r4, r5, pc}
 8008682:	bf00      	nop
 8008684:	20000378 	.word	0x20000378

08008688 <_isatty_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	2300      	movs	r3, #0
 800868c:	4d05      	ldr	r5, [pc, #20]	; (80086a4 <_isatty_r+0x1c>)
 800868e:	4604      	mov	r4, r0
 8008690:	4608      	mov	r0, r1
 8008692:	602b      	str	r3, [r5, #0]
 8008694:	f7f9 fea0 	bl	80023d8 <_isatty>
 8008698:	1c43      	adds	r3, r0, #1
 800869a:	d102      	bne.n	80086a2 <_isatty_r+0x1a>
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	b103      	cbz	r3, 80086a2 <_isatty_r+0x1a>
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	bd38      	pop	{r3, r4, r5, pc}
 80086a4:	20000378 	.word	0x20000378

080086a8 <_lseek_r>:
 80086a8:	b538      	push	{r3, r4, r5, lr}
 80086aa:	4604      	mov	r4, r0
 80086ac:	4608      	mov	r0, r1
 80086ae:	4611      	mov	r1, r2
 80086b0:	2200      	movs	r2, #0
 80086b2:	4d05      	ldr	r5, [pc, #20]	; (80086c8 <_lseek_r+0x20>)
 80086b4:	602a      	str	r2, [r5, #0]
 80086b6:	461a      	mov	r2, r3
 80086b8:	f7f9 fe98 	bl	80023ec <_lseek>
 80086bc:	1c43      	adds	r3, r0, #1
 80086be:	d102      	bne.n	80086c6 <_lseek_r+0x1e>
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	b103      	cbz	r3, 80086c6 <_lseek_r+0x1e>
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	bd38      	pop	{r3, r4, r5, pc}
 80086c8:	20000378 	.word	0x20000378

080086cc <_read_r>:
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	4604      	mov	r4, r0
 80086d0:	4608      	mov	r0, r1
 80086d2:	4611      	mov	r1, r2
 80086d4:	2200      	movs	r2, #0
 80086d6:	4d05      	ldr	r5, [pc, #20]	; (80086ec <_read_r+0x20>)
 80086d8:	602a      	str	r2, [r5, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	f7f9 fe29 	bl	8002332 <_read>
 80086e0:	1c43      	adds	r3, r0, #1
 80086e2:	d102      	bne.n	80086ea <_read_r+0x1e>
 80086e4:	682b      	ldr	r3, [r5, #0]
 80086e6:	b103      	cbz	r3, 80086ea <_read_r+0x1e>
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	20000378 	.word	0x20000378

080086f0 <_init>:
 80086f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086f2:	bf00      	nop
 80086f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086f6:	bc08      	pop	{r3}
 80086f8:	469e      	mov	lr, r3
 80086fa:	4770      	bx	lr

080086fc <_fini>:
 80086fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fe:	bf00      	nop
 8008700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008702:	bc08      	pop	{r3}
 8008704:	469e      	mov	lr, r3
 8008706:	4770      	bx	lr
