
proyecto_e4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008868  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  08008978  08008978  00018978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dbc  08008dbc  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08008dbc  08008dbc  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008dbc  08008dbc  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dbc  08008dbc  00018dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dc0  08008dc0  00018dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200001f4  08008fb8  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08008fb8  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d56a  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000214c  00000000  00000000  0002d787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0002f8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  000306e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e88  00000000  00000000  000313f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010107  00000000  00000000  0004a280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c60a  00000000  00000000  0005a387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6991  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d4c  00000000  00000000  000e69e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008960 	.word	0x08008960

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08008960 	.word	0x08008960

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	; 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__gesf2>:
 8000d98:	f04f 3cff 	mov.w	ip, #4294967295
 8000d9c:	e006      	b.n	8000dac <__cmpsf2+0x4>
 8000d9e:	bf00      	nop

08000da0 <__lesf2>:
 8000da0:	f04f 0c01 	mov.w	ip, #1
 8000da4:	e002      	b.n	8000dac <__cmpsf2+0x4>
 8000da6:	bf00      	nop

08000da8 <__cmpsf2>:
 8000da8:	f04f 0c01 	mov.w	ip, #1
 8000dac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000db0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000db4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000db8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dbc:	bf18      	it	ne
 8000dbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dc2:	d011      	beq.n	8000de8 <__cmpsf2+0x40>
 8000dc4:	b001      	add	sp, #4
 8000dc6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000dca:	bf18      	it	ne
 8000dcc:	ea90 0f01 	teqne	r0, r1
 8000dd0:	bf58      	it	pl
 8000dd2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dd6:	bf88      	it	hi
 8000dd8:	17c8      	asrhi	r0, r1, #31
 8000dda:	bf38      	it	cc
 8000ddc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000de0:	bf18      	it	ne
 8000de2:	f040 0001 	orrne.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dec:	d102      	bne.n	8000df4 <__cmpsf2+0x4c>
 8000dee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000df2:	d105      	bne.n	8000e00 <__cmpsf2+0x58>
 8000df4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000df8:	d1e4      	bne.n	8000dc4 <__cmpsf2+0x1c>
 8000dfa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dfe:	d0e1      	beq.n	8000dc4 <__cmpsf2+0x1c>
 8000e00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <__aeabi_cfrcmple>:
 8000e08:	4684      	mov	ip, r0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	4661      	mov	r1, ip
 8000e0e:	e7ff      	b.n	8000e10 <__aeabi_cfcmpeq>

08000e10 <__aeabi_cfcmpeq>:
 8000e10:	b50f      	push	{r0, r1, r2, r3, lr}
 8000e12:	f7ff ffc9 	bl	8000da8 <__cmpsf2>
 8000e16:	2800      	cmp	r0, #0
 8000e18:	bf48      	it	mi
 8000e1a:	f110 0f00 	cmnmi.w	r0, #0
 8000e1e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e20 <__aeabi_fcmpeq>:
 8000e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e24:	f7ff fff4 	bl	8000e10 <__aeabi_cfcmpeq>
 8000e28:	bf0c      	ite	eq
 8000e2a:	2001      	moveq	r0, #1
 8000e2c:	2000      	movne	r0, #0
 8000e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e32:	bf00      	nop

08000e34 <__aeabi_fcmplt>:
 8000e34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e38:	f7ff ffea 	bl	8000e10 <__aeabi_cfcmpeq>
 8000e3c:	bf34      	ite	cc
 8000e3e:	2001      	movcc	r0, #1
 8000e40:	2000      	movcs	r0, #0
 8000e42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e46:	bf00      	nop

08000e48 <__aeabi_fcmple>:
 8000e48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e4c:	f7ff ffe0 	bl	8000e10 <__aeabi_cfcmpeq>
 8000e50:	bf94      	ite	ls
 8000e52:	2001      	movls	r0, #1
 8000e54:	2000      	movhi	r0, #0
 8000e56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5a:	bf00      	nop

08000e5c <__aeabi_fcmpge>:
 8000e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e60:	f7ff ffd2 	bl	8000e08 <__aeabi_cfrcmple>
 8000e64:	bf94      	ite	ls
 8000e66:	2001      	movls	r0, #1
 8000e68:	2000      	movhi	r0, #0
 8000e6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e6e:	bf00      	nop

08000e70 <__aeabi_fcmpgt>:
 8000e70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e74:	f7ff ffc8 	bl	8000e08 <__aeabi_cfrcmple>
 8000e78:	bf34      	ite	cc
 8000e7a:	2001      	movcc	r0, #1
 8000e7c:	2000      	movcs	r0, #0
 8000e7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e82:	bf00      	nop

08000e84 <readCalibrationData>:
long X1, X2, X3, B3, B5, B6, P, T=0;
unsigned long B4, B7=0;


void readCalibrationData (void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af04      	add	r7, sp, #16
uint8_t calibData[21]={0};
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	741a      	strb	r2, [r3, #16]

//HAL_I2C_Mem_Read(&hi2c1, DevAddress, MemAddress, MemAddSize (por bytes), pData, Size, Timeout)
HAL_I2C_Mem_Read(&hi2c1, devAddRead, 0xAA, 1, calibData, 21, 50);
 8000e9c:	2332      	movs	r3, #50	; 0x32
 8000e9e:	9302      	str	r3, [sp, #8]
 8000ea0:	2315      	movs	r3, #21
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	22aa      	movs	r2, #170	; 0xaa
 8000eac:	21ee      	movs	r1, #238	; 0xee
 8000eae:	4836      	ldr	r0, [pc, #216]	; (8000f88 <readCalibrationData+0x104>)
 8000eb0:	f002 faf6 	bl	80034a0 <HAL_I2C_Mem_Read>

AC1 = (calibData[0]<<8 | calibData[1]);
 8000eb4:	783b      	ldrb	r3, [r7, #0]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	b21a      	sxth	r2, r3
 8000eba:	787b      	ldrb	r3, [r7, #1]
 8000ebc:	b21b      	sxth	r3, r3
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	4b32      	ldr	r3, [pc, #200]	; (8000f8c <readCalibrationData+0x108>)
 8000ec4:	801a      	strh	r2, [r3, #0]
AC2 = (calibData[2]<<8 | calibData[3]);
 8000ec6:	78bb      	ldrb	r3, [r7, #2]
 8000ec8:	021b      	lsls	r3, r3, #8
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	b21a      	sxth	r2, r3
 8000ed4:	4b2e      	ldr	r3, [pc, #184]	; (8000f90 <readCalibrationData+0x10c>)
 8000ed6:	801a      	strh	r2, [r3, #0]
AC3 = (calibData[4]<<8 | calibData[5]);
 8000ed8:	793b      	ldrb	r3, [r7, #4]
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	b21a      	sxth	r2, r3
 8000ede:	797b      	ldrb	r3, [r7, #5]
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <readCalibrationData+0x110>)
 8000ee8:	801a      	strh	r2, [r3, #0]
AC4 = (calibData[6]<<8 | calibData[7]);
 8000eea:	79bb      	ldrb	r3, [r7, #6]
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	b21a      	sxth	r2, r3
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	b21b      	sxth	r3, r3
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	b21b      	sxth	r3, r3
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <readCalibrationData+0x114>)
 8000efc:	801a      	strh	r2, [r3, #0]
AC5 = (calibData[8]<<8 | calibData[9]);
 8000efe:	7a3b      	ldrb	r3, [r7, #8]
 8000f00:	021b      	lsls	r3, r3, #8
 8000f02:	b21a      	sxth	r2, r3
 8000f04:	7a7b      	ldrb	r3, [r7, #9]
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <readCalibrationData+0x118>)
 8000f10:	801a      	strh	r2, [r3, #0]
AC6 = (calibData[10]<<8 | calibData[11]);
 8000f12:	7abb      	ldrb	r3, [r7, #10]
 8000f14:	021b      	lsls	r3, r3, #8
 8000f16:	b21a      	sxth	r2, r3
 8000f18:	7afb      	ldrb	r3, [r7, #11]
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	b21b      	sxth	r3, r3
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <readCalibrationData+0x11c>)
 8000f24:	801a      	strh	r2, [r3, #0]
B1 = (calibData[12]<<8 | calibData[13]);
 8000f26:	7b3b      	ldrb	r3, [r7, #12]
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	7b7b      	ldrb	r3, [r7, #13]
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <readCalibrationData+0x120>)
 8000f36:	801a      	strh	r2, [r3, #0]
B2 = (calibData[14]<<8 | calibData[15]);
 8000f38:	7bbb      	ldrb	r3, [r7, #14]
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	b21a      	sxth	r2, r3
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	4313      	orrs	r3, r2
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <readCalibrationData+0x124>)
 8000f48:	801a      	strh	r2, [r3, #0]
MB = (calibData[16]<<8 | calibData[17]);
 8000f4a:	7c3b      	ldrb	r3, [r7, #16]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	7c7b      	ldrb	r3, [r7, #17]
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	4313      	orrs	r3, r2
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <readCalibrationData+0x128>)
 8000f5a:	801a      	strh	r2, [r3, #0]
MC = (calibData[18]<<8 | calibData[19]);
 8000f5c:	7cbb      	ldrb	r3, [r7, #18]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	7cfb      	ldrb	r3, [r7, #19]
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <readCalibrationData+0x12c>)
 8000f6c:	801a      	strh	r2, [r3, #0]
MD = (calibData[20]<<8 | calibData[21]);
 8000f6e:	7d3b      	ldrb	r3, [r7, #20]
 8000f70:	021b      	lsls	r3, r3, #8
 8000f72:	b21a      	sxth	r2, r3
 8000f74:	7d7b      	ldrb	r3, [r7, #21]
 8000f76:	b21b      	sxth	r3, r3
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	b21a      	sxth	r2, r3
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <readCalibrationData+0x130>)
 8000f7e:	801a      	strh	r2, [r3, #0]

}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000250 	.word	0x20000250
 8000f8c:	20000210 	.word	0x20000210
 8000f90:	20000212 	.word	0x20000212
 8000f94:	20000214 	.word	0x20000214
 8000f98:	20000216 	.word	0x20000216
 8000f9c:	20000218 	.word	0x20000218
 8000fa0:	2000021a 	.word	0x2000021a
 8000fa4:	2000021c 	.word	0x2000021c
 8000fa8:	2000021e 	.word	0x2000021e
 8000fac:	20000220 	.word	0x20000220
 8000fb0:	20000222 	.word	0x20000222
 8000fb4:	20000224 	.word	0x20000224

08000fb8 <getUncompensatedTemperature>:

uint16_t getUncompensatedTemperature(void){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af04      	add	r7, sp, #16

	uint8_t uTMSB, uTLSB =0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	713b      	strb	r3, [r7, #4]
	uint8_t dataToWrite =0x2E;
 8000fc2:	232e      	movs	r3, #46	; 0x2e
 8000fc4:	70fb      	strb	r3, [r7, #3]
	uint16_t uT =0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	80fb      	strh	r3, [r7, #6]


	//HAL_I2C_Mem_Write(hi2c, DevAddress, MemAddress, MemAddSize, pData, Size, Timeout)
	HAL_I2C_Mem_Write(&hi2c1, devAddWrite, 0xF4, 1, &dataToWrite, 1, 50);
 8000fca:	2332      	movs	r3, #50	; 0x32
 8000fcc:	9302      	str	r3, [sp, #8]
 8000fce:	2301      	movs	r3, #1
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	1cfb      	adds	r3, r7, #3
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	22f4      	movs	r2, #244	; 0xf4
 8000fda:	21ee      	movs	r1, #238	; 0xee
 8000fdc:	4815      	ldr	r0, [pc, #84]	; (8001034 <getUncompensatedTemperature+0x7c>)
 8000fde:	f002 f965 	bl	80032ac <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 8000fe2:	2005      	movs	r0, #5
 8000fe4:	f001 fc0a 	bl	80027fc <HAL_Delay>
	HAL_I2C_Mem_Read(&hi2c1, devAddRead,0xF6, 1, &uTMSB, 1, 50);
 8000fe8:	2332      	movs	r3, #50	; 0x32
 8000fea:	9302      	str	r3, [sp, #8]
 8000fec:	2301      	movs	r3, #1
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	1d7b      	adds	r3, r7, #5
 8000ff2:	9300      	str	r3, [sp, #0]
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	22f6      	movs	r2, #246	; 0xf6
 8000ff8:	21ee      	movs	r1, #238	; 0xee
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <getUncompensatedTemperature+0x7c>)
 8000ffc:	f002 fa50 	bl	80034a0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, devAddRead, 0xF7, 1, &uTLSB, 1, 50);
 8001000:	2332      	movs	r3, #50	; 0x32
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	2301      	movs	r3, #1
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	22f7      	movs	r2, #247	; 0xf7
 8001010:	21ee      	movs	r1, #238	; 0xee
 8001012:	4808      	ldr	r0, [pc, #32]	; (8001034 <getUncompensatedTemperature+0x7c>)
 8001014:	f002 fa44 	bl	80034a0 <HAL_I2C_Mem_Read>

	////////delete this//////////

	/////////////////////////////

	uT = uTMSB << 8 | uTLSB;
 8001018:	797b      	ldrb	r3, [r7, #5]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21a      	sxth	r2, r3
 800101e:	793b      	ldrb	r3, [r7, #4]
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21b      	sxth	r3, r3
 8001026:	80fb      	strh	r3, [r7, #6]

	return uT;
 8001028:	88fb      	ldrh	r3, [r7, #6]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000250 	.word	0x20000250

08001038 <getUncompensatedPressure>:

uint32_t getUncompensatedPressure(char oss){
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af04      	add	r7, sp, #16
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]

uint8_t uData[2]={0};
 8001042:	2300      	movs	r3, #0
 8001044:	823b      	strh	r3, [r7, #16]
uint8_t dataToWrite= 0x34 | (oss<<6);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	019b      	lsls	r3, r3, #6
 800104a:	b25b      	sxtb	r3, r3
 800104c:	f043 0334 	orr.w	r3, r3, #52	; 0x34
 8001050:	b25b      	sxtb	r3, r3
 8001052:	b2db      	uxtb	r3, r3
 8001054:	73fb      	strb	r3, [r7, #15]
uint32_t uP=0;
 8001056:	2300      	movs	r3, #0
 8001058:	617b      	str	r3, [r7, #20]

HAL_I2C_Mem_Write(&hi2c1, devAddWrite, 0xF4, 1, &dataToWrite, 1, 50);
 800105a:	2332      	movs	r3, #50	; 0x32
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	2301      	movs	r3, #1
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	f107 030f 	add.w	r3, r7, #15
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	22f4      	movs	r2, #244	; 0xf4
 800106c:	21ee      	movs	r1, #238	; 0xee
 800106e:	4812      	ldr	r0, [pc, #72]	; (80010b8 <getUncompensatedPressure+0x80>)
 8001070:	f002 f91c 	bl	80032ac <HAL_I2C_Mem_Write>

HAL_Delay(26); //tomo el delay maximo
 8001074:	201a      	movs	r0, #26
 8001076:	f001 fbc1 	bl	80027fc <HAL_Delay>

HAL_I2C_Mem_Read(&hi2c1, devAddRead, 0xF6, 1, uData, 3, 50);
 800107a:	2332      	movs	r3, #50	; 0x32
 800107c:	9302      	str	r3, [sp, #8]
 800107e:	2303      	movs	r3, #3
 8001080:	9301      	str	r3, [sp, #4]
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	22f6      	movs	r2, #246	; 0xf6
 800108c:	21ee      	movs	r1, #238	; 0xee
 800108e:	480a      	ldr	r0, [pc, #40]	; (80010b8 <getUncompensatedPressure+0x80>)
 8001090:	f002 fa06 	bl	80034a0 <HAL_I2C_Mem_Read>

uP= (uData[0]<<16 | uData[1]<<8 | uData[2]) >> (8-oss);
 8001094:	7c3b      	ldrb	r3, [r7, #16]
 8001096:	041a      	lsls	r2, r3, #16
 8001098:	7c7b      	ldrb	r3, [r7, #17]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	4313      	orrs	r3, r2
 800109e:	7cba      	ldrb	r2, [r7, #18]
 80010a0:	431a      	orrs	r2, r3
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f1c3 0308 	rsb	r3, r3, #8
 80010a8:	fa42 f303 	asr.w	r3, r2, r3
 80010ac:	617b      	str	r3, [r7, #20]

return uP;
 80010ae:	697b      	ldr	r3, [r7, #20]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	20000250 	.word	0x20000250

080010bc <getTemperature>:

float getTemperature(void){
 80010bc:	b5b0      	push	{r4, r5, r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0

uint16_t UT = getUncompensatedTemperature();
 80010c2:	f7ff ff79 	bl	8000fb8 <getUncompensatedTemperature>
 80010c6:	4603      	mov	r3, r0
 80010c8:	80fb      	strh	r3, [r7, #6]
X1 = ((UT-AC6) * (AC5/(pow(2,15))));
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	4a3c      	ldr	r2, [pc, #240]	; (80011c0 <getTemperature+0x104>)
 80010ce:	8812      	ldrh	r2, [r2, #0]
 80010d0:	1a9b      	subs	r3, r3, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff f9a0 	bl	8000418 <__aeabi_i2d>
 80010d8:	4604      	mov	r4, r0
 80010da:	460d      	mov	r5, r1
 80010dc:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <getTemperature+0x108>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff f999 	bl	8000418 <__aeabi_i2d>
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	4b37      	ldr	r3, [pc, #220]	; (80011c8 <getTemperature+0x10c>)
 80010ec:	f7ff fb28 	bl	8000740 <__aeabi_ddiv>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4620      	mov	r0, r4
 80010f6:	4629      	mov	r1, r5
 80010f8:	f7ff f9f8 	bl	80004ec <__aeabi_dmul>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fca2 	bl	8000a4c <__aeabi_d2iz>
 8001108:	4603      	mov	r3, r0
 800110a:	4a30      	ldr	r2, [pc, #192]	; (80011cc <getTemperature+0x110>)
 800110c:	6013      	str	r3, [r2, #0]
X2 = ((MC*(pow(2,11))) / (X1+MD));
 800110e:	4b30      	ldr	r3, [pc, #192]	; (80011d0 <getTemperature+0x114>)
 8001110:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f97f 	bl	8000418 <__aeabi_i2d>
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <getTemperature+0x118>)
 8001120:	f7ff f9e4 	bl	80004ec <__aeabi_dmul>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	4614      	mov	r4, r2
 800112a:	461d      	mov	r5, r3
 800112c:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <getTemperature+0x11c>)
 800112e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001132:	461a      	mov	r2, r3
 8001134:	4b25      	ldr	r3, [pc, #148]	; (80011cc <getTemperature+0x110>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4413      	add	r3, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f96c 	bl	8000418 <__aeabi_i2d>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4620      	mov	r0, r4
 8001146:	4629      	mov	r1, r5
 8001148:	f7ff fafa 	bl	8000740 <__aeabi_ddiv>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fc7a 	bl	8000a4c <__aeabi_d2iz>
 8001158:	4603      	mov	r3, r0
 800115a:	4a20      	ldr	r2, [pc, #128]	; (80011dc <getTemperature+0x120>)
 800115c:	6013      	str	r3, [r2, #0]
B5 = X1+X2;
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <getTemperature+0x110>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <getTemperature+0x120>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a1d      	ldr	r2, [pc, #116]	; (80011e0 <getTemperature+0x124>)
 800116a:	6013      	str	r3, [r2, #0]
T = (B5+8)/(pow(2,4));
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <getTemperature+0x124>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3308      	adds	r3, #8
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff f950 	bl	8000418 <__aeabi_i2d>
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <getTemperature+0x128>)
 800117e:	f7ff fadf 	bl	8000740 <__aeabi_ddiv>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4610      	mov	r0, r2
 8001188:	4619      	mov	r1, r3
 800118a:	f7ff fc5f 	bl	8000a4c <__aeabi_d2iz>
 800118e:	4603      	mov	r3, r0
 8001190:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <getTemperature+0x12c>)
 8001192:	6013      	str	r3, [r2, #0]
return T/10.0;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <getTemperature+0x12c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f93d 	bl	8000418 <__aeabi_i2d>
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <getTemperature+0x130>)
 80011a4:	f7ff facc 	bl	8000740 <__aeabi_ddiv>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fc94 	bl	8000adc <__aeabi_d2f>
 80011b4:	4603      	mov	r3, r0

}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bdb0      	pop	{r4, r5, r7, pc}
 80011be:	bf00      	nop
 80011c0:	2000021a 	.word	0x2000021a
 80011c4:	20000218 	.word	0x20000218
 80011c8:	40e00000 	.word	0x40e00000
 80011cc:	20000228 	.word	0x20000228
 80011d0:	20000222 	.word	0x20000222
 80011d4:	40a00000 	.word	0x40a00000
 80011d8:	20000224 	.word	0x20000224
 80011dc:	2000022c 	.word	0x2000022c
 80011e0:	20000238 	.word	0x20000238
 80011e4:	40300000 	.word	0x40300000
 80011e8:	20000244 	.word	0x20000244
 80011ec:	40240000 	.word	0x40240000

080011f0 <getPressure>:


float getPressure(char oss){
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]

	uint32_t UP = getUncompensatedPressure(oss);
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ff1b 	bl	8001038 <getUncompensatedPressure>
 8001202:	60f8      	str	r0, [r7, #12]
	B6 = B5-4000;
 8001204:	4b7d      	ldr	r3, [pc, #500]	; (80013fc <getPressure+0x20c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800120c:	4a7c      	ldr	r2, [pc, #496]	; (8001400 <getPressure+0x210>)
 800120e:	6013      	str	r3, [r2, #0]
	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8001210:	4b7c      	ldr	r3, [pc, #496]	; (8001404 <getPressure+0x214>)
 8001212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f8fe 	bl	8000418 <__aeabi_i2d>
 800121c:	4604      	mov	r4, r0
 800121e:	460d      	mov	r5, r1
 8001220:	4b77      	ldr	r3, [pc, #476]	; (8001400 <getPressure+0x210>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a76      	ldr	r2, [pc, #472]	; (8001400 <getPressure+0x210>)
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	fb02 f303 	mul.w	r3, r2, r3
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f8f3 	bl	8000418 <__aeabi_i2d>
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	4b74      	ldr	r3, [pc, #464]	; (8001408 <getPressure+0x218>)
 8001238:	f7ff fa82 	bl	8000740 <__aeabi_ddiv>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4620      	mov	r0, r4
 8001242:	4629      	mov	r1, r5
 8001244:	f7ff f952 	bl	80004ec <__aeabi_dmul>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b6d      	ldr	r3, [pc, #436]	; (800140c <getPressure+0x21c>)
 8001256:	f7ff fa73 	bl	8000740 <__aeabi_ddiv>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fbf3 	bl	8000a4c <__aeabi_d2iz>
 8001266:	4603      	mov	r3, r0
 8001268:	4a69      	ldr	r2, [pc, #420]	; (8001410 <getPressure+0x220>)
 800126a:	6013      	str	r3, [r2, #0]
	X2 = AC2*B6/(pow(2,11));
 800126c:	4b69      	ldr	r3, [pc, #420]	; (8001414 <getPressure+0x224>)
 800126e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001272:	461a      	mov	r2, r3
 8001274:	4b62      	ldr	r3, [pc, #392]	; (8001400 <getPressure+0x210>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	fb02 f303 	mul.w	r3, r2, r3
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff f8cb 	bl	8000418 <__aeabi_i2d>
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	4b61      	ldr	r3, [pc, #388]	; (800140c <getPressure+0x21c>)
 8001288:	f7ff fa5a 	bl	8000740 <__aeabi_ddiv>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fbda 	bl	8000a4c <__aeabi_d2iz>
 8001298:	4603      	mov	r3, r0
 800129a:	4a5f      	ldr	r2, [pc, #380]	; (8001418 <getPressure+0x228>)
 800129c:	6013      	str	r3, [r2, #0]
	X3 = X1+X2;
 800129e:	4b5c      	ldr	r3, [pc, #368]	; (8001410 <getPressure+0x220>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b5d      	ldr	r3, [pc, #372]	; (8001418 <getPressure+0x228>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4413      	add	r3, r2
 80012a8:	4a5c      	ldr	r2, [pc, #368]	; (800141c <getPressure+0x22c>)
 80012aa:	6013      	str	r3, [r2, #0]
	B3 = (((AC1*4+X3)<<oss)+2)/4;
 80012ac:	4b5c      	ldr	r3, [pc, #368]	; (8001420 <getPressure+0x230>)
 80012ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b2:	009a      	lsls	r2, r3, #2
 80012b4:	4b59      	ldr	r3, [pc, #356]	; (800141c <getPressure+0x22c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	441a      	add	r2, r3
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	3302      	adds	r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	da00      	bge.n	80012c8 <getPressure+0xd8>
 80012c6:	3303      	adds	r3, #3
 80012c8:	109b      	asrs	r3, r3, #2
 80012ca:	461a      	mov	r2, r3
 80012cc:	4b55      	ldr	r3, [pc, #340]	; (8001424 <getPressure+0x234>)
 80012ce:	601a      	str	r2, [r3, #0]
	X1 = AC3*B6/pow(2,13);
 80012d0:	4b55      	ldr	r3, [pc, #340]	; (8001428 <getPressure+0x238>)
 80012d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b49      	ldr	r3, [pc, #292]	; (8001400 <getPressure+0x210>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff f899 	bl	8000418 <__aeabi_i2d>
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	4b50      	ldr	r3, [pc, #320]	; (800142c <getPressure+0x23c>)
 80012ec:	f7ff fa28 	bl	8000740 <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fba8 	bl	8000a4c <__aeabi_d2iz>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a44      	ldr	r2, [pc, #272]	; (8001410 <getPressure+0x220>)
 8001300:	6013      	str	r3, [r2, #0]
	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001302:	4b4b      	ldr	r3, [pc, #300]	; (8001430 <getPressure+0x240>)
 8001304:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff f885 	bl	8000418 <__aeabi_i2d>
 800130e:	4604      	mov	r4, r0
 8001310:	460d      	mov	r5, r1
 8001312:	4b3b      	ldr	r3, [pc, #236]	; (8001400 <getPressure+0x210>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a3a      	ldr	r2, [pc, #232]	; (8001400 <getPressure+0x210>)
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	fb02 f303 	mul.w	r3, r2, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f87a 	bl	8000418 <__aeabi_i2d>
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	4b37      	ldr	r3, [pc, #220]	; (8001408 <getPressure+0x218>)
 800132a:	f7ff fa09 	bl	8000740 <__aeabi_ddiv>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4620      	mov	r0, r4
 8001334:	4629      	mov	r1, r5
 8001336:	f7ff f8d9 	bl	80004ec <__aeabi_dmul>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	4b3b      	ldr	r3, [pc, #236]	; (8001434 <getPressure+0x244>)
 8001348:	f7ff f9fa 	bl	8000740 <__aeabi_ddiv>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fb7a 	bl	8000a4c <__aeabi_d2iz>
 8001358:	4603      	mov	r3, r0
 800135a:	4a2f      	ldr	r2, [pc, #188]	; (8001418 <getPressure+0x228>)
 800135c:	6013      	str	r3, [r2, #0]
	X3 = ((X1+X2)+2)/pow(2,2);
 800135e:	4b2c      	ldr	r3, [pc, #176]	; (8001410 <getPressure+0x220>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <getPressure+0x228>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	3302      	adds	r3, #2
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f854 	bl	8000418 <__aeabi_i2d>
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	4b30      	ldr	r3, [pc, #192]	; (8001438 <getPressure+0x248>)
 8001376:	f7ff f9e3 	bl	8000740 <__aeabi_ddiv>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fb63 	bl	8000a4c <__aeabi_d2iz>
 8001386:	4603      	mov	r3, r0
 8001388:	4a24      	ldr	r2, [pc, #144]	; (800141c <getPressure+0x22c>)
 800138a:	6013      	str	r3, [r2, #0]
	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 800138c:	4b2b      	ldr	r3, [pc, #172]	; (800143c <getPressure+0x24c>)
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4b22      	ldr	r3, [pc, #136]	; (800141c <getPressure+0x22c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800139a:	fb02 f303 	mul.w	r3, r2, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f82a 	bl	80003f8 <__aeabi_ui2d>
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	4b25      	ldr	r3, [pc, #148]	; (8001440 <getPressure+0x250>)
 80013aa:	f7ff f9c9 	bl	8000740 <__aeabi_ddiv>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	4610      	mov	r0, r2
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fb71 	bl	8000a9c <__aeabi_d2uiz>
 80013ba:	4603      	mov	r3, r0
 80013bc:	4a21      	ldr	r2, [pc, #132]	; (8001444 <getPressure+0x254>)
 80013be:	6013      	str	r3, [r2, #0]
	B7 = ((unsigned long)UP-B3)*(50000>>oss);
 80013c0:	4b18      	ldr	r3, [pc, #96]	; (8001424 <getPressure+0x234>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	1a9b      	subs	r3, r3, r2
 80013ca:	79fa      	ldrb	r2, [r7, #7]
 80013cc:	f24c 3150 	movw	r1, #50000	; 0xc350
 80013d0:	fa41 f202 	asr.w	r2, r1, r2
 80013d4:	fb02 f303 	mul.w	r3, r2, r3
 80013d8:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <getPressure+0x258>)
 80013da:	6013      	str	r3, [r2, #0]
	if (B7<0x80000000) P = (B7*2)/B4;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <getPressure+0x258>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db35      	blt.n	8001450 <getPressure+0x260>
 80013e4:	4b18      	ldr	r3, [pc, #96]	; (8001448 <getPressure+0x258>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	005a      	lsls	r2, r3, #1
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <getPressure+0x254>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <getPressure+0x25c>)
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	e034      	b.n	8001464 <getPressure+0x274>
 80013fa:	bf00      	nop
 80013fc:	20000238 	.word	0x20000238
 8001400:	2000023c 	.word	0x2000023c
 8001404:	2000021e 	.word	0x2000021e
 8001408:	40b00000 	.word	0x40b00000
 800140c:	40a00000 	.word	0x40a00000
 8001410:	20000228 	.word	0x20000228
 8001414:	20000212 	.word	0x20000212
 8001418:	2000022c 	.word	0x2000022c
 800141c:	20000230 	.word	0x20000230
 8001420:	20000210 	.word	0x20000210
 8001424:	20000234 	.word	0x20000234
 8001428:	20000214 	.word	0x20000214
 800142c:	40c00000 	.word	0x40c00000
 8001430:	2000021c 	.word	0x2000021c
 8001434:	40f00000 	.word	0x40f00000
 8001438:	40100000 	.word	0x40100000
 800143c:	20000216 	.word	0x20000216
 8001440:	40e00000 	.word	0x40e00000
 8001444:	20000248 	.word	0x20000248
 8001448:	2000024c 	.word	0x2000024c
 800144c:	20000240 	.word	0x20000240
	else P = (B7/B4)*2;
 8001450:	4b46      	ldr	r3, [pc, #280]	; (800156c <getPressure+0x37c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4b46      	ldr	r3, [pc, #280]	; (8001570 <getPressure+0x380>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	fbb2 f3f3 	udiv	r3, r2, r3
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	461a      	mov	r2, r3
 8001460:	4b44      	ldr	r3, [pc, #272]	; (8001574 <getPressure+0x384>)
 8001462:	601a      	str	r2, [r3, #0]
	X1 = (P/(pow(2,8)))*(P/(pow(2,8)));
 8001464:	4b43      	ldr	r3, [pc, #268]	; (8001574 <getPressure+0x384>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7fe ffd5 	bl	8000418 <__aeabi_i2d>
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	4b41      	ldr	r3, [pc, #260]	; (8001578 <getPressure+0x388>)
 8001474:	f7ff f964 	bl	8000740 <__aeabi_ddiv>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4614      	mov	r4, r2
 800147e:	461d      	mov	r5, r3
 8001480:	4b3c      	ldr	r3, [pc, #240]	; (8001574 <getPressure+0x384>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ffc7 	bl	8000418 <__aeabi_i2d>
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <getPressure+0x388>)
 8001490:	f7ff f956 	bl	8000740 <__aeabi_ddiv>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4620      	mov	r0, r4
 800149a:	4629      	mov	r1, r5
 800149c:	f7ff f826 	bl	80004ec <__aeabi_dmul>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fad0 	bl	8000a4c <__aeabi_d2iz>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4a33      	ldr	r2, [pc, #204]	; (800157c <getPressure+0x38c>)
 80014b0:	6013      	str	r3, [r2, #0]
	X1 = (X1*3038)/(pow(2,16));
 80014b2:	4b32      	ldr	r3, [pc, #200]	; (800157c <getPressure+0x38c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f640 32de 	movw	r2, #3038	; 0xbde
 80014ba:	fb02 f303 	mul.w	r3, r2, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	f7fe ffaa 	bl	8000418 <__aeabi_i2d>
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <getPressure+0x390>)
 80014ca:	f7ff f939 	bl	8000740 <__aeabi_ddiv>
 80014ce:	4602      	mov	r2, r0
 80014d0:	460b      	mov	r3, r1
 80014d2:	4610      	mov	r0, r2
 80014d4:	4619      	mov	r1, r3
 80014d6:	f7ff fab9 	bl	8000a4c <__aeabi_d2iz>
 80014da:	4603      	mov	r3, r0
 80014dc:	4a27      	ldr	r2, [pc, #156]	; (800157c <getPressure+0x38c>)
 80014de:	6013      	str	r3, [r2, #0]
	X2 = (-7357*P)/(pow(2,16));
 80014e0:	4b24      	ldr	r3, [pc, #144]	; (8001574 <getPressure+0x384>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a27      	ldr	r2, [pc, #156]	; (8001584 <getPressure+0x394>)
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7fe ff94 	bl	8000418 <__aeabi_i2d>
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	4b22      	ldr	r3, [pc, #136]	; (8001580 <getPressure+0x390>)
 80014f6:	f7ff f923 	bl	8000740 <__aeabi_ddiv>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f7ff faa3 	bl	8000a4c <__aeabi_d2iz>
 8001506:	4603      	mov	r3, r0
 8001508:	4a1f      	ldr	r2, [pc, #124]	; (8001588 <getPressure+0x398>)
 800150a:	6013      	str	r3, [r2, #0]
	P = P + (X1+X2+3791)/(pow(2,4));
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <getPressure+0x384>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7fe ff81 	bl	8000418 <__aeabi_i2d>
 8001516:	4604      	mov	r4, r0
 8001518:	460d      	mov	r5, r1
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <getPressure+0x38c>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4b1a      	ldr	r3, [pc, #104]	; (8001588 <getPressure+0x398>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4413      	add	r3, r2
 8001524:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe ff75 	bl	8000418 <__aeabi_i2d>
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <getPressure+0x39c>)
 8001534:	f7ff f904 	bl	8000740 <__aeabi_ddiv>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4620      	mov	r0, r4
 800153e:	4629      	mov	r1, r5
 8001540:	f7fe fe1e 	bl	8000180 <__adddf3>
 8001544:	4602      	mov	r2, r0
 8001546:	460b      	mov	r3, r1
 8001548:	4610      	mov	r0, r2
 800154a:	4619      	mov	r1, r3
 800154c:	f7ff fa7e 	bl	8000a4c <__aeabi_d2iz>
 8001550:	4603      	mov	r3, r0
 8001552:	4a08      	ldr	r2, [pc, #32]	; (8001574 <getPressure+0x384>)
 8001554:	6013      	str	r3, [r2, #0]

	return P;
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <getPressure+0x384>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fbc8 	bl	8000cf0 <__aeabi_i2f>
 8001560:	4603      	mov	r3, r0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bdb0      	pop	{r4, r5, r7, pc}
 800156a:	bf00      	nop
 800156c:	2000024c 	.word	0x2000024c
 8001570:	20000248 	.word	0x20000248
 8001574:	20000240 	.word	0x20000240
 8001578:	40700000 	.word	0x40700000
 800157c:	20000228 	.word	0x20000228
 8001580:	40f00000 	.word	0x40f00000
 8001584:	ffffe343 	.word	0xffffe343
 8001588:	2000022c 	.word	0x2000022c
 800158c:	40300000 	.word	0x40300000

08001590 <bmpInit>:

void bmpInit (void){
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0

	readCalibrationData();
 8001594:	f7ff fc76 	bl	8000e84 <readCalibrationData>

}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <lcdSendCmd>:


extern uint8_t flag_clear;

void lcdSendCmd (char cmd)	//cmd=10111010
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af02      	add	r7, sp, #8
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);	  //data_u=10110000		&: and bit a bit
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	f023 030f 	bic.w	r3, r3, #15
 80015ac:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0); //data_1=10100000		|: or bit a bit
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	f043 030c 	orr.w	r3, r3, #12
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	f043 0308 	orr.w	r3, r3, #8
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80015c8:	7bbb      	ldrb	r3, [r7, #14]
 80015ca:	f043 030c 	orr.w	r3, r3, #12
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80015d2:	7bbb      	ldrb	r3, [r7, #14]
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 20);
 80015dc:	f107 0208 	add.w	r2, r7, #8
 80015e0:	2314      	movs	r3, #20
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2304      	movs	r3, #4
 80015e6:	214e      	movs	r1, #78	; 0x4e
 80015e8:	4803      	ldr	r0, [pc, #12]	; (80015f8 <lcdSendCmd+0x5c>)
 80015ea:	f001 fd61 	bl	80030b0 <HAL_I2C_Master_Transmit>
}
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000250 	.word	0x20000250

080015fc <lcdSendData>:

void lcdSendData (char data)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af02      	add	r7, sp, #8
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	f023 030f 	bic.w	r3, r3, #15
 800160c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	f043 030d 	orr.w	r3, r3, #13
 800161a:	b2db      	uxtb	r3, r3
 800161c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	f043 0309 	orr.w	r3, r3, #9
 8001624:	b2db      	uxtb	r3, r3
 8001626:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001628:	7bbb      	ldrb	r3, [r7, #14]
 800162a:	f043 030d 	orr.w	r3, r3, #13
 800162e:	b2db      	uxtb	r3, r3
 8001630:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001632:	7bbb      	ldrb	r3, [r7, #14]
 8001634:	f043 0309 	orr.w	r3, r3, #9
 8001638:	b2db      	uxtb	r3, r3
 800163a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 20);
 800163c:	f107 0208 	add.w	r2, r7, #8
 8001640:	2314      	movs	r3, #20
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2304      	movs	r3, #4
 8001646:	214e      	movs	r1, #78	; 0x4e
 8001648:	4803      	ldr	r0, [pc, #12]	; (8001658 <lcdSendData+0x5c>)
 800164a:	f001 fd31 	bl	80030b0 <HAL_I2C_Master_Transmit>
}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000250 	.word	0x20000250

0800165c <lcdClear>:

void lcdClear(void)		//Tiene una bandera de activacion
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
	if(flag_clear == 1){
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <lcdClear+0x3c>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d10e      	bne.n	8001688 <lcdClear+0x2c>
	lcdSendCmd (0x80);
 800166a:	2080      	movs	r0, #128	; 0x80
 800166c:	f7ff ff96 	bl	800159c <lcdSendCmd>
	for (int i=0; i<70; i++)
 8001670:	2300      	movs	r3, #0
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	e005      	b.n	8001682 <lcdClear+0x26>
	{
		lcdSendData (' ');
 8001676:	2020      	movs	r0, #32
 8001678:	f7ff ffc0 	bl	80015fc <lcdSendData>
	for (int i=0; i<70; i++)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3301      	adds	r3, #1
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b45      	cmp	r3, #69	; 0x45
 8001686:	ddf6      	ble.n	8001676 <lcdClear+0x1a>
	}
	}
	flag_clear=0;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <lcdClear+0x3c>)
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000357 	.word	0x20000357

0800169c <lcdCursor>:

void lcdCursor(int row, int col)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
    switch (row)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <lcdCursor+0x18>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d005      	beq.n	80016be <lcdCursor+0x22>
 80016b2:	e009      	b.n	80016c8 <lcdCursor+0x2c>
    {
        case 0:
            col |= 0x80;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ba:	603b      	str	r3, [r7, #0]
            break;
 80016bc:	e004      	b.n	80016c8 <lcdCursor+0x2c>
        case 1:
            col |= 0xC0;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016c4:	603b      	str	r3, [r7, #0]
            break;
 80016c6:	bf00      	nop
    }

    lcdSendCmd (col);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff65 	bl	800159c <lcdSendCmd>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <lcdInit>:


void lcdInit (void)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	af00      	add	r7, sp, #0
	// 4 bit initialization
	HAL_Delay(50);  // wait for >40ms
 80016de:	2032      	movs	r0, #50	; 0x32
 80016e0:	f001 f88c 	bl	80027fc <HAL_Delay>
	lcdSendCmd (0x30);
 80016e4:	2030      	movs	r0, #48	; 0x30
 80016e6:	f7ff ff59 	bl	800159c <lcdSendCmd>
	HAL_Delay(5);  // wait for >4.1ms
 80016ea:	2005      	movs	r0, #5
 80016ec:	f001 f886 	bl	80027fc <HAL_Delay>
	lcdSendCmd (0x30);
 80016f0:	2030      	movs	r0, #48	; 0x30
 80016f2:	f7ff ff53 	bl	800159c <lcdSendCmd>
	HAL_Delay(1);  // wait for >100us
 80016f6:	2001      	movs	r0, #1
 80016f8:	f001 f880 	bl	80027fc <HAL_Delay>
	lcdSendCmd (0x30);
 80016fc:	2030      	movs	r0, #48	; 0x30
 80016fe:	f7ff ff4d 	bl	800159c <lcdSendCmd>
	HAL_Delay(10);
 8001702:	200a      	movs	r0, #10
 8001704:	f001 f87a 	bl	80027fc <HAL_Delay>
	lcdSendCmd (0x20);  // 4bit mode
 8001708:	2020      	movs	r0, #32
 800170a:	f7ff ff47 	bl	800159c <lcdSendCmd>
	HAL_Delay(10);
 800170e:	200a      	movs	r0, #10
 8001710:	f001 f874 	bl	80027fc <HAL_Delay>

  // display initialization
	lcdSendCmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001714:	2028      	movs	r0, #40	; 0x28
 8001716:	f7ff ff41 	bl	800159c <lcdSendCmd>
	HAL_Delay(1);
 800171a:	2001      	movs	r0, #1
 800171c:	f001 f86e 	bl	80027fc <HAL_Delay>
	lcdSendCmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001720:	2008      	movs	r0, #8
 8001722:	f7ff ff3b 	bl	800159c <lcdSendCmd>
	HAL_Delay(1);
 8001726:	2001      	movs	r0, #1
 8001728:	f001 f868 	bl	80027fc <HAL_Delay>
	lcdSendCmd (0x01);  // clear display
 800172c:	2001      	movs	r0, #1
 800172e:	f7ff ff35 	bl	800159c <lcdSendCmd>
	HAL_Delay(1);
 8001732:	2001      	movs	r0, #1
 8001734:	f001 f862 	bl	80027fc <HAL_Delay>
	HAL_Delay(1);
 8001738:	2001      	movs	r0, #1
 800173a:	f001 f85f 	bl	80027fc <HAL_Delay>
	lcdSendCmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800173e:	2006      	movs	r0, #6
 8001740:	f7ff ff2c 	bl	800159c <lcdSendCmd>
	HAL_Delay(1);
 8001744:	2001      	movs	r0, #1
 8001746:	f001 f859 	bl	80027fc <HAL_Delay>
	lcdSendCmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800174a:	200c      	movs	r0, #12
 800174c:	f7ff ff26 	bl	800159c <lcdSendCmd>
}
 8001750:	bf00      	nop
 8001752:	bd80      	pop	{r7, pc}

08001754 <lcdSendString>:

void lcdSendString (char *str)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	while (*str) lcdSendData (*str++);
 800175c:	e006      	b.n	800176c <lcdSendString+0x18>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	1c5a      	adds	r2, r3, #1
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff ff48 	bl	80015fc <lcdSendData>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f4      	bne.n	800175e <lcdSendString+0xa>
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <floatToString>:



/* ***FLOAT TO STRING *** */

void floatToString (float number, char* floatString){
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]

	int limit=0;
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
	int cnt=1;
 800178e:	2301      	movs	r3, #1
 8001790:	623b      	str	r3, [r7, #32]
	char *p;
	char cadena[16]={0};
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	f107 0310 	add.w	r3, r7, #16
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
 80017a0:	609a      	str	r2, [r3, #8]

	memset(floatString,0,16);
 80017a2:	2210      	movs	r2, #16
 80017a4:	2100      	movs	r1, #0
 80017a6:	6838      	ldr	r0, [r7, #0]
 80017a8:	f004 f9d8 	bl	8005b5c <memset>


	sprintf(cadena, "%.2f",number);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7fe fe45 	bl	800043c <__aeabi_f2d>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	f107 000c 	add.w	r0, r7, #12
 80017ba:	4918      	ldr	r1, [pc, #96]	; (800181c <floatToString+0x9c>)
 80017bc:	f004 fe36 	bl	800642c <siprintf>

	//Busco donde esta el punto flotante para limitar en dos la cantidad de decimales

	p=cadena;
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	61fb      	str	r3, [r7, #28]
	while(*p != '\0'){
 80017c6:	e00b      	b.n	80017e0 <floatToString+0x60>
		if(*p == '.'){
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b2e      	cmp	r3, #46	; 0x2e
 80017ce:	d101      	bne.n	80017d4 <floatToString+0x54>
			limit=cnt;		//limit tiene la posicion del punto flotante
 80017d0:	6a3b      	ldr	r3, [r7, #32]
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
		}
		p++;
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	3301      	adds	r3, #1
 80017d8:	61fb      	str	r3, [r7, #28]
		cnt++;
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	3301      	adds	r3, #1
 80017de:	623b      	str	r3, [r7, #32]
	while(*p != '\0'){
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1ef      	bne.n	80017c8 <floatToString+0x48>
	}

	if(limit<4){    //si el punto flotante esta en la tercera posicion o menor el dato recibido es de temperatura
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	dc09      	bgt.n	8001802 <floatToString+0x82>

	    	strncpy(floatString, cadena, limit+1); //limito en uno los decimales
 80017ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f0:	3301      	adds	r3, #1
 80017f2:	461a      	mov	r2, r3
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	4619      	mov	r1, r3
 80017fa:	6838      	ldr	r0, [r7, #0]
 80017fc:	f004 fe45 	bl	800648a <strncpy>
	else{
	    	strncpy(floatString, cadena, limit+2); //limito en dos los decimales
	   }


}
 8001800:	e008      	b.n	8001814 <floatToString+0x94>
	    	strncpy(floatString, cadena, limit+2); //limito en dos los decimales
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	3302      	adds	r3, #2
 8001806:	461a      	mov	r2, r3
 8001808:	f107 030c 	add.w	r3, r7, #12
 800180c:	4619      	mov	r1, r3
 800180e:	6838      	ldr	r0, [r7, #0]
 8001810:	f004 fe3b 	bl	800648a <strncpy>
}
 8001814:	bf00      	nop
 8001816:	3728      	adds	r7, #40	; 0x28
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	08008978 	.word	0x08008978

08001820 <displayTemp>:



void displayTemp (char* stringTemp){
 8001820:	b580      	push	{r7, lr}
 8001822:	b088      	sub	sp, #32
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]


	char stringToSend[16]="Temp: ";
 8001828:	4a16      	ldr	r2, [pc, #88]	; (8001884 <displayTemp+0x64>)
 800182a:	f107 0310 	add.w	r3, r7, #16
 800182e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001832:	6018      	str	r0, [r3, #0]
 8001834:	3304      	adds	r3, #4
 8001836:	8019      	strh	r1, [r3, #0]
 8001838:	3302      	adds	r3, #2
 800183a:	0c0a      	lsrs	r2, r1, #16
 800183c:	701a      	strb	r2, [r3, #0]
 800183e:	f107 0317 	add.w	r3, r7, #23
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	721a      	strb	r2, [r3, #8]
	char label[4]={0};
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
	label[0]= 0xDF;
 800184e:	23df      	movs	r3, #223	; 0xdf
 8001850:	733b      	strb	r3, [r7, #12]
	label[1]= 'C';
 8001852:	2343      	movs	r3, #67	; 0x43
 8001854:	737b      	strb	r3, [r7, #13]

	strcat(stringToSend, stringTemp);
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4618      	mov	r0, r3
 800185e:	f004 fe05 	bl	800646c <strcat>
	strcat(stringToSend, label );
 8001862:	f107 020c 	add.w	r2, r7, #12
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	4611      	mov	r1, r2
 800186c:	4618      	mov	r0, r3
 800186e:	f004 fdfd 	bl	800646c <strcat>

	lcdSendString(stringToSend);
 8001872:	f107 0310 	add.w	r3, r7, #16
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ff6c 	bl	8001754 <lcdSendString>


}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	08008980 	.word	0x08008980

08001888 <displayPressure>:




void displayPressure(char* stringPress){
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	char stringToSend[16]="P:";
 8001890:	f643 2350 	movw	r3, #14928	; 0x3a50
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
	char label[4]="hpa";		//tiene que ser 5
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <displayPressure+0x4c>)
 80018a4:	60fb      	str	r3, [r7, #12]

	strcat(stringToSend, stringPress);
 80018a6:	f107 0310 	add.w	r3, r7, #16
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f004 fddd 	bl	800646c <strcat>
	strcat(stringToSend, label );
 80018b2:	f107 020c 	add.w	r2, r7, #12
 80018b6:	f107 0310 	add.w	r3, r7, #16
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f004 fdd5 	bl	800646c <strcat>

	lcdSendString(stringToSend);
 80018c2:	f107 0310 	add.w	r3, r7, #16
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ff44 	bl	8001754 <lcdSendString>

}
 80018cc:	bf00      	nop
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	00617068 	.word	0x00617068

080018d8 <displayAlarm>:


void displayAlarm(char* stringAlarm){		//Para mostrar la temperatura que se configura en el modo CONFIG_TEMP
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b089      	sub	sp, #36	; 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]

	char string1Line[16]="Temperatura max:";	//string de la primera linea	//ERA 8 ANTES
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <displayAlarm+0x4c>)
 80018e2:	f107 0410 	add.w	r4, r7, #16
 80018e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	char label[4]={0};
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
	label[0]= 0xDF;	//simbolo de grados (°)
 80018f0:	23df      	movs	r3, #223	; 0xdf
 80018f2:	733b      	strb	r3, [r7, #12]
	label[1]= 'C';
 80018f4:	2343      	movs	r3, #67	; 0x43
 80018f6:	737b      	strb	r3, [r7, #13]

	strcat(stringAlarm, label);		//stringAlarm ahora es la string de la segunda linea.
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	4619      	mov	r1, r3
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f004 fdb4 	bl	800646c <strcat>


	lcdSendString(string1Line);
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff23 	bl	8001754 <lcdSendString>
	lcdCursor(1, 0);
 800190e:	2100      	movs	r1, #0
 8001910:	2001      	movs	r0, #1
 8001912:	f7ff fec3 	bl	800169c <lcdCursor>
	lcdSendString(stringAlarm);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ff1c 	bl	8001754 <lcdSendString>

}
 800191c:	bf00      	nop
 800191e:	3724      	adds	r7, #36	; 0x24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd90      	pop	{r4, r7, pc}
 8001924:	08008990 	.word	0x08008990

08001928 <displayInicioAlarm>:


void displayInicioAlarm(char* stringAlarmFinal){
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

	char string1Line[16]="Alarma en:";
 8001930:	4a14      	ldr	r2, [pc, #80]	; (8001984 <displayInicioAlarm+0x5c>)
 8001932:	f107 0310 	add.w	r3, r7, #16
 8001936:	ca07      	ldmia	r2, {r0, r1, r2}
 8001938:	c303      	stmia	r3!, {r0, r1}
 800193a:	801a      	strh	r2, [r3, #0]
 800193c:	3302      	adds	r3, #2
 800193e:	0c12      	lsrs	r2, r2, #16
 8001940:	701a      	strb	r2, [r3, #0]
 8001942:	f107 031b 	add.w	r3, r7, #27
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	711a      	strb	r2, [r3, #4]
	char label[4]={0};
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
	label[0]= 0xDF;	//simbolo de grados (°)
 8001950:	23df      	movs	r3, #223	; 0xdf
 8001952:	733b      	strb	r3, [r7, #12]
	label[1]= 'C';
 8001954:	2343      	movs	r3, #67	; 0x43
 8001956:	737b      	strb	r3, [r7, #13]

	strcat(stringAlarmFinal, label);
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	4619      	mov	r1, r3
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f004 fd84 	bl	800646c <strcat>

	lcdSendString(string1Line);
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fef3 	bl	8001754 <lcdSendString>
	lcdCursor(1, 0);
 800196e:	2100      	movs	r1, #0
 8001970:	2001      	movs	r0, #1
 8001972:	f7ff fe93 	bl	800169c <lcdCursor>
	lcdSendString(stringAlarmFinal);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff feec 	bl	8001754 <lcdSendString>


}
 800197c:	bf00      	nop
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	080089a0 	.word	0x080089a0

08001988 <HAL_GPIO_EXTI_Callback>:
/* === Public variable definitions ============================================================= */

/* === Private variable definitions ============================================================ */

/* === Private function implementation ========================================================= */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	80fb      	strh	r3, [r7, #6]

	while (contReb > 1) {
 8001992:	e005      	b.n	80019a0 <HAL_GPIO_EXTI_Callback+0x18>
		contReb--;
 8001994:	4b58      	ldr	r3, [pc, #352]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x170>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	3b01      	subs	r3, #1
 800199a:	b29a      	uxth	r2, r3
 800199c:	4b56      	ldr	r3, [pc, #344]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x170>)
 800199e:	801a      	strh	r2, [r3, #0]
	while (contReb > 1) {
 80019a0:	4b55      	ldr	r3, [pc, #340]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x170>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d8f5      	bhi.n	8001994 <HAL_GPIO_EXTI_Callback+0xc>
	}

	/*   	Rutina boton OK     */
	if (GPIO_Pin == GPIO_PIN_5) {
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	2b20      	cmp	r3, #32
 80019ac:	d13b      	bne.n	8001a26 <HAL_GPIO_EXTI_Callback+0x9e>
		switch (modo) {
 80019ae:	4b53      	ldr	r3, [pc, #332]	; (8001afc <HAL_GPIO_EXTI_Callback+0x174>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	d833      	bhi.n	8001a1e <HAL_GPIO_EXTI_Callback+0x96>
 80019b6:	a201      	add	r2, pc, #4	; (adr r2, 80019bc <HAL_GPIO_EXTI_Callback+0x34>)
 80019b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019bc:	080019d9 	.word	0x080019d9
 80019c0:	080019e1 	.word	0x080019e1
 80019c4:	080019e9 	.word	0x080019e9
 80019c8:	080019f7 	.word	0x080019f7
 80019cc:	08001a07 	.word	0x08001a07
 80019d0:	08001a0f 	.word	0x08001a0f
 80019d4:	08001a17 	.word	0x08001a17
		case INICIO:
			modo = VER_TEMP;
 80019d8:	4b48      	ldr	r3, [pc, #288]	; (8001afc <HAL_GPIO_EXTI_Callback+0x174>)
 80019da:	2201      	movs	r2, #1
 80019dc:	701a      	strb	r2, [r3, #0]
			break;
 80019de:	e01f      	b.n	8001a20 <HAL_GPIO_EXTI_Callback+0x98>
		case VER_TEMP:
			modo = VER_PRES;
 80019e0:	4b46      	ldr	r3, [pc, #280]	; (8001afc <HAL_GPIO_EXTI_Callback+0x174>)
 80019e2:	2202      	movs	r2, #2
 80019e4:	701a      	strb	r2, [r3, #0]
			break;
 80019e6:	e01b      	b.n	8001a20 <HAL_GPIO_EXTI_Callback+0x98>
		case VER_PRES:
			modo = INICIO;
 80019e8:	4b44      	ldr	r3, [pc, #272]	; (8001afc <HAL_GPIO_EXTI_Callback+0x174>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
			act_flag = 1;
 80019ee:	4b44      	ldr	r3, [pc, #272]	; (8001b00 <HAL_GPIO_EXTI_Callback+0x178>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
			break;
 80019f4:	e014      	b.n	8001a20 <HAL_GPIO_EXTI_Callback+0x98>
		case CONFIG_TEMP:
			modo = INICIO_ALARM;
 80019f6:	4b41      	ldr	r3, [pc, #260]	; (8001afc <HAL_GPIO_EXTI_Callback+0x174>)
 80019f8:	2204      	movs	r2, #4
 80019fa:	701a      	strb	r2, [r3, #0]
			alarma_final = alarma;
 80019fc:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <HAL_GPIO_EXTI_Callback+0x17c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a41      	ldr	r2, [pc, #260]	; (8001b08 <HAL_GPIO_EXTI_Callback+0x180>)
 8001a02:	6013      	str	r3, [r2, #0]
			break;
 8001a04:	e00c      	b.n	8001a20 <HAL_GPIO_EXTI_Callback+0x98>
		case INICIO_ALARM:
			modo = VER_TEMP_ALARM;
 8001a06:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <HAL_GPIO_EXTI_Callback+0x174>)
 8001a08:	2205      	movs	r2, #5
 8001a0a:	701a      	strb	r2, [r3, #0]
			break;
 8001a0c:	e008      	b.n	8001a20 <HAL_GPIO_EXTI_Callback+0x98>
		case VER_TEMP_ALARM:
			modo = VER_PRES_ALARM;
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <HAL_GPIO_EXTI_Callback+0x174>)
 8001a10:	2206      	movs	r2, #6
 8001a12:	701a      	strb	r2, [r3, #0]
			break;
 8001a14:	e004      	b.n	8001a20 <HAL_GPIO_EXTI_Callback+0x98>
		case VER_PRES_ALARM:
			modo = INICIO_ALARM;
 8001a16:	4b39      	ldr	r3, [pc, #228]	; (8001afc <HAL_GPIO_EXTI_Callback+0x174>)
 8001a18:	2204      	movs	r2, #4
 8001a1a:	701a      	strb	r2, [r3, #0]
			break;
 8001a1c:	e000      	b.n	8001a20 <HAL_GPIO_EXTI_Callback+0x98>
		default:
			break;
 8001a1e:	bf00      	nop
		}

		flag_clear = 1;
 8001a20:	4b3a      	ldr	r3, [pc, #232]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x184>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
	}

	//   	Rutina boton SUBIR     		//Solo sirve para modificar la variable alarma.
	if (GPIO_Pin == GPIO_PIN_2) {
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d125      	bne.n	8001a78 <HAL_GPIO_EXTI_Callback+0xf0>
		if (modo == CONFIG_TEMP) {
 8001a2c:	4b33      	ldr	r3, [pc, #204]	; (8001afc <HAL_GPIO_EXTI_Callback+0x174>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d11e      	bne.n	8001a72 <HAL_GPIO_EXTI_Callback+0xea>
			alarma = alarma + 0.1;
 8001a34:	4b33      	ldr	r3, [pc, #204]	; (8001b04 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fcff 	bl	800043c <__aeabi_f2d>
 8001a3e:	a32c      	add	r3, pc, #176	; (adr r3, 8001af0 <HAL_GPIO_EXTI_Callback+0x168>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fb9c 	bl	8000180 <__adddf3>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f7ff f844 	bl	8000adc <__aeabi_d2f>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4a2b      	ldr	r2, [pc, #172]	; (8001b04 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001a58:	6013      	str	r3, [r2, #0]
			if (alarma > 10.0) {
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	492c      	ldr	r1, [pc, #176]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x188>)
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fa05 	bl	8000e70 <__aeabi_fcmpgt>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <HAL_GPIO_EXTI_Callback+0xea>
				alarma = 10.0;
 8001a6c:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001a6e:	4a28      	ldr	r2, [pc, #160]	; (8001b10 <HAL_GPIO_EXTI_Callback+0x188>)
 8001a70:	601a      	str	r2, [r3, #0]
			}
		}
		flag_clear = 1;
 8001a72:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x184>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	701a      	strb	r2, [r3, #0]
	}

	//Rutina boton BAJAR
	if (GPIO_Pin == GPIO_PIN_1) {
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d127      	bne.n	8001ace <HAL_GPIO_EXTI_Callback+0x146>
		if (modo == CONFIG_TEMP) {
 8001a7e:	4b1f      	ldr	r3, [pc, #124]	; (8001afc <HAL_GPIO_EXTI_Callback+0x174>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d120      	bne.n	8001ac8 <HAL_GPIO_EXTI_Callback+0x140>
			alarma = alarma - 0.1;
 8001a86:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fcd6 	bl	800043c <__aeabi_f2d>
 8001a90:	a317      	add	r3, pc, #92	; (adr r3, 8001af0 <HAL_GPIO_EXTI_Callback+0x168>)
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	f7fe fb71 	bl	800017c <__aeabi_dsub>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f7ff f81b 	bl	8000adc <__aeabi_d2f>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4a16      	ldr	r2, [pc, #88]	; (8001b04 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001aaa:	6013      	str	r3, [r2, #0]
			if (alarma < 0) {
 8001aac:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f04f 0100 	mov.w	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff f9bd 	bl	8000e34 <__aeabi_fcmplt>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_EXTI_Callback+0x140>
				alarma = 0;
 8001ac0:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
			}
		}
		flag_clear = 1;
 8001ac8:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x184>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	701a      	strb	r2, [r3, #0]
	}

	// Rutina boton CONFIG
	if (GPIO_Pin == GPIO_PIN_3) {
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d105      	bne.n	8001ae0 <HAL_GPIO_EXTI_Callback+0x158>
		modo = CONFIG_TEMP;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <HAL_GPIO_EXTI_Callback+0x174>)
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	701a      	strb	r2, [r3, #0]
		flag_clear = 1;
 8001ada:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <HAL_GPIO_EXTI_Callback+0x184>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	701a      	strb	r2, [r3, #0]
	}
	contReb = 2000;
 8001ae0:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_GPIO_EXTI_Callback+0x170>)
 8001ae2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001ae6:	801a      	strh	r2, [r3, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	9999999a 	.word	0x9999999a
 8001af4:	3fb99999 	.word	0x3fb99999
 8001af8:	20000014 	.word	0x20000014
 8001afc:	20000334 	.word	0x20000334
 8001b00:	20000016 	.word	0x20000016
 8001b04:	20000340 	.word	0x20000340
 8001b08:	20000010 	.word	0x20000010
 8001b0c:	20000357 	.word	0x20000357
 8001b10:	41200000 	.word	0x41200000

08001b14 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
void MX_I2C1_Init(void) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b1a:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <MX_I2C1_Init+0x54>)
 8001b1c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b20:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <MX_I2C1_Init+0x58>)
 8001b22:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b36:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b52:	f001 f969 	bl	8002e28 <HAL_I2C_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001b5c:	f000 fbd0 	bl	8002300 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000250 	.word	0x20000250
 8001b68:	40005400 	.word	0x40005400
 8001b6c:	000186a0 	.word	0x000186a0

08001b70 <medirTempPres>:





	void medirTempPres(void){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
		if(flag_medicion == 1){
 8001b74:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <medirTempPres+0x2c>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d10d      	bne.n	8001b98 <medirTempPres+0x28>

			temp=getTemperature();
 8001b7c:	f7ff fa9e 	bl	80010bc <getTemperature>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <medirTempPres+0x30>)
 8001b84:	6013      	str	r3, [r2, #0]
			press=getPressure(1);
 8001b86:	2001      	movs	r0, #1
 8001b88:	f7ff fb32 	bl	80011f0 <getPressure>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <medirTempPres+0x34>)
 8001b90:	6013      	str	r3, [r2, #0]

			flag_medicion=0;
 8001b92:	4b02      	ldr	r3, [pc, #8]	; (8001b9c <medirTempPres+0x2c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]

		}


	}
 8001b98:	bf00      	nop
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000356 	.word	0x20000356
 8001ba0:	20000338 	.word	0x20000338
 8001ba4:	2000033c 	.word	0x2000033c

08001ba8 <actualizarValores>:



	/*	Solamente modifica las variables que mostrará verPantalla	*/
	void actualizarValores(void){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0

		switch (modo) {
 8001bac:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <actualizarValores+0x70>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b06      	cmp	r3, #6
 8001bb2:	d82d      	bhi.n	8001c10 <actualizarValores+0x68>
 8001bb4:	a201      	add	r2, pc, #4	; (adr r2, 8001bbc <actualizarValores+0x14>)
 8001bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bba:	bf00      	nop
 8001bbc:	08001c11 	.word	0x08001c11
 8001bc0:	08001bd9 	.word	0x08001bd9
 8001bc4:	08001be7 	.word	0x08001be7
 8001bc8:	08001bf5 	.word	0x08001bf5
 8001bcc:	08001c03 	.word	0x08001c03
 8001bd0:	08001bd9 	.word	0x08001bd9
 8001bd4:	08001be7 	.word	0x08001be7

		 //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
				break;
			case VER_TEMP:
			case VER_TEMP_ALARM:
				floatToString(temp, str_temp);		//Ahora la string str_temp contiene el valor float de temp.
 8001bd8:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <actualizarValores+0x74>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4910      	ldr	r1, [pc, #64]	; (8001c20 <actualizarValores+0x78>)
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fdce 	bl	8001780 <floatToString>
				break;
 8001be4:	e015      	b.n	8001c12 <actualizarValores+0x6a>
			case VER_PRES:
			case VER_PRES_ALARM:
				floatToString(press, str_temp);
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <actualizarValores+0x7c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	490d      	ldr	r1, [pc, #52]	; (8001c20 <actualizarValores+0x78>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fdc7 	bl	8001780 <floatToString>
				break;
 8001bf2:	e00e      	b.n	8001c12 <actualizarValores+0x6a>
			case CONFIG_TEMP:
				floatToString(alarma,str_temp);
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <actualizarValores+0x80>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4909      	ldr	r1, [pc, #36]	; (8001c20 <actualizarValores+0x78>)
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff fdc0 	bl	8001780 <floatToString>
				break;
 8001c00:	e007      	b.n	8001c12 <actualizarValores+0x6a>
			case INICIO_ALARM:
				floatToString(alarma_final, str_temp);
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <actualizarValores+0x84>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4906      	ldr	r1, [pc, #24]	; (8001c20 <actualizarValores+0x78>)
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fdb9 	bl	8001780 <floatToString>
				break;
 8001c0e:	e000      	b.n	8001c12 <actualizarValores+0x6a>
			default:
				break;
 8001c10:	bf00      	nop
		}



	}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000334 	.word	0x20000334
 8001c1c:	20000338 	.word	0x20000338
 8001c20:	20000344 	.word	0x20000344
 8001c24:	2000033c 	.word	0x2000033c
 8001c28:	20000340 	.word	0x20000340
 8001c2c:	20000010 	.word	0x20000010

08001c30 <actualizarPantalla>:


	/*	Debería tener un forma de que no se actualice hasta que no haya cambios en lo que hay que mostrar	*/
	void actualizarPantalla(void){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
		switch (modo) {
 8001c34:	4b45      	ldr	r3, [pc, #276]	; (8001d4c <actualizarPantalla+0x11c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b06      	cmp	r3, #6
 8001c3a:	d87a      	bhi.n	8001d32 <actualizarPantalla+0x102>
 8001c3c:	a201      	add	r2, pc, #4	; (adr r2, 8001c44 <actualizarPantalla+0x14>)
 8001c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c42:	bf00      	nop
 8001c44:	08001c61 	.word	0x08001c61
 8001c48:	08001c83 	.word	0x08001c83
 8001c4c:	08001caf 	.word	0x08001caf
 8001c50:	08001cdb 	.word	0x08001cdb
 8001c54:	08001d07 	.word	0x08001d07
 8001c58:	08001c83 	.word	0x08001c83
 8001c5c:	08001caf 	.word	0x08001caf
					case INICIO:
						if(act_flag == 1){
 8001c60:	4b3b      	ldr	r3, [pc, #236]	; (8001d50 <actualizarPantalla+0x120>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d166      	bne.n	8001d36 <actualizarPantalla+0x106>
							lcdClear();
 8001c68:	f7ff fcf8 	bl	800165c <lcdClear>
							lcdCursor(0, 0);
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f7ff fd14 	bl	800169c <lcdCursor>
							lcdSendString("Sin alarma");
 8001c74:	4837      	ldr	r0, [pc, #220]	; (8001d54 <actualizarPantalla+0x124>)
 8001c76:	f7ff fd6d 	bl	8001754 <lcdSendString>
							act_flag=0;
 8001c7a:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <actualizarPantalla+0x120>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
						}
						break;
 8001c80:	e059      	b.n	8001d36 <actualizarPantalla+0x106>
					case VER_TEMP_ALARM:
					case VER_TEMP:
						if (strcmp(str_actual,str_temp)!=0){
 8001c82:	4935      	ldr	r1, [pc, #212]	; (8001d58 <actualizarPantalla+0x128>)
 8001c84:	4835      	ldr	r0, [pc, #212]	; (8001d5c <actualizarPantalla+0x12c>)
 8001c86:	f7fe fa63 	bl	8000150 <strcmp>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d054      	beq.n	8001d3a <actualizarPantalla+0x10a>
							lcdClear();
 8001c90:	f7ff fce4 	bl	800165c <lcdClear>
							lcdCursor(0, 0);
 8001c94:	2100      	movs	r1, #0
 8001c96:	2000      	movs	r0, #0
 8001c98:	f7ff fd00 	bl	800169c <lcdCursor>
							displayTemp(str_temp);	//displayTemp toma el string que contiene el valor de temperatura, le agrega los labels y lo manda por pantalla.
 8001c9c:	482e      	ldr	r0, [pc, #184]	; (8001d58 <actualizarPantalla+0x128>)
 8001c9e:	f7ff fdbf 	bl	8001820 <displayTemp>
							strncpy(str_actual,str_temp,16);
 8001ca2:	2210      	movs	r2, #16
 8001ca4:	492c      	ldr	r1, [pc, #176]	; (8001d58 <actualizarPantalla+0x128>)
 8001ca6:	482d      	ldr	r0, [pc, #180]	; (8001d5c <actualizarPantalla+0x12c>)
 8001ca8:	f004 fbef 	bl	800648a <strncpy>
						}


						break;
 8001cac:	e045      	b.n	8001d3a <actualizarPantalla+0x10a>
					case VER_PRES_ALARM:
					case VER_PRES:
						if (strcmp(str_actual,str_temp)!=0){
 8001cae:	492a      	ldr	r1, [pc, #168]	; (8001d58 <actualizarPantalla+0x128>)
 8001cb0:	482a      	ldr	r0, [pc, #168]	; (8001d5c <actualizarPantalla+0x12c>)
 8001cb2:	f7fe fa4d 	bl	8000150 <strcmp>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d040      	beq.n	8001d3e <actualizarPantalla+0x10e>
							lcdClear();
 8001cbc:	f7ff fcce 	bl	800165c <lcdClear>
							lcdCursor(0, 0);
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f7ff fcea 	bl	800169c <lcdCursor>
							displayPressure(str_temp);
 8001cc8:	4823      	ldr	r0, [pc, #140]	; (8001d58 <actualizarPantalla+0x128>)
 8001cca:	f7ff fddd 	bl	8001888 <displayPressure>
							strncpy(str_actual,str_temp,16);
 8001cce:	2210      	movs	r2, #16
 8001cd0:	4921      	ldr	r1, [pc, #132]	; (8001d58 <actualizarPantalla+0x128>)
 8001cd2:	4822      	ldr	r0, [pc, #136]	; (8001d5c <actualizarPantalla+0x12c>)
 8001cd4:	f004 fbd9 	bl	800648a <strncpy>
						}
						break;
 8001cd8:	e031      	b.n	8001d3e <actualizarPantalla+0x10e>
					case CONFIG_TEMP:
						if (strcmp(str_actual,str_temp)!=0){
 8001cda:	491f      	ldr	r1, [pc, #124]	; (8001d58 <actualizarPantalla+0x128>)
 8001cdc:	481f      	ldr	r0, [pc, #124]	; (8001d5c <actualizarPantalla+0x12c>)
 8001cde:	f7fe fa37 	bl	8000150 <strcmp>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d02c      	beq.n	8001d42 <actualizarPantalla+0x112>
							lcdClear();
 8001ce8:	f7ff fcb8 	bl	800165c <lcdClear>
							lcdCursor(0,0);
 8001cec:	2100      	movs	r1, #0
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f7ff fcd4 	bl	800169c <lcdCursor>
							displayAlarm(str_temp);
 8001cf4:	4818      	ldr	r0, [pc, #96]	; (8001d58 <actualizarPantalla+0x128>)
 8001cf6:	f7ff fdef 	bl	80018d8 <displayAlarm>
							strncpy(str_actual,str_temp,16);
 8001cfa:	2210      	movs	r2, #16
 8001cfc:	4916      	ldr	r1, [pc, #88]	; (8001d58 <actualizarPantalla+0x128>)
 8001cfe:	4817      	ldr	r0, [pc, #92]	; (8001d5c <actualizarPantalla+0x12c>)
 8001d00:	f004 fbc3 	bl	800648a <strncpy>
						}
						break;
 8001d04:	e01d      	b.n	8001d42 <actualizarPantalla+0x112>
					case INICIO_ALARM:
						if (strcmp(str_actual,str_temp)!=0){
 8001d06:	4914      	ldr	r1, [pc, #80]	; (8001d58 <actualizarPantalla+0x128>)
 8001d08:	4814      	ldr	r0, [pc, #80]	; (8001d5c <actualizarPantalla+0x12c>)
 8001d0a:	f7fe fa21 	bl	8000150 <strcmp>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d018      	beq.n	8001d46 <actualizarPantalla+0x116>
							lcdClear();
 8001d14:	f7ff fca2 	bl	800165c <lcdClear>
							lcdCursor(0,0);
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7ff fcbe 	bl	800169c <lcdCursor>
							displayInicioAlarm(str_temp);
 8001d20:	480d      	ldr	r0, [pc, #52]	; (8001d58 <actualizarPantalla+0x128>)
 8001d22:	f7ff fe01 	bl	8001928 <displayInicioAlarm>
							strncpy(str_actual,str_temp,16);
 8001d26:	2210      	movs	r2, #16
 8001d28:	490b      	ldr	r1, [pc, #44]	; (8001d58 <actualizarPantalla+0x128>)
 8001d2a:	480c      	ldr	r0, [pc, #48]	; (8001d5c <actualizarPantalla+0x12c>)
 8001d2c:	f004 fbad 	bl	800648a <strncpy>
						}
						break;
 8001d30:	e009      	b.n	8001d46 <actualizarPantalla+0x116>
					default:
						break;
 8001d32:	bf00      	nop
 8001d34:	e008      	b.n	8001d48 <actualizarPantalla+0x118>
						break;
 8001d36:	bf00      	nop
 8001d38:	e006      	b.n	8001d48 <actualizarPantalla+0x118>
						break;
 8001d3a:	bf00      	nop
 8001d3c:	e004      	b.n	8001d48 <actualizarPantalla+0x118>
						break;
 8001d3e:	bf00      	nop
 8001d40:	e002      	b.n	8001d48 <actualizarPantalla+0x118>
						break;
 8001d42:	bf00      	nop
 8001d44:	e000      	b.n	8001d48 <actualizarPantalla+0x118>
						break;
 8001d46:	bf00      	nop

				}


	}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000334 	.word	0x20000334
 8001d50:	20000016 	.word	0x20000016
 8001d54:	080089b0 	.word	0x080089b0
 8001d58:	20000344 	.word	0x20000344
 8001d5c:	20000000 	.word	0x20000000

08001d60 <comprobarAlarma>:

	void comprobarAlarma(void){
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0

		//Si se tiene que activar la alarma, se activa una bandera para que el timer toglee el led. Asi no uso HAL_delay en el programa principal
		if(alarma_final < temp){
 8001d64:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <comprobarAlarma+0x2c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a09      	ldr	r2, [pc, #36]	; (8001d90 <comprobarAlarma+0x30>)
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f860 	bl	8000e34 <__aeabi_fcmplt>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <comprobarAlarma+0x22>
			flag_alarma=1;
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <comprobarAlarma+0x34>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	701a      	strb	r2, [r3, #0]
			}
		else{
			flag_alarma=0;
		}

	}
 8001d80:	e002      	b.n	8001d88 <comprobarAlarma+0x28>
			flag_alarma=0;
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <comprobarAlarma+0x34>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
	}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000010 	.word	0x20000010
 8001d90:	20000338 	.word	0x20000338
 8001d94:	20000355 	.word	0x20000355

08001d98 <comprobarPulsacionLarga>:


	void comprobarPulsacionLarga(void){
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0

		if(ancho_pulso >= 3000){
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <comprobarPulsacionLarga+0x40>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d912      	bls.n	8001dce <comprobarPulsacionLarga+0x36>
			ancho_pulso = 0;
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <comprobarPulsacionLarga+0x40>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
			ICValue = 0;
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <comprobarPulsacionLarga+0x44>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
			modo=INICIO;
 8001db4:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <comprobarPulsacionLarga+0x48>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
			act_flag=1;
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <comprobarPulsacionLarga+0x4c>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
			alarma = 0;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <comprobarPulsacionLarga+0x50>)
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
			alarma_final= 250.0;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <comprobarPulsacionLarga+0x54>)
 8001dca:	4a09      	ldr	r2, [pc, #36]	; (8001df0 <comprobarPulsacionLarga+0x58>)
 8001dcc:	601a      	str	r2, [r3, #0]

		}


	}
 8001dce:	bf00      	nop
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	2000035c 	.word	0x2000035c
 8001ddc:	20000358 	.word	0x20000358
 8001de0:	20000334 	.word	0x20000334
 8001de4:	20000016 	.word	0x20000016
 8001de8:	20000340 	.word	0x20000340
 8001dec:	20000010 	.word	0x20000010
 8001df0:	437a0000 	.word	0x437a0000

08001df4 <loop>:



	void loop(void){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0

	medirTempPres();
 8001df8:	f7ff feba 	bl	8001b70 <medirTempPres>
	actualizarValores();
 8001dfc:	f7ff fed4 	bl	8001ba8 <actualizarValores>
	actualizarPantalla();
 8001e00:	f7ff ff16 	bl	8001c30 <actualizarPantalla>
	comprobarAlarma();
 8001e04:	f7ff ffac 	bl	8001d60 <comprobarAlarma>
	comprobarPulsacionLarga();
 8001e08:	f7ff ffc6 	bl	8001d98 <comprobarPulsacionLarga>




}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e14:	f000 fc90 	bl	8002738 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e18:	f000 f81e 	bl	8001e58 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e1c:	f000 f942 	bl	80020a4 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001e20:	f7ff fe78 	bl	8001b14 <MX_I2C1_Init>
	MX_TIM2_Init();
 8001e24:	f000 f852 	bl	8001ecc <MX_TIM2_Init>
	MX_TIM3_Init();
 8001e28:	f000 f89e 	bl	8001f68 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	bmpInit();
 8001e2c:	f7ff fbb0 	bl	8001590 <bmpInit>
	lcdInit();
 8001e30:	f7ff fc53 	bl	80016da <lcdInit>
	HAL_TIM_Base_Start_IT(&htim2);
 8001e34:	4806      	ldr	r0, [pc, #24]	; (8001e50 <main+0x40>)
 8001e36:	f002 fdcd 	bl	80049d4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);	//Inicializacion del timer 3 en modo input capture channel 1 (para rising edge)
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4805      	ldr	r0, [pc, #20]	; (8001e54 <main+0x44>)
 8001e3e:	f002 ff33 	bl	8004ca8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2); //channel 2 (que detecta los falling edge)
 8001e42:	2104      	movs	r1, #4
 8001e44:	4803      	ldr	r0, [pc, #12]	; (8001e54 <main+0x44>)
 8001e46:	f002 fe6f 	bl	8004b28 <HAL_TIM_IC_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		loop();
 8001e4a:	f7ff ffd3 	bl	8001df4 <loop>
 8001e4e:	e7fc      	b.n	8001e4a <main+0x3a>
 8001e50:	200002a4 	.word	0x200002a4
 8001e54:	200002ec 	.word	0x200002ec

08001e58 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b090      	sub	sp, #64	; 0x40
 8001e5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001e5e:	f107 0318 	add.w	r3, r7, #24
 8001e62:	2228      	movs	r2, #40	; 0x28
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f003 fe78 	bl	8005b5c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001e6c:	1d3b      	adds	r3, r7, #4
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]
 8001e74:	609a      	str	r2, [r3, #8]
 8001e76:	60da      	str	r2, [r3, #12]
 8001e78:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e82:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e88:	f107 0318 	add.w	r3, r7, #24
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f002 f94b 	bl	8004128 <HAL_RCC_OscConfig>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <SystemClock_Config+0x44>
		Error_Handler();
 8001e98:	f000 fa32 	bl	8002300 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 fbb9 	bl	800462c <HAL_RCC_ClockConfig>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <SystemClock_Config+0x6c>
		Error_Handler();
 8001ec0:	f000 fa1e 	bl	8002300 <Error_Handler>
	}
}
 8001ec4:	bf00      	nop
 8001ec6:	3740      	adds	r7, #64	; 0x40
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001ed2:	f107 0308 	add.w	r3, r7, #8
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001ee0:	463b      	mov	r3, r7
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001ee8:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <MX_TIM2_Init+0x98>)
 8001eea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eee:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8000 - 1;
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <MX_TIM2_Init+0x98>)
 8001ef2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001ef6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <MX_TIM2_Init+0x98>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 500;
 8001efe:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <MX_TIM2_Init+0x98>)
 8001f00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f04:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f06:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <MX_TIM2_Init+0x98>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <MX_TIM2_Init+0x98>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001f12:	4814      	ldr	r0, [pc, #80]	; (8001f64 <MX_TIM2_Init+0x98>)
 8001f14:	f002 fd0e 	bl	8004934 <HAL_TIM_Base_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM2_Init+0x56>
		Error_Handler();
 8001f1e:	f000 f9ef 	bl	8002300 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f26:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001f28:	f107 0308 	add.w	r3, r7, #8
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480d      	ldr	r0, [pc, #52]	; (8001f64 <MX_TIM2_Init+0x98>)
 8001f30:	f003 f95c 	bl	80051ec <HAL_TIM_ConfigClockSource>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM2_Init+0x72>
		Error_Handler();
 8001f3a:	f000 f9e1 	bl	8002300 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001f46:	463b      	mov	r3, r7
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4806      	ldr	r0, [pc, #24]	; (8001f64 <MX_TIM2_Init+0x98>)
 8001f4c:	f003 fd6c 	bl	8005a28 <HAL_TIMEx_MasterConfigSynchronization>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001f56:	f000 f9d3 	bl	8002300 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001f5a:	bf00      	nop
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200002a4 	.word	0x200002a4

08001f68 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b090      	sub	sp, #64	; 0x40
 8001f6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001f6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	609a      	str	r2, [r3, #8]
 8001f98:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001fa2:	4b3e      	ldr	r3, [pc, #248]	; (800209c <MX_TIM3_Init+0x134>)
 8001fa4:	4a3e      	ldr	r2, [pc, #248]	; (80020a0 <MX_TIM3_Init+0x138>)
 8001fa6:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 8000 - 1;
 8001fa8:	4b3c      	ldr	r3, [pc, #240]	; (800209c <MX_TIM3_Init+0x134>)
 8001faa:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001fae:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fb0:	4b3a      	ldr	r3, [pc, #232]	; (800209c <MX_TIM3_Init+0x134>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001fb6:	4b39      	ldr	r3, [pc, #228]	; (800209c <MX_TIM3_Init+0x134>)
 8001fb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fbc:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fbe:	4b37      	ldr	r3, [pc, #220]	; (800209c <MX_TIM3_Init+0x134>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fc4:	4b35      	ldr	r3, [pc, #212]	; (800209c <MX_TIM3_Init+0x134>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001fca:	4834      	ldr	r0, [pc, #208]	; (800209c <MX_TIM3_Init+0x134>)
 8001fcc:	f002 fcb2 	bl	8004934 <HAL_TIM_Base_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM3_Init+0x72>
		Error_Handler();
 8001fd6:	f000 f993 	bl	8002300 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fde:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001fe0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	482d      	ldr	r0, [pc, #180]	; (800209c <MX_TIM3_Init+0x134>)
 8001fe8:	f003 f900 	bl	80051ec <HAL_TIM_ConfigClockSource>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM3_Init+0x8e>
		Error_Handler();
 8001ff2:	f000 f985 	bl	8002300 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK) {
 8001ff6:	4829      	ldr	r0, [pc, #164]	; (800209c <MX_TIM3_Init+0x134>)
 8001ff8:	f002 fd3e 	bl	8004a78 <HAL_TIM_IC_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM3_Init+0x9e>
		Error_Handler();
 8002002:	f000 f97d 	bl	8002300 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002006:	2304      	movs	r3, #4
 8002008:	61fb      	str	r3, [r7, #28]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800200a:	2350      	movs	r3, #80	; 0x50
 800200c:	623b      	str	r3, [r7, #32]
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800200e:	2302      	movs	r3, #2
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
	sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
	sSlaveConfig.TriggerFilter = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK) {
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	4619      	mov	r1, r3
 8002020:	481e      	ldr	r0, [pc, #120]	; (800209c <MX_TIM3_Init+0x134>)
 8002022:	f003 f9a7 	bl	8005374 <HAL_TIM_SlaveConfigSynchro>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM3_Init+0xc8>
		Error_Handler();
 800202c:	f000 f968 	bl	8002300 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002030:	2302      	movs	r3, #2
 8002032:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002034:	2301      	movs	r3, #1
 8002036:	613b      	str	r3, [r7, #16]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
	sConfigIC.ICFilter = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	2200      	movs	r2, #0
 8002046:	4619      	mov	r1, r3
 8002048:	4814      	ldr	r0, [pc, #80]	; (800209c <MX_TIM3_Init+0x134>)
 800204a:	f003 f83b 	bl	80050c4 <HAL_TIM_IC_ConfigChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM3_Init+0xf0>
		Error_Handler();
 8002054:	f000 f954 	bl	8002300 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800205c:	2302      	movs	r3, #2
 800205e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	2204      	movs	r2, #4
 8002066:	4619      	mov	r1, r3
 8002068:	480c      	ldr	r0, [pc, #48]	; (800209c <MX_TIM3_Init+0x134>)
 800206a:	f003 f82b 	bl	80050c4 <HAL_TIM_IC_ConfigChannel>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM3_Init+0x110>
		Error_Handler();
 8002074:	f000 f944 	bl	8002300 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002078:	2300      	movs	r3, #0
 800207a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002080:	1d3b      	adds	r3, r7, #4
 8002082:	4619      	mov	r1, r3
 8002084:	4805      	ldr	r0, [pc, #20]	; (800209c <MX_TIM3_Init+0x134>)
 8002086:	f003 fccf 	bl	8005a28 <HAL_TIMEx_MasterConfigSynchronization>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_TIM3_Init+0x12c>
			!= HAL_OK) {
		Error_Handler();
 8002090:	f000 f936 	bl	8002300 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8002094:	bf00      	nop
 8002096:	3740      	adds	r7, #64	; 0x40
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	200002ec 	.word	0x200002ec
 80020a0:	40000400 	.word	0x40000400

080020a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80020aa:	f107 0310 	add.w	r3, r7, #16
 80020ae:	2200      	movs	r2, #0
 80020b0:	601a      	str	r2, [r3, #0]
 80020b2:	605a      	str	r2, [r3, #4]
 80020b4:	609a      	str	r2, [r3, #8]
 80020b6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80020b8:	4b3a      	ldr	r3, [pc, #232]	; (80021a4 <MX_GPIO_Init+0x100>)
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	4a39      	ldr	r2, [pc, #228]	; (80021a4 <MX_GPIO_Init+0x100>)
 80020be:	f043 0310 	orr.w	r3, r3, #16
 80020c2:	6193      	str	r3, [r2, #24]
 80020c4:	4b37      	ldr	r3, [pc, #220]	; (80021a4 <MX_GPIO_Init+0x100>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80020d0:	4b34      	ldr	r3, [pc, #208]	; (80021a4 <MX_GPIO_Init+0x100>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	4a33      	ldr	r2, [pc, #204]	; (80021a4 <MX_GPIO_Init+0x100>)
 80020d6:	f043 0320 	orr.w	r3, r3, #32
 80020da:	6193      	str	r3, [r2, #24]
 80020dc:	4b31      	ldr	r3, [pc, #196]	; (80021a4 <MX_GPIO_Init+0x100>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80020e8:	4b2e      	ldr	r3, [pc, #184]	; (80021a4 <MX_GPIO_Init+0x100>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	4a2d      	ldr	r2, [pc, #180]	; (80021a4 <MX_GPIO_Init+0x100>)
 80020ee:	f043 0304 	orr.w	r3, r3, #4
 80020f2:	6193      	str	r3, [r2, #24]
 80020f4:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <MX_GPIO_Init+0x100>)
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002100:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <MX_GPIO_Init+0x100>)
 8002102:	699b      	ldr	r3, [r3, #24]
 8002104:	4a27      	ldr	r2, [pc, #156]	; (80021a4 <MX_GPIO_Init+0x100>)
 8002106:	f043 0308 	orr.w	r3, r3, #8
 800210a:	6193      	str	r3, [r2, #24]
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <MX_GPIO_Init+0x100>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	603b      	str	r3, [r7, #0]
 8002116:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002118:	2201      	movs	r2, #1
 800211a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800211e:	4822      	ldr	r0, [pc, #136]	; (80021a8 <MX_GPIO_Init+0x104>)
 8002120:	f000 fe39 	bl	8002d96 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002124:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002128:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212a:	2301      	movs	r3, #1
 800212c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2302      	movs	r3, #2
 8002134:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002136:	f107 0310 	add.w	r3, r7, #16
 800213a:	4619      	mov	r1, r3
 800213c:	481a      	ldr	r0, [pc, #104]	; (80021a8 <MX_GPIO_Init+0x104>)
 800213e:	f000 fc8f 	bl	8002a60 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA2 PA3 PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5;
 8002142:	232e      	movs	r3, #46	; 0x2e
 8002144:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002146:	4b19      	ldr	r3, [pc, #100]	; (80021ac <MX_GPIO_Init+0x108>)
 8002148:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	4619      	mov	r1, r3
 8002154:	4816      	ldr	r0, [pc, #88]	; (80021b0 <MX_GPIO_Init+0x10c>)
 8002156:	f000 fc83 	bl	8002a60 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800215a:	2200      	movs	r2, #0
 800215c:	2100      	movs	r1, #0
 800215e:	2007      	movs	r0, #7
 8002160:	f000 fc47 	bl	80029f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002164:	2007      	movs	r0, #7
 8002166:	f000 fc60 	bl	8002a2a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2100      	movs	r1, #0
 800216e:	2008      	movs	r0, #8
 8002170:	f000 fc3f 	bl	80029f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002174:	2008      	movs	r0, #8
 8002176:	f000 fc58 	bl	8002a2a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800217a:	2200      	movs	r2, #0
 800217c:	2100      	movs	r1, #0
 800217e:	2009      	movs	r0, #9
 8002180:	f000 fc37 	bl	80029f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002184:	2009      	movs	r0, #9
 8002186:	f000 fc50 	bl	8002a2a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800218a:	2200      	movs	r2, #0
 800218c:	2100      	movs	r1, #0
 800218e:	2017      	movs	r0, #23
 8002190:	f000 fc2f 	bl	80029f2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002194:	2017      	movs	r0, #23
 8002196:	f000 fc48 	bl	8002a2a <HAL_NVIC_EnableIRQ>

}
 800219a:	bf00      	nop
 800219c:	3720      	adds	r7, #32
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40011000 	.word	0x40011000
 80021ac:	10110000 	.word	0x10110000
 80021b0:	40010800 	.word	0x40010800

080021b4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
/* INTERUPCIONES */

/*ISR del timer 2 que toglea el led cada medio segundo*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]

	if (htim == &htim2) {
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a13      	ldr	r2, [pc, #76]	; (800220c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d11e      	bne.n	8002202 <HAL_TIM_PeriodElapsedCallback+0x4e>

		flag_medicion = 1;//El timer me hace tomar mediciones cada cierto tiempo
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	701a      	strb	r2, [r3, #0]

		if (flag_alarma == 1) {				//Toglea el led cada 0.5 segundos.
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d105      	bne.n	80021de <HAL_TIM_PeriodElapsedCallback+0x2a>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80021d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021d6:	4810      	ldr	r0, [pc, #64]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80021d8:	f000 fdf5 	bl	8002dc6 <HAL_GPIO_TogglePin>
				&& HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {	//Para que apague el led una sola vez y no tenga que estar entrando todo el tiempo.
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
		}

	}
}
 80021dc:	e011      	b.n	8002202 <HAL_TIM_PeriodElapsedCallback+0x4e>
		} else if (flag_alarma == 0
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10d      	bne.n	8002202 <HAL_TIM_PeriodElapsedCallback+0x4e>
				&& HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0) {	//Para que apague el led una sola vez y no tenga que estar entrando todo el tiempo.
 80021e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ea:	480b      	ldr	r0, [pc, #44]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80021ec:	f000 fdbc 	bl	8002d68 <HAL_GPIO_ReadPin>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d105      	bne.n	8002202 <HAL_TIM_PeriodElapsedCallback+0x4e>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80021f6:	2201      	movs	r2, #1
 80021f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021fc:	4806      	ldr	r0, [pc, #24]	; (8002218 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80021fe:	f000 fdca 	bl	8002d96 <HAL_GPIO_WritePin>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	200002a4 	.word	0x200002a4
 8002210:	20000356 	.word	0x20000356
 8002214:	20000355 	.word	0x20000355
 8002218:	40011000 	.word	0x40011000

0800221c <HAL_TIM_IC_CaptureCallback>:



 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

	while (contReb > 1) {
 8002224:	e005      	b.n	8002232 <HAL_TIM_IC_CaptureCallback+0x16>
		contReb--;
 8002226:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002230:	801a      	strh	r2, [r3, #0]
	while (contReb > 1) {
 8002232:	4b29      	ldr	r3, [pc, #164]	; (80022d8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	2b01      	cmp	r3, #1
 8002238:	d8f5      	bhi.n	8002226 <HAL_TIM_IC_CaptureCallback+0xa>
	}

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {//Verifica que la interrupcion provenga del channel 1.
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	7f1b      	ldrb	r3, [r3, #28]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d141      	bne.n	80022c6 <HAL_TIM_IC_CaptureCallback+0xaa>

		if (modo < CONFIG_TEMP) {
 8002242:	4b26      	ldr	r3, [pc, #152]	; (80022dc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d806      	bhi.n	8002258 <HAL_TIM_IC_CaptureCallback+0x3c>
			modo = INICIO;
 800224a:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_TIM_IC_CaptureCallback+0xc0>)
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
			act_flag = 1;
 8002250:	4b23      	ldr	r3, [pc, #140]	; (80022e0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
 8002256:	e021      	b.n	800229c <HAL_TIM_IC_CaptureCallback+0x80>
		} else if ((modo == CONFIG_TEMP) && (flag_prim_config == 0)) {
 8002258:	4b20      	ldr	r3, [pc, #128]	; (80022dc <HAL_TIM_IC_CaptureCallback+0xc0>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d10a      	bne.n	8002276 <HAL_TIM_IC_CaptureCallback+0x5a>
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d106      	bne.n	8002276 <HAL_TIM_IC_CaptureCallback+0x5a>
			modo = INICIO;
 8002268:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <HAL_TIM_IC_CaptureCallback+0xc0>)
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
			act_flag = 1;
 800226e:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002270:	2201      	movs	r2, #1
 8002272:	701a      	strb	r2, [r3, #0]
 8002274:	e012      	b.n	800229c <HAL_TIM_IC_CaptureCallback+0x80>
		} else if ((modo == CONFIG_TEMP) && (flag_prim_config == 1)) {
 8002276:	4b19      	ldr	r3, [pc, #100]	; (80022dc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d10b      	bne.n	8002296 <HAL_TIM_IC_CaptureCallback+0x7a>
 800227e:	4b19      	ldr	r3, [pc, #100]	; (80022e4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d107      	bne.n	8002296 <HAL_TIM_IC_CaptureCallback+0x7a>
			modo = INICIO_ALARM;
 8002286:	4b15      	ldr	r3, [pc, #84]	; (80022dc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002288:	2204      	movs	r2, #4
 800228a:	701a      	strb	r2, [r3, #0]
			alarma = alarma_final;//Para no perder el valor de alarma que configure.
 800228c:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a16      	ldr	r2, [pc, #88]	; (80022ec <HAL_TIM_IC_CaptureCallback+0xd0>)
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	e002      	b.n	800229c <HAL_TIM_IC_CaptureCallback+0x80>
		} else {
			modo = INICIO_ALARM;
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002298:	2204      	movs	r2, #4
 800229a:	701a      	strb	r2, [r3, #0]
		}

		flag_clear = 1;
 800229c:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]

		ICValue = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80022a2:	2100      	movs	r1, #0
 80022a4:	4813      	ldr	r0, [pc, #76]	; (80022f4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80022a6:	f003 f8a7 	bl	80053f8 <HAL_TIM_ReadCapturedValue>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80022ae:	6013      	str	r3, [r2, #0]

		if (ICValue != 0) {
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_TIM_IC_CaptureCallback+0xdc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d006      	beq.n	80022c6 <HAL_TIM_IC_CaptureCallback+0xaa>

			ancho_pulso = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 80022b8:	2104      	movs	r1, #4
 80022ba:	480e      	ldr	r0, [pc, #56]	; (80022f4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80022bc:	f003 f89c 	bl	80053f8 <HAL_TIM_ReadCapturedValue>
 80022c0:	4603      	mov	r3, r0
 80022c2:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <HAL_TIM_IC_CaptureCallback+0xe0>)
 80022c4:	6013      	str	r3, [r2, #0]

		}

	}

	contReb = 2000;
 80022c6:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <HAL_TIM_IC_CaptureCallback+0xbc>)
 80022c8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80022cc:	801a      	strh	r2, [r3, #0]
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000014 	.word	0x20000014
 80022dc:	20000334 	.word	0x20000334
 80022e0:	20000016 	.word	0x20000016
 80022e4:	20000354 	.word	0x20000354
 80022e8:	20000010 	.word	0x20000010
 80022ec:	20000340 	.word	0x20000340
 80022f0:	20000357 	.word	0x20000357
 80022f4:	200002ec 	.word	0x200002ec
 80022f8:	20000358 	.word	0x20000358
 80022fc:	2000035c 	.word	0x2000035c

08002300 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002304:	b672      	cpsid	i
}
 8002306:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002308:	e7fe      	b.n	8002308 <Error_Handler+0x8>
	...

0800230c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <HAL_MspInit+0x60>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	4a15      	ldr	r2, [pc, #84]	; (800236c <HAL_MspInit+0x60>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6193      	str	r3, [r2, #24]
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <HAL_MspInit+0x60>)
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <HAL_MspInit+0x60>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	4a0f      	ldr	r2, [pc, #60]	; (800236c <HAL_MspInit+0x60>)
 8002330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002334:	61d3      	str	r3, [r2, #28]
 8002336:	4b0d      	ldr	r3, [pc, #52]	; (800236c <HAL_MspInit+0x60>)
 8002338:	69db      	ldr	r3, [r3, #28]
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002342:	2004      	movs	r0, #4
 8002344:	f000 fb4a 	bl	80029dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_MspInit+0x64>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	60fb      	str	r3, [r7, #12]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4a04      	ldr	r2, [pc, #16]	; (8002370 <HAL_MspInit+0x64>)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002364:	bf00      	nop
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40021000 	.word	0x40021000
 8002370:	40010000 	.word	0x40010000

08002374 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 0310 	add.w	r3, r7, #16
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a15      	ldr	r2, [pc, #84]	; (80023e4 <HAL_I2C_MspInit+0x70>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d123      	bne.n	80023dc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <HAL_I2C_MspInit+0x74>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <HAL_I2C_MspInit+0x74>)
 800239a:	f043 0308 	orr.w	r3, r3, #8
 800239e:	6193      	str	r3, [r2, #24]
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <HAL_I2C_MspInit+0x74>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	60fb      	str	r3, [r7, #12]
 80023aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023ac:	23c0      	movs	r3, #192	; 0xc0
 80023ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023b0:	2312      	movs	r3, #18
 80023b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023b4:	2303      	movs	r3, #3
 80023b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b8:	f107 0310 	add.w	r3, r7, #16
 80023bc:	4619      	mov	r1, r3
 80023be:	480b      	ldr	r0, [pc, #44]	; (80023ec <HAL_I2C_MspInit+0x78>)
 80023c0:	f000 fb4e 	bl	8002a60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <HAL_I2C_MspInit+0x74>)
 80023c6:	69db      	ldr	r3, [r3, #28]
 80023c8:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_I2C_MspInit+0x74>)
 80023ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023ce:	61d3      	str	r3, [r2, #28]
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <HAL_I2C_MspInit+0x74>)
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023dc:	bf00      	nop
 80023de:	3720      	adds	r7, #32
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40005400 	.word	0x40005400
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40010c00 	.word	0x40010c00

080023f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 0318 	add.w	r3, r7, #24
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240e:	d114      	bne.n	800243a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002410:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <HAL_TIM_Base_MspInit+0xb4>)
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <HAL_TIM_Base_MspInit+0xb4>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	61d3      	str	r3, [r2, #28]
 800241c:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <HAL_TIM_Base_MspInit+0xb4>)
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	617b      	str	r3, [r7, #20]
 8002426:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 1);
 8002428:	2201      	movs	r2, #1
 800242a:	2103      	movs	r1, #3
 800242c:	201c      	movs	r0, #28
 800242e:	f000 fae0 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002432:	201c      	movs	r0, #28
 8002434:	f000 faf9 	bl	8002a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002438:	e030      	b.n	800249c <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM3)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a1a      	ldr	r2, [pc, #104]	; (80024a8 <HAL_TIM_Base_MspInit+0xb8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d12b      	bne.n	800249c <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002444:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <HAL_TIM_Base_MspInit+0xb4>)
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <HAL_TIM_Base_MspInit+0xb4>)
 800244a:	f043 0302 	orr.w	r3, r3, #2
 800244e:	61d3      	str	r3, [r2, #28]
 8002450:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <HAL_TIM_Base_MspInit+0xb4>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_TIM_Base_MspInit+0xb4>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	4a10      	ldr	r2, [pc, #64]	; (80024a4 <HAL_TIM_Base_MspInit+0xb4>)
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	6193      	str	r3, [r2, #24]
 8002468:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <HAL_TIM_Base_MspInit+0xb4>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002474:	2340      	movs	r3, #64	; 0x40
 8002476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002478:	2300      	movs	r3, #0
 800247a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002480:	f107 0318 	add.w	r3, r7, #24
 8002484:	4619      	mov	r1, r3
 8002486:	4809      	ldr	r0, [pc, #36]	; (80024ac <HAL_TIM_Base_MspInit+0xbc>)
 8002488:	f000 faea 	bl	8002a60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800248c:	2200      	movs	r2, #0
 800248e:	2100      	movs	r1, #0
 8002490:	201d      	movs	r0, #29
 8002492:	f000 faae 	bl	80029f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002496:	201d      	movs	r0, #29
 8002498:	f000 fac7 	bl	8002a2a <HAL_NVIC_EnableIRQ>
}
 800249c:	bf00      	nop
 800249e:	3728      	adds	r7, #40	; 0x28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40000400 	.word	0x40000400
 80024ac:	40010800 	.word	0x40010800

080024b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <NMI_Handler+0x4>

080024b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ba:	e7fe      	b.n	80024ba <HardFault_Handler+0x4>

080024bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024c0:	e7fe      	b.n	80024c0 <MemManage_Handler+0x4>

080024c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024c2:	b480      	push	{r7}
 80024c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c6:	e7fe      	b.n	80024c6 <BusFault_Handler+0x4>

080024c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024cc:	e7fe      	b.n	80024cc <UsageFault_Handler+0x4>

080024ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ce:	b480      	push	{r7}
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024e6:	b480      	push	{r7}
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024f6:	f000 f965 	bl	80027c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}

080024fe <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002502:	2002      	movs	r0, #2
 8002504:	f000 fc78 	bl	8002df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}

0800250c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002510:	2004      	movs	r0, #4
 8002512:	f000 fc71 	bl	8002df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}

0800251a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800251e:	2008      	movs	r0, #8
 8002520:	f000 fc6a 	bl	8002df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}

08002528 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800252c:	2020      	movs	r0, #32
 800252e:	f000 fc63 	bl	8002df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <TIM2_IRQHandler+0x10>)
 800253e:	f002 fcb9 	bl	8004eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	200002a4 	.word	0x200002a4

0800254c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002550:	4802      	ldr	r0, [pc, #8]	; (800255c <TIM3_IRQHandler+0x10>)
 8002552:	f002 fcaf 	bl	8004eb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200002ec 	.word	0x200002ec

08002560 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
	return 1;
 8002564:	2301      	movs	r3, #1
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr

0800256e <_kill>:

int _kill(int pid, int sig)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002578:	f003 fac6 	bl	8005b08 <__errno>
 800257c:	4603      	mov	r3, r0
 800257e:	2216      	movs	r2, #22
 8002580:	601a      	str	r2, [r3, #0]
	return -1;
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_exit>:

void _exit (int status)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002596:	f04f 31ff 	mov.w	r1, #4294967295
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ffe7 	bl	800256e <_kill>
	while (1) {}		/* Make sure we hang here */
 80025a0:	e7fe      	b.n	80025a0 <_exit+0x12>

080025a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b086      	sub	sp, #24
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	e00a      	b.n	80025ca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025b4:	f3af 8000 	nop.w
 80025b8:	4601      	mov	r1, r0
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	1c5a      	adds	r2, r3, #1
 80025be:	60ba      	str	r2, [r7, #8]
 80025c0:	b2ca      	uxtb	r2, r1
 80025c2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	3301      	adds	r3, #1
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	dbf0      	blt.n	80025b4 <_read+0x12>
	}

return len;
 80025d2:	687b      	ldr	r3, [r7, #4]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3718      	adds	r7, #24
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e8:	2300      	movs	r3, #0
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	e009      	b.n	8002602 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	60ba      	str	r2, [r7, #8]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3301      	adds	r3, #1
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	429a      	cmp	r2, r3
 8002608:	dbf1      	blt.n	80025ee <_write+0x12>
	}
	return len;
 800260a:	687b      	ldr	r3, [r7, #4]
}
 800260c:	4618      	mov	r0, r3
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <_close>:

int _close(int file)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	return -1;
 800261c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr

0800262a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800262a:	b480      	push	{r7}
 800262c:	b083      	sub	sp, #12
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
 8002632:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800263a:	605a      	str	r2, [r3, #4]
	return 0;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <_isatty>:

int _isatty(int file)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
	return 1;
 8002650:	2301      	movs	r3, #1
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
	return 0;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800267c:	4a14      	ldr	r2, [pc, #80]	; (80026d0 <_sbrk+0x5c>)
 800267e:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <_sbrk+0x60>)
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002688:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <_sbrk+0x64>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d102      	bne.n	8002696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <_sbrk+0x64>)
 8002692:	4a12      	ldr	r2, [pc, #72]	; (80026dc <_sbrk+0x68>)
 8002694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002696:	4b10      	ldr	r3, [pc, #64]	; (80026d8 <_sbrk+0x64>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d207      	bcs.n	80026b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a4:	f003 fa30 	bl	8005b08 <__errno>
 80026a8:	4603      	mov	r3, r0
 80026aa:	220c      	movs	r2, #12
 80026ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	e009      	b.n	80026c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b4:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <_sbrk+0x64>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ba:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <_sbrk+0x64>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4413      	add	r3, r2
 80026c2:	4a05      	ldr	r2, [pc, #20]	; (80026d8 <_sbrk+0x64>)
 80026c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026c6:	68fb      	ldr	r3, [r7, #12]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20005000 	.word	0x20005000
 80026d4:	00000400 	.word	0x00000400
 80026d8:	20000360 	.word	0x20000360
 80026dc:	20000378 	.word	0x20000378

080026e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026e4:	bf00      	nop
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <Reset_Handler>:
 80026ec:	480c      	ldr	r0, [pc, #48]	; (8002720 <LoopFillZerobss+0x12>)
 80026ee:	490d      	ldr	r1, [pc, #52]	; (8002724 <LoopFillZerobss+0x16>)
 80026f0:	4a0d      	ldr	r2, [pc, #52]	; (8002728 <LoopFillZerobss+0x1a>)
 80026f2:	2300      	movs	r3, #0
 80026f4:	e002      	b.n	80026fc <LoopCopyDataInit>

080026f6 <CopyDataInit>:
 80026f6:	58d4      	ldr	r4, [r2, r3]
 80026f8:	50c4      	str	r4, [r0, r3]
 80026fa:	3304      	adds	r3, #4

080026fc <LoopCopyDataInit>:
 80026fc:	18c4      	adds	r4, r0, r3
 80026fe:	428c      	cmp	r4, r1
 8002700:	d3f9      	bcc.n	80026f6 <CopyDataInit>
 8002702:	4a0a      	ldr	r2, [pc, #40]	; (800272c <LoopFillZerobss+0x1e>)
 8002704:	4c0a      	ldr	r4, [pc, #40]	; (8002730 <LoopFillZerobss+0x22>)
 8002706:	2300      	movs	r3, #0
 8002708:	e001      	b.n	800270e <LoopFillZerobss>

0800270a <FillZerobss>:
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	3204      	adds	r2, #4

0800270e <LoopFillZerobss>:
 800270e:	42a2      	cmp	r2, r4
 8002710:	d3fb      	bcc.n	800270a <FillZerobss>
 8002712:	f7ff ffe5 	bl	80026e0 <SystemInit>
 8002716:	f003 f9fd 	bl	8005b14 <__libc_init_array>
 800271a:	f7ff fb79 	bl	8001e10 <main>
 800271e:	4770      	bx	lr
 8002720:	20000000 	.word	0x20000000
 8002724:	200001f4 	.word	0x200001f4
 8002728:	08008dc4 	.word	0x08008dc4
 800272c:	200001f4 	.word	0x200001f4
 8002730:	20000378 	.word	0x20000378

08002734 <ADC1_2_IRQHandler>:
 8002734:	e7fe      	b.n	8002734 <ADC1_2_IRQHandler>
	...

08002738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_Init+0x28>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a07      	ldr	r2, [pc, #28]	; (8002760 <HAL_Init+0x28>)
 8002742:	f043 0310 	orr.w	r3, r3, #16
 8002746:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002748:	2003      	movs	r0, #3
 800274a:	f000 f947 	bl	80029dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800274e:	2007      	movs	r0, #7
 8002750:	f000 f808 	bl	8002764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002754:	f7ff fdda 	bl	800230c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40022000 	.word	0x40022000

08002764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_InitTick+0x54>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_InitTick+0x58>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	4619      	mov	r1, r3
 8002776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800277a:	fbb3 f3f1 	udiv	r3, r3, r1
 800277e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f95f 	bl	8002a46 <HAL_SYSTICK_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e00e      	b.n	80027b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b0f      	cmp	r3, #15
 8002796:	d80a      	bhi.n	80027ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002798:	2200      	movs	r2, #0
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	f04f 30ff 	mov.w	r0, #4294967295
 80027a0:	f000 f927 	bl	80029f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a4:	4a06      	ldr	r2, [pc, #24]	; (80027c0 <HAL_InitTick+0x5c>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e000      	b.n	80027b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000018 	.word	0x20000018
 80027bc:	20000020 	.word	0x20000020
 80027c0:	2000001c 	.word	0x2000001c

080027c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_IncTick+0x1c>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <HAL_IncTick+0x20>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	4a03      	ldr	r2, [pc, #12]	; (80027e4 <HAL_IncTick+0x20>)
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	20000020 	.word	0x20000020
 80027e4:	20000364 	.word	0x20000364

080027e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return uwTick;
 80027ec:	4b02      	ldr	r3, [pc, #8]	; (80027f8 <HAL_GetTick+0x10>)
 80027ee:	681b      	ldr	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	20000364 	.word	0x20000364

080027fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002804:	f7ff fff0 	bl	80027e8 <HAL_GetTick>
 8002808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002814:	d005      	beq.n	8002822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002816:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <HAL_Delay+0x44>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	461a      	mov	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4413      	add	r3, r2
 8002820:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002822:	bf00      	nop
 8002824:	f7ff ffe0 	bl	80027e8 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	429a      	cmp	r2, r3
 8002832:	d8f7      	bhi.n	8002824 <HAL_Delay+0x28>
  {
  }
}
 8002834:	bf00      	nop
 8002836:	bf00      	nop
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000020 	.word	0x20000020

08002844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <__NVIC_SetPriorityGrouping+0x44>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002860:	4013      	ands	r3, r2
 8002862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800286c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002876:	4a04      	ldr	r2, [pc, #16]	; (8002888 <__NVIC_SetPriorityGrouping+0x44>)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	60d3      	str	r3, [r2, #12]
}
 800287c:	bf00      	nop
 800287e:	3714      	adds	r7, #20
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	e000ed00 	.word	0xe000ed00

0800288c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002890:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	0a1b      	lsrs	r3, r3, #8
 8002896:	f003 0307 	and.w	r3, r3, #7
}
 800289a:	4618      	mov	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	db0b      	blt.n	80028d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	f003 021f 	and.w	r2, r3, #31
 80028c0:	4906      	ldr	r1, [pc, #24]	; (80028dc <__NVIC_EnableIRQ+0x34>)
 80028c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c6:	095b      	lsrs	r3, r3, #5
 80028c8:	2001      	movs	r0, #1
 80028ca:	fa00 f202 	lsl.w	r2, r0, r2
 80028ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	e000e100 	.word	0xe000e100

080028e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	4603      	mov	r3, r0
 80028e8:	6039      	str	r1, [r7, #0]
 80028ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	db0a      	blt.n	800290a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	b2da      	uxtb	r2, r3
 80028f8:	490c      	ldr	r1, [pc, #48]	; (800292c <__NVIC_SetPriority+0x4c>)
 80028fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fe:	0112      	lsls	r2, r2, #4
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	440b      	add	r3, r1
 8002904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002908:	e00a      	b.n	8002920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	b2da      	uxtb	r2, r3
 800290e:	4908      	ldr	r1, [pc, #32]	; (8002930 <__NVIC_SetPriority+0x50>)
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	3b04      	subs	r3, #4
 8002918:	0112      	lsls	r2, r2, #4
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	440b      	add	r3, r1
 800291e:	761a      	strb	r2, [r3, #24]
}
 8002920:	bf00      	nop
 8002922:	370c      	adds	r7, #12
 8002924:	46bd      	mov	sp, r7
 8002926:	bc80      	pop	{r7}
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	e000e100 	.word	0xe000e100
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	; 0x24
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f1c3 0307 	rsb	r3, r3, #7
 800294e:	2b04      	cmp	r3, #4
 8002950:	bf28      	it	cs
 8002952:	2304      	movcs	r3, #4
 8002954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3304      	adds	r3, #4
 800295a:	2b06      	cmp	r3, #6
 800295c:	d902      	bls.n	8002964 <NVIC_EncodePriority+0x30>
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	3b03      	subs	r3, #3
 8002962:	e000      	b.n	8002966 <NVIC_EncodePriority+0x32>
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	f04f 32ff 	mov.w	r2, #4294967295
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	fa02 f303 	lsl.w	r3, r2, r3
 8002972:	43da      	mvns	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	401a      	ands	r2, r3
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800297c:	f04f 31ff 	mov.w	r1, #4294967295
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	fa01 f303 	lsl.w	r3, r1, r3
 8002986:	43d9      	mvns	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800298c:	4313      	orrs	r3, r2
         );
}
 800298e:	4618      	mov	r0, r3
 8002990:	3724      	adds	r7, #36	; 0x24
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029a8:	d301      	bcc.n	80029ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029aa:	2301      	movs	r3, #1
 80029ac:	e00f      	b.n	80029ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ae:	4a0a      	ldr	r2, [pc, #40]	; (80029d8 <SysTick_Config+0x40>)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029b6:	210f      	movs	r1, #15
 80029b8:	f04f 30ff 	mov.w	r0, #4294967295
 80029bc:	f7ff ff90 	bl	80028e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029c0:	4b05      	ldr	r3, [pc, #20]	; (80029d8 <SysTick_Config+0x40>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029c6:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <SysTick_Config+0x40>)
 80029c8:	2207      	movs	r2, #7
 80029ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	e000e010 	.word	0xe000e010

080029dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ff2d 	bl	8002844 <__NVIC_SetPriorityGrouping>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	4603      	mov	r3, r0
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a04:	f7ff ff42 	bl	800288c <__NVIC_GetPriorityGrouping>
 8002a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	68b9      	ldr	r1, [r7, #8]
 8002a0e:	6978      	ldr	r0, [r7, #20]
 8002a10:	f7ff ff90 	bl	8002934 <NVIC_EncodePriority>
 8002a14:	4602      	mov	r2, r0
 8002a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff5f 	bl	80028e0 <__NVIC_SetPriority>
}
 8002a22:	bf00      	nop
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	4603      	mov	r3, r0
 8002a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff35 	bl	80028a8 <__NVIC_EnableIRQ>
}
 8002a3e:	bf00      	nop
 8002a40:	3708      	adds	r7, #8
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff ffa2 	bl	8002998 <SysTick_Config>
 8002a54:	4603      	mov	r3, r0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b08b      	sub	sp, #44	; 0x2c
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a72:	e169      	b.n	8002d48 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a74:	2201      	movs	r2, #1
 8002a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69fa      	ldr	r2, [r7, #28]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f040 8158 	bne.w	8002d42 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	4a9a      	ldr	r2, [pc, #616]	; (8002d00 <HAL_GPIO_Init+0x2a0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d05e      	beq.n	8002b5a <HAL_GPIO_Init+0xfa>
 8002a9c:	4a98      	ldr	r2, [pc, #608]	; (8002d00 <HAL_GPIO_Init+0x2a0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d875      	bhi.n	8002b8e <HAL_GPIO_Init+0x12e>
 8002aa2:	4a98      	ldr	r2, [pc, #608]	; (8002d04 <HAL_GPIO_Init+0x2a4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d058      	beq.n	8002b5a <HAL_GPIO_Init+0xfa>
 8002aa8:	4a96      	ldr	r2, [pc, #600]	; (8002d04 <HAL_GPIO_Init+0x2a4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d86f      	bhi.n	8002b8e <HAL_GPIO_Init+0x12e>
 8002aae:	4a96      	ldr	r2, [pc, #600]	; (8002d08 <HAL_GPIO_Init+0x2a8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d052      	beq.n	8002b5a <HAL_GPIO_Init+0xfa>
 8002ab4:	4a94      	ldr	r2, [pc, #592]	; (8002d08 <HAL_GPIO_Init+0x2a8>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d869      	bhi.n	8002b8e <HAL_GPIO_Init+0x12e>
 8002aba:	4a94      	ldr	r2, [pc, #592]	; (8002d0c <HAL_GPIO_Init+0x2ac>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d04c      	beq.n	8002b5a <HAL_GPIO_Init+0xfa>
 8002ac0:	4a92      	ldr	r2, [pc, #584]	; (8002d0c <HAL_GPIO_Init+0x2ac>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d863      	bhi.n	8002b8e <HAL_GPIO_Init+0x12e>
 8002ac6:	4a92      	ldr	r2, [pc, #584]	; (8002d10 <HAL_GPIO_Init+0x2b0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d046      	beq.n	8002b5a <HAL_GPIO_Init+0xfa>
 8002acc:	4a90      	ldr	r2, [pc, #576]	; (8002d10 <HAL_GPIO_Init+0x2b0>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d85d      	bhi.n	8002b8e <HAL_GPIO_Init+0x12e>
 8002ad2:	2b12      	cmp	r3, #18
 8002ad4:	d82a      	bhi.n	8002b2c <HAL_GPIO_Init+0xcc>
 8002ad6:	2b12      	cmp	r3, #18
 8002ad8:	d859      	bhi.n	8002b8e <HAL_GPIO_Init+0x12e>
 8002ada:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <HAL_GPIO_Init+0x80>)
 8002adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae0:	08002b5b 	.word	0x08002b5b
 8002ae4:	08002b35 	.word	0x08002b35
 8002ae8:	08002b47 	.word	0x08002b47
 8002aec:	08002b89 	.word	0x08002b89
 8002af0:	08002b8f 	.word	0x08002b8f
 8002af4:	08002b8f 	.word	0x08002b8f
 8002af8:	08002b8f 	.word	0x08002b8f
 8002afc:	08002b8f 	.word	0x08002b8f
 8002b00:	08002b8f 	.word	0x08002b8f
 8002b04:	08002b8f 	.word	0x08002b8f
 8002b08:	08002b8f 	.word	0x08002b8f
 8002b0c:	08002b8f 	.word	0x08002b8f
 8002b10:	08002b8f 	.word	0x08002b8f
 8002b14:	08002b8f 	.word	0x08002b8f
 8002b18:	08002b8f 	.word	0x08002b8f
 8002b1c:	08002b8f 	.word	0x08002b8f
 8002b20:	08002b8f 	.word	0x08002b8f
 8002b24:	08002b3d 	.word	0x08002b3d
 8002b28:	08002b51 	.word	0x08002b51
 8002b2c:	4a79      	ldr	r2, [pc, #484]	; (8002d14 <HAL_GPIO_Init+0x2b4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d013      	beq.n	8002b5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b32:	e02c      	b.n	8002b8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	623b      	str	r3, [r7, #32]
          break;
 8002b3a:	e029      	b.n	8002b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	3304      	adds	r3, #4
 8002b42:	623b      	str	r3, [r7, #32]
          break;
 8002b44:	e024      	b.n	8002b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	3308      	adds	r3, #8
 8002b4c:	623b      	str	r3, [r7, #32]
          break;
 8002b4e:	e01f      	b.n	8002b90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	330c      	adds	r3, #12
 8002b56:	623b      	str	r3, [r7, #32]
          break;
 8002b58:	e01a      	b.n	8002b90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d102      	bne.n	8002b68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002b62:	2304      	movs	r3, #4
 8002b64:	623b      	str	r3, [r7, #32]
          break;
 8002b66:	e013      	b.n	8002b90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d105      	bne.n	8002b7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b70:	2308      	movs	r3, #8
 8002b72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	611a      	str	r2, [r3, #16]
          break;
 8002b7a:	e009      	b.n	8002b90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69fa      	ldr	r2, [r7, #28]
 8002b84:	615a      	str	r2, [r3, #20]
          break;
 8002b86:	e003      	b.n	8002b90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	623b      	str	r3, [r7, #32]
          break;
 8002b8c:	e000      	b.n	8002b90 <HAL_GPIO_Init+0x130>
          break;
 8002b8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	2bff      	cmp	r3, #255	; 0xff
 8002b94:	d801      	bhi.n	8002b9a <HAL_GPIO_Init+0x13a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	e001      	b.n	8002b9e <HAL_GPIO_Init+0x13e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	2bff      	cmp	r3, #255	; 0xff
 8002ba4:	d802      	bhi.n	8002bac <HAL_GPIO_Init+0x14c>
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	e002      	b.n	8002bb2 <HAL_GPIO_Init+0x152>
 8002bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bae:	3b08      	subs	r3, #8
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	210f      	movs	r1, #15
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	6a39      	ldr	r1, [r7, #32]
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 80b1 	beq.w	8002d42 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002be0:	4b4d      	ldr	r3, [pc, #308]	; (8002d18 <HAL_GPIO_Init+0x2b8>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	4a4c      	ldr	r2, [pc, #304]	; (8002d18 <HAL_GPIO_Init+0x2b8>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6193      	str	r3, [r2, #24]
 8002bec:	4b4a      	ldr	r3, [pc, #296]	; (8002d18 <HAL_GPIO_Init+0x2b8>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002bf8:	4a48      	ldr	r2, [pc, #288]	; (8002d1c <HAL_GPIO_Init+0x2bc>)
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	089b      	lsrs	r3, r3, #2
 8002bfe:	3302      	adds	r3, #2
 8002c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	220f      	movs	r2, #15
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a40      	ldr	r2, [pc, #256]	; (8002d20 <HAL_GPIO_Init+0x2c0>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d013      	beq.n	8002c4c <HAL_GPIO_Init+0x1ec>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a3f      	ldr	r2, [pc, #252]	; (8002d24 <HAL_GPIO_Init+0x2c4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00d      	beq.n	8002c48 <HAL_GPIO_Init+0x1e8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a3e      	ldr	r2, [pc, #248]	; (8002d28 <HAL_GPIO_Init+0x2c8>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d007      	beq.n	8002c44 <HAL_GPIO_Init+0x1e4>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a3d      	ldr	r2, [pc, #244]	; (8002d2c <HAL_GPIO_Init+0x2cc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d101      	bne.n	8002c40 <HAL_GPIO_Init+0x1e0>
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e006      	b.n	8002c4e <HAL_GPIO_Init+0x1ee>
 8002c40:	2304      	movs	r3, #4
 8002c42:	e004      	b.n	8002c4e <HAL_GPIO_Init+0x1ee>
 8002c44:	2302      	movs	r3, #2
 8002c46:	e002      	b.n	8002c4e <HAL_GPIO_Init+0x1ee>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <HAL_GPIO_Init+0x1ee>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c50:	f002 0203 	and.w	r2, r2, #3
 8002c54:	0092      	lsls	r2, r2, #2
 8002c56:	4093      	lsls	r3, r2
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002c5e:	492f      	ldr	r1, [pc, #188]	; (8002d1c <HAL_GPIO_Init+0x2bc>)
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	3302      	adds	r3, #2
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d006      	beq.n	8002c86 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c78:	4b2d      	ldr	r3, [pc, #180]	; (8002d30 <HAL_GPIO_Init+0x2d0>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	492c      	ldr	r1, [pc, #176]	; (8002d30 <HAL_GPIO_Init+0x2d0>)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	600b      	str	r3, [r1, #0]
 8002c84:	e006      	b.n	8002c94 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c86:	4b2a      	ldr	r3, [pc, #168]	; (8002d30 <HAL_GPIO_Init+0x2d0>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	4928      	ldr	r1, [pc, #160]	; (8002d30 <HAL_GPIO_Init+0x2d0>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d006      	beq.n	8002cae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002ca0:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <HAL_GPIO_Init+0x2d0>)
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	4922      	ldr	r1, [pc, #136]	; (8002d30 <HAL_GPIO_Init+0x2d0>)
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	604b      	str	r3, [r1, #4]
 8002cac:	e006      	b.n	8002cbc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002cae:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <HAL_GPIO_Init+0x2d0>)
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	491e      	ldr	r1, [pc, #120]	; (8002d30 <HAL_GPIO_Init+0x2d0>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d006      	beq.n	8002cd6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002cc8:	4b19      	ldr	r3, [pc, #100]	; (8002d30 <HAL_GPIO_Init+0x2d0>)
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	4918      	ldr	r1, [pc, #96]	; (8002d30 <HAL_GPIO_Init+0x2d0>)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	608b      	str	r3, [r1, #8]
 8002cd4:	e006      	b.n	8002ce4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002cd6:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <HAL_GPIO_Init+0x2d0>)
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	4914      	ldr	r1, [pc, #80]	; (8002d30 <HAL_GPIO_Init+0x2d0>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d021      	beq.n	8002d34 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002cf0:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <HAL_GPIO_Init+0x2d0>)
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	490e      	ldr	r1, [pc, #56]	; (8002d30 <HAL_GPIO_Init+0x2d0>)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60cb      	str	r3, [r1, #12]
 8002cfc:	e021      	b.n	8002d42 <HAL_GPIO_Init+0x2e2>
 8002cfe:	bf00      	nop
 8002d00:	10320000 	.word	0x10320000
 8002d04:	10310000 	.word	0x10310000
 8002d08:	10220000 	.word	0x10220000
 8002d0c:	10210000 	.word	0x10210000
 8002d10:	10120000 	.word	0x10120000
 8002d14:	10110000 	.word	0x10110000
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	40010800 	.word	0x40010800
 8002d24:	40010c00 	.word	0x40010c00
 8002d28:	40011000 	.word	0x40011000
 8002d2c:	40011400 	.word	0x40011400
 8002d30:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	4909      	ldr	r1, [pc, #36]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	3301      	adds	r3, #1
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f47f ae8e 	bne.w	8002a74 <HAL_GPIO_Init+0x14>
  }
}
 8002d58:	bf00      	nop
 8002d5a:	bf00      	nop
 8002d5c:	372c      	adds	r7, #44	; 0x2c
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr
 8002d64:	40010400 	.word	0x40010400

08002d68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689a      	ldr	r2, [r3, #8]
 8002d78:	887b      	ldrh	r3, [r7, #2]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
 8002d84:	e001      	b.n	8002d8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr

08002d96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	807b      	strh	r3, [r7, #2]
 8002da2:	4613      	mov	r3, r2
 8002da4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002da6:	787b      	ldrb	r3, [r7, #1]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dac:	887a      	ldrh	r2, [r7, #2]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002db2:	e003      	b.n	8002dbc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002db4:	887b      	ldrh	r3, [r7, #2]
 8002db6:	041a      	lsls	r2, r3, #16
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	611a      	str	r2, [r3, #16]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b085      	sub	sp, #20
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dd8:	887a      	ldrh	r2, [r7, #2]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	041a      	lsls	r2, r3, #16
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	43d9      	mvns	r1, r3
 8002de4:	887b      	ldrh	r3, [r7, #2]
 8002de6:	400b      	ands	r3, r1
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	611a      	str	r2, [r3, #16]
}
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e0e:	4a05      	ldr	r2, [pc, #20]	; (8002e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe fdb6 	bl	8001988 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40010400 	.word	0x40010400

08002e28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e12b      	b.n	8003092 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff fa90 	bl	8002374 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2224      	movs	r2, #36	; 0x24
 8002e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 0201 	bic.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e8c:	f001 fd20 	bl	80048d0 <HAL_RCC_GetPCLK1Freq>
 8002e90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4a81      	ldr	r2, [pc, #516]	; (800309c <HAL_I2C_Init+0x274>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d807      	bhi.n	8002eac <HAL_I2C_Init+0x84>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4a80      	ldr	r2, [pc, #512]	; (80030a0 <HAL_I2C_Init+0x278>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	bf94      	ite	ls
 8002ea4:	2301      	movls	r3, #1
 8002ea6:	2300      	movhi	r3, #0
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	e006      	b.n	8002eba <HAL_I2C_Init+0x92>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4a7d      	ldr	r2, [pc, #500]	; (80030a4 <HAL_I2C_Init+0x27c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	bf94      	ite	ls
 8002eb4:	2301      	movls	r3, #1
 8002eb6:	2300      	movhi	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e0e7      	b.n	8003092 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4a78      	ldr	r2, [pc, #480]	; (80030a8 <HAL_I2C_Init+0x280>)
 8002ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eca:	0c9b      	lsrs	r3, r3, #18
 8002ecc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	4a6a      	ldr	r2, [pc, #424]	; (800309c <HAL_I2C_Init+0x274>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d802      	bhi.n	8002efc <HAL_I2C_Init+0xd4>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	e009      	b.n	8002f10 <HAL_I2C_Init+0xe8>
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	4a69      	ldr	r2, [pc, #420]	; (80030ac <HAL_I2C_Init+0x284>)
 8002f08:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0c:	099b      	lsrs	r3, r3, #6
 8002f0e:	3301      	adds	r3, #1
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	430b      	orrs	r3, r1
 8002f16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	495c      	ldr	r1, [pc, #368]	; (800309c <HAL_I2C_Init+0x274>)
 8002f2c:	428b      	cmp	r3, r1
 8002f2e:	d819      	bhi.n	8002f64 <HAL_I2C_Init+0x13c>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	1e59      	subs	r1, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f3e:	1c59      	adds	r1, r3, #1
 8002f40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f44:	400b      	ands	r3, r1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <HAL_I2C_Init+0x138>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1e59      	subs	r1, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f58:	3301      	adds	r3, #1
 8002f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5e:	e051      	b.n	8003004 <HAL_I2C_Init+0x1dc>
 8002f60:	2304      	movs	r3, #4
 8002f62:	e04f      	b.n	8003004 <HAL_I2C_Init+0x1dc>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d111      	bne.n	8002f90 <HAL_I2C_Init+0x168>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1e58      	subs	r0, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6859      	ldr	r1, [r3, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	440b      	add	r3, r1
 8002f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7e:	3301      	adds	r3, #1
 8002f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	e012      	b.n	8002fb6 <HAL_I2C_Init+0x18e>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	1e58      	subs	r0, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6859      	ldr	r1, [r3, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	0099      	lsls	r1, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf0c      	ite	eq
 8002fb0:	2301      	moveq	r3, #1
 8002fb2:	2300      	movne	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_I2C_Init+0x196>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e022      	b.n	8003004 <HAL_I2C_Init+0x1dc>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10e      	bne.n	8002fe4 <HAL_I2C_Init+0x1bc>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1e58      	subs	r0, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6859      	ldr	r1, [r3, #4]
 8002fce:	460b      	mov	r3, r1
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	440b      	add	r3, r1
 8002fd4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd8:	3301      	adds	r3, #1
 8002fda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe2:	e00f      	b.n	8003004 <HAL_I2C_Init+0x1dc>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1e58      	subs	r0, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	0099      	lsls	r1, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003000:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	6809      	ldr	r1, [r1, #0]
 8003008:	4313      	orrs	r3, r2
 800300a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69da      	ldr	r2, [r3, #28]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003032:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6911      	ldr	r1, [r2, #16]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	68d2      	ldr	r2, [r2, #12]
 800303e:	4311      	orrs	r1, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	430b      	orrs	r3, r1
 8003046:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2220      	movs	r2, #32
 800307e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	000186a0 	.word	0x000186a0
 80030a0:	001e847f 	.word	0x001e847f
 80030a4:	003d08ff 	.word	0x003d08ff
 80030a8:	431bde83 	.word	0x431bde83
 80030ac:	10624dd3 	.word	0x10624dd3

080030b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	461a      	mov	r2, r3
 80030bc:	460b      	mov	r3, r1
 80030be:	817b      	strh	r3, [r7, #10]
 80030c0:	4613      	mov	r3, r2
 80030c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030c4:	f7ff fb90 	bl	80027e8 <HAL_GetTick>
 80030c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	f040 80e0 	bne.w	8003298 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	2319      	movs	r3, #25
 80030de:	2201      	movs	r2, #1
 80030e0:	4970      	ldr	r1, [pc, #448]	; (80032a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80030e2:	68f8      	ldr	r0, [r7, #12]
 80030e4:	f000 fe44 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030ee:	2302      	movs	r3, #2
 80030f0:	e0d3      	b.n	800329a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_I2C_Master_Transmit+0x50>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e0cc      	b.n	800329a <HAL_I2C_Master_Transmit+0x1ea>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b01      	cmp	r3, #1
 8003114:	d007      	beq.n	8003126 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f042 0201 	orr.w	r2, r2, #1
 8003124:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003134:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2221      	movs	r2, #33	; 0x21
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2210      	movs	r2, #16
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	893a      	ldrh	r2, [r7, #8]
 8003156:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315c:	b29a      	uxth	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4a50      	ldr	r2, [pc, #320]	; (80032a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003168:	8979      	ldrh	r1, [r7, #10]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	6a3a      	ldr	r2, [r7, #32]
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 fbfe 	bl	8003970 <I2C_MasterRequestWrite>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e08d      	b.n	800329a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003194:	e066      	b.n	8003264 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	6a39      	ldr	r1, [r7, #32]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 febe 	bl	8003f1c <I2C_WaitOnTXEFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00d      	beq.n	80031c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d107      	bne.n	80031be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e06b      	b.n	800329a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	781a      	ldrb	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	1c5a      	adds	r2, r3, #1
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031dc:	b29b      	uxth	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ea:	3b01      	subs	r3, #1
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b04      	cmp	r3, #4
 80031fe:	d11b      	bne.n	8003238 <HAL_I2C_Master_Transmit+0x188>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003204:	2b00      	cmp	r3, #0
 8003206:	d017      	beq.n	8003238 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	781a      	ldrb	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003230:	3b01      	subs	r3, #1
 8003232:	b29a      	uxth	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	6a39      	ldr	r1, [r7, #32]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 feae 	bl	8003f9e <I2C_WaitOnBTFFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00d      	beq.n	8003264 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	2b04      	cmp	r3, #4
 800324e:	d107      	bne.n	8003260 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e01a      	b.n	800329a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003268:	2b00      	cmp	r3, #0
 800326a:	d194      	bne.n	8003196 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	e000      	b.n	800329a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003298:	2302      	movs	r3, #2
  }
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	00100002 	.word	0x00100002
 80032a8:	ffff0000 	.word	0xffff0000

080032ac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b088      	sub	sp, #32
 80032b0:	af02      	add	r7, sp, #8
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	4608      	mov	r0, r1
 80032b6:	4611      	mov	r1, r2
 80032b8:	461a      	mov	r2, r3
 80032ba:	4603      	mov	r3, r0
 80032bc:	817b      	strh	r3, [r7, #10]
 80032be:	460b      	mov	r3, r1
 80032c0:	813b      	strh	r3, [r7, #8]
 80032c2:	4613      	mov	r3, r2
 80032c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032c6:	f7ff fa8f 	bl	80027e8 <HAL_GetTick>
 80032ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	f040 80d9 	bne.w	800348c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	2319      	movs	r3, #25
 80032e0:	2201      	movs	r2, #1
 80032e2:	496d      	ldr	r1, [pc, #436]	; (8003498 <HAL_I2C_Mem_Write+0x1ec>)
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fd43 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80032f0:	2302      	movs	r3, #2
 80032f2:	e0cc      	b.n	800348e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d101      	bne.n	8003302 <HAL_I2C_Mem_Write+0x56>
 80032fe:	2302      	movs	r3, #2
 8003300:	e0c5      	b.n	800348e <HAL_I2C_Mem_Write+0x1e2>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b01      	cmp	r3, #1
 8003316:	d007      	beq.n	8003328 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003336:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2221      	movs	r2, #33	; 0x21
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2240      	movs	r2, #64	; 0x40
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a3a      	ldr	r2, [r7, #32]
 8003352:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003358:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4a4d      	ldr	r2, [pc, #308]	; (800349c <HAL_I2C_Mem_Write+0x1f0>)
 8003368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800336a:	88f8      	ldrh	r0, [r7, #6]
 800336c:	893a      	ldrh	r2, [r7, #8]
 800336e:	8979      	ldrh	r1, [r7, #10]
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	4603      	mov	r3, r0
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 fb7a 	bl	8003a74 <I2C_RequestMemoryWrite>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d052      	beq.n	800342c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e081      	b.n	800348e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 fdc4 	bl	8003f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00d      	beq.n	80033b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d107      	bne.n	80033b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e06b      	b.n	800348e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	781a      	ldrb	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	3b01      	subs	r3, #1
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	2b04      	cmp	r3, #4
 80033f2:	d11b      	bne.n	800342c <HAL_I2C_Mem_Write+0x180>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d017      	beq.n	800342c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	781a      	ldrb	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	1c5a      	adds	r2, r3, #1
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1aa      	bne.n	800338a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 fdb0 	bl	8003f9e <I2C_WaitOnBTFFlagUntilTimeout>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00d      	beq.n	8003460 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	2b04      	cmp	r3, #4
 800344a:	d107      	bne.n	800345c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e016      	b.n	800348e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003488:	2300      	movs	r3, #0
 800348a:	e000      	b.n	800348e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800348c:	2302      	movs	r3, #2
  }
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	00100002 	.word	0x00100002
 800349c:	ffff0000 	.word	0xffff0000

080034a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08c      	sub	sp, #48	; 0x30
 80034a4:	af02      	add	r7, sp, #8
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	4608      	mov	r0, r1
 80034aa:	4611      	mov	r1, r2
 80034ac:	461a      	mov	r2, r3
 80034ae:	4603      	mov	r3, r0
 80034b0:	817b      	strh	r3, [r7, #10]
 80034b2:	460b      	mov	r3, r1
 80034b4:	813b      	strh	r3, [r7, #8]
 80034b6:	4613      	mov	r3, r2
 80034b8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034be:	f7ff f993 	bl	80027e8 <HAL_GetTick>
 80034c2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	f040 8244 	bne.w	800395a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	2319      	movs	r3, #25
 80034d8:	2201      	movs	r2, #1
 80034da:	4982      	ldr	r1, [pc, #520]	; (80036e4 <HAL_I2C_Mem_Read+0x244>)
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 fc47 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80034e8:	2302      	movs	r3, #2
 80034ea:	e237      	b.n	800395c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d101      	bne.n	80034fa <HAL_I2C_Mem_Read+0x5a>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e230      	b.n	800395c <HAL_I2C_Mem_Read+0x4bc>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b01      	cmp	r3, #1
 800350e:	d007      	beq.n	8003520 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800352e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2222      	movs	r2, #34	; 0x22
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2240      	movs	r2, #64	; 0x40
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800354a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003550:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003556:	b29a      	uxth	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4a62      	ldr	r2, [pc, #392]	; (80036e8 <HAL_I2C_Mem_Read+0x248>)
 8003560:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003562:	88f8      	ldrh	r0, [r7, #6]
 8003564:	893a      	ldrh	r2, [r7, #8]
 8003566:	8979      	ldrh	r1, [r7, #10]
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	9301      	str	r3, [sp, #4]
 800356c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	4603      	mov	r3, r0
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 fb14 	bl	8003ba0 <I2C_RequestMemoryRead>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e1ec      	b.n	800395c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003586:	2b00      	cmp	r3, #0
 8003588:	d113      	bne.n	80035b2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	e1c0      	b.n	8003934 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d11e      	bne.n	80035f8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035ca:	b672      	cpsid	i
}
 80035cc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ce:	2300      	movs	r3, #0
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035f4:	b662      	cpsie	i
}
 80035f6:	e035      	b.n	8003664 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d11e      	bne.n	800363e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800360e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003610:	b672      	cpsid	i
}
 8003612:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003638:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800363a:	b662      	cpsie	i
}
 800363c:	e012      	b.n	8003664 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800364c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364e:	2300      	movs	r3, #0
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	613b      	str	r3, [r7, #16]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003664:	e166      	b.n	8003934 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366a:	2b03      	cmp	r3, #3
 800366c:	f200 811f 	bhi.w	80038ae <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003674:	2b01      	cmp	r3, #1
 8003676:	d123      	bne.n	80036c0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 fccf 	bl	8004020 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e167      	b.n	800395c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691a      	ldr	r2, [r3, #16]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	b2d2      	uxtb	r2, r2
 8003698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	1c5a      	adds	r2, r3, #1
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	3b01      	subs	r3, #1
 80036b8:	b29a      	uxth	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036be:	e139      	b.n	8003934 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d152      	bne.n	800376e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	2200      	movs	r2, #0
 80036d0:	4906      	ldr	r1, [pc, #24]	; (80036ec <HAL_I2C_Mem_Read+0x24c>)
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 fb4c 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e13c      	b.n	800395c <HAL_I2C_Mem_Read+0x4bc>
 80036e2:	bf00      	nop
 80036e4:	00100002 	.word	0x00100002
 80036e8:	ffff0000 	.word	0xffff0000
 80036ec:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80036f0:	b672      	cpsid	i
}
 80036f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003702:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003720:	3b01      	subs	r3, #1
 8003722:	b29a      	uxth	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003736:	b662      	cpsie	i
}
 8003738:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	1c5a      	adds	r2, r3, #1
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003762:	b29b      	uxth	r3, r3
 8003764:	3b01      	subs	r3, #1
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800376c:	e0e2      	b.n	8003934 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003774:	2200      	movs	r2, #0
 8003776:	497b      	ldr	r1, [pc, #492]	; (8003964 <HAL_I2C_Mem_Read+0x4c4>)
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 faf9 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e0e9      	b.n	800395c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003796:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003798:	b672      	cpsid	i
}
 800379a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	3b01      	subs	r3, #1
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80037ce:	4b66      	ldr	r3, [pc, #408]	; (8003968 <HAL_I2C_Mem_Read+0x4c8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	08db      	lsrs	r3, r3, #3
 80037d4:	4a65      	ldr	r2, [pc, #404]	; (800396c <HAL_I2C_Mem_Read+0x4cc>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	0a1a      	lsrs	r2, r3, #8
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	00da      	lsls	r2, r3, #3
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80037e8:	6a3b      	ldr	r3, [r7, #32]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d118      	bne.n	8003826 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f043 0220 	orr.w	r2, r3, #32
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003816:	b662      	cpsie	i
}
 8003818:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e09a      	b.n	800395c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b04      	cmp	r3, #4
 8003832:	d1d9      	bne.n	80037e8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003842:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	b2d2      	uxtb	r2, r2
 8003850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003876:	b662      	cpsie	i
}
 8003878:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038ac:	e042      	b.n	8003934 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fbb4 	bl	8004020 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e04c      	b.n	800395c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691a      	ldr	r2, [r3, #16]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b04      	cmp	r3, #4
 8003900:	d118      	bne.n	8003934 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392a:	b29b      	uxth	r3, r3
 800392c:	3b01      	subs	r3, #1
 800392e:	b29a      	uxth	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003938:	2b00      	cmp	r3, #0
 800393a:	f47f ae94 	bne.w	8003666 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	e000      	b.n	800395c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800395a:	2302      	movs	r3, #2
  }
}
 800395c:	4618      	mov	r0, r3
 800395e:	3728      	adds	r7, #40	; 0x28
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	00010004 	.word	0x00010004
 8003968:	20000018 	.word	0x20000018
 800396c:	14f8b589 	.word	0x14f8b589

08003970 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	460b      	mov	r3, r1
 800397e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003984:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d006      	beq.n	800399a <I2C_MasterRequestWrite+0x2a>
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d003      	beq.n	800399a <I2C_MasterRequestWrite+0x2a>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003998:	d108      	bne.n	80039ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	e00b      	b.n	80039c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	2b12      	cmp	r3, #18
 80039b2:	d107      	bne.n	80039c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f9cd 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00d      	beq.n	80039f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ea:	d103      	bne.n	80039f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e035      	b.n	8003a64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	691b      	ldr	r3, [r3, #16]
 80039fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a00:	d108      	bne.n	8003a14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a02:	897b      	ldrh	r3, [r7, #10]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	461a      	mov	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a10:	611a      	str	r2, [r3, #16]
 8003a12:	e01b      	b.n	8003a4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a14:	897b      	ldrh	r3, [r7, #10]
 8003a16:	11db      	asrs	r3, r3, #7
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f003 0306 	and.w	r3, r3, #6
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	f063 030f 	orn	r3, r3, #15
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	490e      	ldr	r1, [pc, #56]	; (8003a6c <I2C_MasterRequestWrite+0xfc>)
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 f9f3 	bl	8003e1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e010      	b.n	8003a64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a42:	897b      	ldrh	r3, [r7, #10]
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	4907      	ldr	r1, [pc, #28]	; (8003a70 <I2C_MasterRequestWrite+0x100>)
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 f9e3 	bl	8003e1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	00010008 	.word	0x00010008
 8003a70:	00010002 	.word	0x00010002

08003a74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b088      	sub	sp, #32
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	4608      	mov	r0, r1
 8003a7e:	4611      	mov	r1, r2
 8003a80:	461a      	mov	r2, r3
 8003a82:	4603      	mov	r3, r0
 8003a84:	817b      	strh	r3, [r7, #10]
 8003a86:	460b      	mov	r3, r1
 8003a88:	813b      	strh	r3, [r7, #8]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f960 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00d      	beq.n	8003ad2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ac4:	d103      	bne.n	8003ace <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e05f      	b.n	8003b92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ad2:	897b      	ldrh	r3, [r7, #10]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ae0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae4:	6a3a      	ldr	r2, [r7, #32]
 8003ae6:	492d      	ldr	r1, [pc, #180]	; (8003b9c <I2C_RequestMemoryWrite+0x128>)
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f998 	bl	8003e1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e04c      	b.n	8003b92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b10:	6a39      	ldr	r1, [r7, #32]
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 fa02 	bl	8003f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00d      	beq.n	8003b3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d107      	bne.n	8003b36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e02b      	b.n	8003b92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d105      	bne.n	8003b4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b40:	893b      	ldrh	r3, [r7, #8]
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	611a      	str	r2, [r3, #16]
 8003b4a:	e021      	b.n	8003b90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b4c:	893b      	ldrh	r3, [r7, #8]
 8003b4e:	0a1b      	lsrs	r3, r3, #8
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5c:	6a39      	ldr	r1, [r7, #32]
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f9dc 	bl	8003f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00d      	beq.n	8003b86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d107      	bne.n	8003b82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e005      	b.n	8003b92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b86:	893b      	ldrh	r3, [r7, #8]
 8003b88:	b2da      	uxtb	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	00010002 	.word	0x00010002

08003ba0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af02      	add	r7, sp, #8
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	4608      	mov	r0, r1
 8003baa:	4611      	mov	r1, r2
 8003bac:	461a      	mov	r2, r3
 8003bae:	4603      	mov	r3, r0
 8003bb0:	817b      	strh	r3, [r7, #10]
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	813b      	strh	r3, [r7, #8]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bc8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	9300      	str	r3, [sp, #0]
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f000 f8c2 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00d      	beq.n	8003c0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c00:	d103      	bne.n	8003c0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e0aa      	b.n	8003d64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c0e:	897b      	ldrh	r3, [r7, #10]
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	461a      	mov	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	6a3a      	ldr	r2, [r7, #32]
 8003c22:	4952      	ldr	r1, [pc, #328]	; (8003d6c <I2C_RequestMemoryRead+0x1cc>)
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f8fa 	bl	8003e1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e097      	b.n	8003d64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4c:	6a39      	ldr	r1, [r7, #32]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f964 	bl	8003f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00d      	beq.n	8003c76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d107      	bne.n	8003c72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e076      	b.n	8003d64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c76:	88fb      	ldrh	r3, [r7, #6]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d105      	bne.n	8003c88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c7c:	893b      	ldrh	r3, [r7, #8]
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	611a      	str	r2, [r3, #16]
 8003c86:	e021      	b.n	8003ccc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c88:	893b      	ldrh	r3, [r7, #8]
 8003c8a:	0a1b      	lsrs	r3, r3, #8
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c98:	6a39      	ldr	r1, [r7, #32]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 f93e 	bl	8003f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00d      	beq.n	8003cc2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d107      	bne.n	8003cbe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e050      	b.n	8003d64 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc2:	893b      	ldrh	r3, [r7, #8]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cce:	6a39      	ldr	r1, [r7, #32]
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f923 	bl	8003f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00d      	beq.n	8003cf8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d107      	bne.n	8003cf4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e035      	b.n	8003d64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d06:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f82b 	bl	8003d70 <I2C_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00d      	beq.n	8003d3c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2e:	d103      	bne.n	8003d38 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e013      	b.n	8003d64 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d3c:	897b      	ldrh	r3, [r7, #10]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4e:	6a3a      	ldr	r2, [r7, #32]
 8003d50:	4906      	ldr	r1, [pc, #24]	; (8003d6c <I2C_RequestMemoryRead+0x1cc>)
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 f863 	bl	8003e1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e000      	b.n	8003d64 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	00010002 	.word	0x00010002

08003d70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d80:	e025      	b.n	8003dce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d88:	d021      	beq.n	8003dce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d8a:	f7fe fd2d 	bl	80027e8 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d302      	bcc.n	8003da0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d116      	bne.n	8003dce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f043 0220 	orr.w	r2, r3, #32
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e023      	b.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	0c1b      	lsrs	r3, r3, #16
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d10d      	bne.n	8003df4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	43da      	mvns	r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4013      	ands	r3, r2
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	bf0c      	ite	eq
 8003dea:	2301      	moveq	r3, #1
 8003dec:	2300      	movne	r3, #0
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	461a      	mov	r2, r3
 8003df2:	e00c      	b.n	8003e0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	43da      	mvns	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	bf0c      	ite	eq
 8003e06:	2301      	moveq	r3, #1
 8003e08:	2300      	movne	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d0b6      	beq.n	8003d82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
 8003e2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e2c:	e051      	b.n	8003ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e3c:	d123      	bne.n	8003e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f043 0204 	orr.w	r2, r3, #4
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e046      	b.n	8003f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d021      	beq.n	8003ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8e:	f7fe fcab 	bl	80027e8 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d302      	bcc.n	8003ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d116      	bne.n	8003ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f043 0220 	orr.w	r2, r3, #32
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e020      	b.n	8003f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d10c      	bne.n	8003ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	43da      	mvns	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bf14      	ite	ne
 8003eee:	2301      	movne	r3, #1
 8003ef0:	2300      	moveq	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	e00b      	b.n	8003f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	43da      	mvns	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	4013      	ands	r3, r2
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf14      	ite	ne
 8003f08:	2301      	movne	r3, #1
 8003f0a:	2300      	moveq	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d18d      	bne.n	8003e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f28:	e02d      	b.n	8003f86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f8ce 	bl	80040cc <I2C_IsAcknowledgeFailed>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e02d      	b.n	8003f96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f40:	d021      	beq.n	8003f86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f42:	f7fe fc51 	bl	80027e8 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d302      	bcc.n	8003f58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d116      	bne.n	8003f86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f043 0220 	orr.w	r2, r3, #32
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e007      	b.n	8003f96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f90:	2b80      	cmp	r3, #128	; 0x80
 8003f92:	d1ca      	bne.n	8003f2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b084      	sub	sp, #16
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003faa:	e02d      	b.n	8004008 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f88d 	bl	80040cc <I2C_IsAcknowledgeFailed>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d001      	beq.n	8003fbc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e02d      	b.n	8004018 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc2:	d021      	beq.n	8004008 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc4:	f7fe fc10 	bl	80027e8 <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d302      	bcc.n	8003fda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d116      	bne.n	8004008 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	f043 0220 	orr.w	r2, r3, #32
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e007      	b.n	8004018 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b04      	cmp	r3, #4
 8004014:	d1ca      	bne.n	8003fac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800402c:	e042      	b.n	80040b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b10      	cmp	r3, #16
 800403a:	d119      	bne.n	8004070 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0210 	mvn.w	r2, #16
 8004044:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2220      	movs	r2, #32
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e029      	b.n	80040c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004070:	f7fe fbba 	bl	80027e8 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	429a      	cmp	r2, r3
 800407e:	d302      	bcc.n	8004086 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d116      	bne.n	80040b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	f043 0220 	orr.w	r2, r3, #32
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e007      	b.n	80040c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040be:	2b40      	cmp	r3, #64	; 0x40
 80040c0:	d1b5      	bne.n	800402e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	695b      	ldr	r3, [r3, #20]
 80040da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e2:	d11b      	bne.n	800411c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004108:	f043 0204 	orr.w	r2, r3, #4
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e000      	b.n	800411e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr

08004128 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e272      	b.n	8004620 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 8087 	beq.w	8004256 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004148:	4b92      	ldr	r3, [pc, #584]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 030c 	and.w	r3, r3, #12
 8004150:	2b04      	cmp	r3, #4
 8004152:	d00c      	beq.n	800416e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004154:	4b8f      	ldr	r3, [pc, #572]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 030c 	and.w	r3, r3, #12
 800415c:	2b08      	cmp	r3, #8
 800415e:	d112      	bne.n	8004186 <HAL_RCC_OscConfig+0x5e>
 8004160:	4b8c      	ldr	r3, [pc, #560]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416c:	d10b      	bne.n	8004186 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800416e:	4b89      	ldr	r3, [pc, #548]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d06c      	beq.n	8004254 <HAL_RCC_OscConfig+0x12c>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d168      	bne.n	8004254 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e24c      	b.n	8004620 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800418e:	d106      	bne.n	800419e <HAL_RCC_OscConfig+0x76>
 8004190:	4b80      	ldr	r3, [pc, #512]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a7f      	ldr	r2, [pc, #508]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 8004196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	e02e      	b.n	80041fc <HAL_RCC_OscConfig+0xd4>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10c      	bne.n	80041c0 <HAL_RCC_OscConfig+0x98>
 80041a6:	4b7b      	ldr	r3, [pc, #492]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a7a      	ldr	r2, [pc, #488]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 80041ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	4b78      	ldr	r3, [pc, #480]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a77      	ldr	r2, [pc, #476]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 80041b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	e01d      	b.n	80041fc <HAL_RCC_OscConfig+0xd4>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c8:	d10c      	bne.n	80041e4 <HAL_RCC_OscConfig+0xbc>
 80041ca:	4b72      	ldr	r3, [pc, #456]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a71      	ldr	r2, [pc, #452]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 80041d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	4b6f      	ldr	r3, [pc, #444]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a6e      	ldr	r2, [pc, #440]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 80041dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	e00b      	b.n	80041fc <HAL_RCC_OscConfig+0xd4>
 80041e4:	4b6b      	ldr	r3, [pc, #428]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a6a      	ldr	r2, [pc, #424]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 80041ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	4b68      	ldr	r3, [pc, #416]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a67      	ldr	r2, [pc, #412]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 80041f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d013      	beq.n	800422c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004204:	f7fe faf0 	bl	80027e8 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800420c:	f7fe faec 	bl	80027e8 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	; 0x64
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e200      	b.n	8004620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800421e:	4b5d      	ldr	r3, [pc, #372]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d0f0      	beq.n	800420c <HAL_RCC_OscConfig+0xe4>
 800422a:	e014      	b.n	8004256 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422c:	f7fe fadc 	bl	80027e8 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004234:	f7fe fad8 	bl	80027e8 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b64      	cmp	r3, #100	; 0x64
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e1ec      	b.n	8004620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004246:	4b53      	ldr	r3, [pc, #332]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x10c>
 8004252:	e000      	b.n	8004256 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004254:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d063      	beq.n	800432a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004262:	4b4c      	ldr	r3, [pc, #304]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00b      	beq.n	8004286 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800426e:	4b49      	ldr	r3, [pc, #292]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 030c 	and.w	r3, r3, #12
 8004276:	2b08      	cmp	r3, #8
 8004278:	d11c      	bne.n	80042b4 <HAL_RCC_OscConfig+0x18c>
 800427a:	4b46      	ldr	r3, [pc, #280]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d116      	bne.n	80042b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004286:	4b43      	ldr	r3, [pc, #268]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <HAL_RCC_OscConfig+0x176>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d001      	beq.n	800429e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e1c0      	b.n	8004620 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429e:	4b3d      	ldr	r3, [pc, #244]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4939      	ldr	r1, [pc, #228]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042b2:	e03a      	b.n	800432a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d020      	beq.n	80042fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042bc:	4b36      	ldr	r3, [pc, #216]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 80042be:	2201      	movs	r2, #1
 80042c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c2:	f7fe fa91 	bl	80027e8 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042ca:	f7fe fa8d 	bl	80027e8 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e1a1      	b.n	8004620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042dc:	4b2d      	ldr	r3, [pc, #180]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e8:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	4927      	ldr	r1, [pc, #156]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	600b      	str	r3, [r1, #0]
 80042fc:	e015      	b.n	800432a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042fe:	4b26      	ldr	r3, [pc, #152]	; (8004398 <HAL_RCC_OscConfig+0x270>)
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004304:	f7fe fa70 	bl	80027e8 <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800430c:	f7fe fa6c 	bl	80027e8 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e180      	b.n	8004620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800431e:	4b1d      	ldr	r3, [pc, #116]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d03a      	beq.n	80043ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d019      	beq.n	8004372 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800433e:	4b17      	ldr	r3, [pc, #92]	; (800439c <HAL_RCC_OscConfig+0x274>)
 8004340:	2201      	movs	r2, #1
 8004342:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004344:	f7fe fa50 	bl	80027e8 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800434a:	e008      	b.n	800435e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800434c:	f7fe fa4c 	bl	80027e8 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	2b02      	cmp	r3, #2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e160      	b.n	8004620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800435e:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <HAL_RCC_OscConfig+0x26c>)
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0f0      	beq.n	800434c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800436a:	2001      	movs	r0, #1
 800436c:	f000 fac4 	bl	80048f8 <RCC_Delay>
 8004370:	e01c      	b.n	80043ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004372:	4b0a      	ldr	r3, [pc, #40]	; (800439c <HAL_RCC_OscConfig+0x274>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004378:	f7fe fa36 	bl	80027e8 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800437e:	e00f      	b.n	80043a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004380:	f7fe fa32 	bl	80027e8 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d908      	bls.n	80043a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e146      	b.n	8004620 <HAL_RCC_OscConfig+0x4f8>
 8004392:	bf00      	nop
 8004394:	40021000 	.word	0x40021000
 8004398:	42420000 	.word	0x42420000
 800439c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a0:	4b92      	ldr	r3, [pc, #584]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	f003 0302 	and.w	r3, r3, #2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e9      	bne.n	8004380 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 80a6 	beq.w	8004506 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ba:	2300      	movs	r3, #0
 80043bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043be:	4b8b      	ldr	r3, [pc, #556]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10d      	bne.n	80043e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ca:	4b88      	ldr	r3, [pc, #544]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	4a87      	ldr	r2, [pc, #540]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 80043d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d4:	61d3      	str	r3, [r2, #28]
 80043d6:	4b85      	ldr	r3, [pc, #532]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043de:	60bb      	str	r3, [r7, #8]
 80043e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043e2:	2301      	movs	r3, #1
 80043e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e6:	4b82      	ldr	r3, [pc, #520]	; (80045f0 <HAL_RCC_OscConfig+0x4c8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d118      	bne.n	8004424 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043f2:	4b7f      	ldr	r3, [pc, #508]	; (80045f0 <HAL_RCC_OscConfig+0x4c8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a7e      	ldr	r2, [pc, #504]	; (80045f0 <HAL_RCC_OscConfig+0x4c8>)
 80043f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043fe:	f7fe f9f3 	bl	80027e8 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004406:	f7fe f9ef 	bl	80027e8 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b64      	cmp	r3, #100	; 0x64
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e103      	b.n	8004620 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004418:	4b75      	ldr	r3, [pc, #468]	; (80045f0 <HAL_RCC_OscConfig+0x4c8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d106      	bne.n	800443a <HAL_RCC_OscConfig+0x312>
 800442c:	4b6f      	ldr	r3, [pc, #444]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	4a6e      	ldr	r2, [pc, #440]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	6213      	str	r3, [r2, #32]
 8004438:	e02d      	b.n	8004496 <HAL_RCC_OscConfig+0x36e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10c      	bne.n	800445c <HAL_RCC_OscConfig+0x334>
 8004442:	4b6a      	ldr	r3, [pc, #424]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	4a69      	ldr	r2, [pc, #420]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 8004448:	f023 0301 	bic.w	r3, r3, #1
 800444c:	6213      	str	r3, [r2, #32]
 800444e:	4b67      	ldr	r3, [pc, #412]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	4a66      	ldr	r2, [pc, #408]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 8004454:	f023 0304 	bic.w	r3, r3, #4
 8004458:	6213      	str	r3, [r2, #32]
 800445a:	e01c      	b.n	8004496 <HAL_RCC_OscConfig+0x36e>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	2b05      	cmp	r3, #5
 8004462:	d10c      	bne.n	800447e <HAL_RCC_OscConfig+0x356>
 8004464:	4b61      	ldr	r3, [pc, #388]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	4a60      	ldr	r2, [pc, #384]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 800446a:	f043 0304 	orr.w	r3, r3, #4
 800446e:	6213      	str	r3, [r2, #32]
 8004470:	4b5e      	ldr	r3, [pc, #376]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	4a5d      	ldr	r2, [pc, #372]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	6213      	str	r3, [r2, #32]
 800447c:	e00b      	b.n	8004496 <HAL_RCC_OscConfig+0x36e>
 800447e:	4b5b      	ldr	r3, [pc, #364]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	4a5a      	ldr	r2, [pc, #360]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	6213      	str	r3, [r2, #32]
 800448a:	4b58      	ldr	r3, [pc, #352]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	4a57      	ldr	r2, [pc, #348]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 8004490:	f023 0304 	bic.w	r3, r3, #4
 8004494:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d015      	beq.n	80044ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800449e:	f7fe f9a3 	bl	80027e8 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a4:	e00a      	b.n	80044bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044a6:	f7fe f99f 	bl	80027e8 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e0b1      	b.n	8004620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044bc:	4b4b      	ldr	r3, [pc, #300]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0ee      	beq.n	80044a6 <HAL_RCC_OscConfig+0x37e>
 80044c8:	e014      	b.n	80044f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ca:	f7fe f98d 	bl	80027e8 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d0:	e00a      	b.n	80044e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d2:	f7fe f989 	bl	80027e8 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e09b      	b.n	8004620 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e8:	4b40      	ldr	r3, [pc, #256]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1ee      	bne.n	80044d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d105      	bne.n	8004506 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044fa:	4b3c      	ldr	r3, [pc, #240]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	4a3b      	ldr	r2, [pc, #236]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 8004500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004504:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 8087 	beq.w	800461e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004510:	4b36      	ldr	r3, [pc, #216]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f003 030c 	and.w	r3, r3, #12
 8004518:	2b08      	cmp	r3, #8
 800451a:	d061      	beq.n	80045e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	2b02      	cmp	r3, #2
 8004522:	d146      	bne.n	80045b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004524:	4b33      	ldr	r3, [pc, #204]	; (80045f4 <HAL_RCC_OscConfig+0x4cc>)
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452a:	f7fe f95d 	bl	80027e8 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004532:	f7fe f959 	bl	80027e8 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e06d      	b.n	8004620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004544:	4b29      	ldr	r3, [pc, #164]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f0      	bne.n	8004532 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004558:	d108      	bne.n	800456c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800455a:	4b24      	ldr	r3, [pc, #144]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	4921      	ldr	r1, [pc, #132]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 8004568:	4313      	orrs	r3, r2
 800456a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800456c:	4b1f      	ldr	r3, [pc, #124]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a19      	ldr	r1, [r3, #32]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	430b      	orrs	r3, r1
 800457e:	491b      	ldr	r1, [pc, #108]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 8004580:	4313      	orrs	r3, r2
 8004582:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004584:	4b1b      	ldr	r3, [pc, #108]	; (80045f4 <HAL_RCC_OscConfig+0x4cc>)
 8004586:	2201      	movs	r2, #1
 8004588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458a:	f7fe f92d 	bl	80027e8 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004592:	f7fe f929 	bl	80027e8 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e03d      	b.n	8004620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045a4:	4b11      	ldr	r3, [pc, #68]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d0f0      	beq.n	8004592 <HAL_RCC_OscConfig+0x46a>
 80045b0:	e035      	b.n	800461e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b2:	4b10      	ldr	r3, [pc, #64]	; (80045f4 <HAL_RCC_OscConfig+0x4cc>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b8:	f7fe f916 	bl	80027e8 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c0:	f7fe f912 	bl	80027e8 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e026      	b.n	8004620 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045d2:	4b06      	ldr	r3, [pc, #24]	; (80045ec <HAL_RCC_OscConfig+0x4c4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1f0      	bne.n	80045c0 <HAL_RCC_OscConfig+0x498>
 80045de:	e01e      	b.n	800461e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d107      	bne.n	80045f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e019      	b.n	8004620 <HAL_RCC_OscConfig+0x4f8>
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40007000 	.word	0x40007000
 80045f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80045f8:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <HAL_RCC_OscConfig+0x500>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	429a      	cmp	r2, r3
 800460a:	d106      	bne.n	800461a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004616:	429a      	cmp	r2, r3
 8004618:	d001      	beq.n	800461e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	40021000 	.word	0x40021000

0800462c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0d0      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004640:	4b6a      	ldr	r3, [pc, #424]	; (80047ec <HAL_RCC_ClockConfig+0x1c0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d910      	bls.n	8004670 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464e:	4b67      	ldr	r3, [pc, #412]	; (80047ec <HAL_RCC_ClockConfig+0x1c0>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f023 0207 	bic.w	r2, r3, #7
 8004656:	4965      	ldr	r1, [pc, #404]	; (80047ec <HAL_RCC_ClockConfig+0x1c0>)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	4313      	orrs	r3, r2
 800465c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465e:	4b63      	ldr	r3, [pc, #396]	; (80047ec <HAL_RCC_ClockConfig+0x1c0>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0307 	and.w	r3, r3, #7
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	429a      	cmp	r2, r3
 800466a:	d001      	beq.n	8004670 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e0b8      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d020      	beq.n	80046be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004688:	4b59      	ldr	r3, [pc, #356]	; (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	4a58      	ldr	r2, [pc, #352]	; (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 800468e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004692:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046a0:	4b53      	ldr	r3, [pc, #332]	; (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	4a52      	ldr	r2, [pc, #328]	; (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 80046a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80046aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ac:	4b50      	ldr	r3, [pc, #320]	; (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	494d      	ldr	r1, [pc, #308]	; (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d040      	beq.n	800474c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d107      	bne.n	80046e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d2:	4b47      	ldr	r3, [pc, #284]	; (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d115      	bne.n	800470a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e07f      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d107      	bne.n	80046fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ea:	4b41      	ldr	r3, [pc, #260]	; (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d109      	bne.n	800470a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e073      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fa:	4b3d      	ldr	r3, [pc, #244]	; (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e06b      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800470a:	4b39      	ldr	r3, [pc, #228]	; (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f023 0203 	bic.w	r2, r3, #3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	4936      	ldr	r1, [pc, #216]	; (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004718:	4313      	orrs	r3, r2
 800471a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800471c:	f7fe f864 	bl	80027e8 <HAL_GetTick>
 8004720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004722:	e00a      	b.n	800473a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004724:	f7fe f860 	bl	80027e8 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e053      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473a:	4b2d      	ldr	r3, [pc, #180]	; (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f003 020c 	and.w	r2, r3, #12
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	429a      	cmp	r2, r3
 800474a:	d1eb      	bne.n	8004724 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800474c:	4b27      	ldr	r3, [pc, #156]	; (80047ec <HAL_RCC_ClockConfig+0x1c0>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d210      	bcs.n	800477c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475a:	4b24      	ldr	r3, [pc, #144]	; (80047ec <HAL_RCC_ClockConfig+0x1c0>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f023 0207 	bic.w	r2, r3, #7
 8004762:	4922      	ldr	r1, [pc, #136]	; (80047ec <HAL_RCC_ClockConfig+0x1c0>)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	4313      	orrs	r3, r2
 8004768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800476a:	4b20      	ldr	r3, [pc, #128]	; (80047ec <HAL_RCC_ClockConfig+0x1c0>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	429a      	cmp	r2, r3
 8004776:	d001      	beq.n	800477c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e032      	b.n	80047e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d008      	beq.n	800479a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004788:	4b19      	ldr	r3, [pc, #100]	; (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4916      	ldr	r1, [pc, #88]	; (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 8004796:	4313      	orrs	r3, r2
 8004798:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0308 	and.w	r3, r3, #8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d009      	beq.n	80047ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047a6:	4b12      	ldr	r3, [pc, #72]	; (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	490e      	ldr	r1, [pc, #56]	; (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047ba:	f000 f821 	bl	8004800 <HAL_RCC_GetSysClockFreq>
 80047be:	4602      	mov	r2, r0
 80047c0:	4b0b      	ldr	r3, [pc, #44]	; (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	091b      	lsrs	r3, r3, #4
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	490a      	ldr	r1, [pc, #40]	; (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 80047cc:	5ccb      	ldrb	r3, [r1, r3]
 80047ce:	fa22 f303 	lsr.w	r3, r2, r3
 80047d2:	4a09      	ldr	r2, [pc, #36]	; (80047f8 <HAL_RCC_ClockConfig+0x1cc>)
 80047d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047d6:	4b09      	ldr	r3, [pc, #36]	; (80047fc <HAL_RCC_ClockConfig+0x1d0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f7fd ffc2 	bl	8002764 <HAL_InitTick>

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40022000 	.word	0x40022000
 80047f0:	40021000 	.word	0x40021000
 80047f4:	080089cc 	.word	0x080089cc
 80047f8:	20000018 	.word	0x20000018
 80047fc:	2000001c 	.word	0x2000001c

08004800 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004800:	b490      	push	{r4, r7}
 8004802:	b08a      	sub	sp, #40	; 0x28
 8004804:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004806:	4b29      	ldr	r3, [pc, #164]	; (80048ac <HAL_RCC_GetSysClockFreq+0xac>)
 8004808:	1d3c      	adds	r4, r7, #4
 800480a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800480c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004810:	f240 2301 	movw	r3, #513	; 0x201
 8004814:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	2300      	movs	r3, #0
 800481c:	61bb      	str	r3, [r7, #24]
 800481e:	2300      	movs	r3, #0
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
 8004822:	2300      	movs	r3, #0
 8004824:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800482a:	4b21      	ldr	r3, [pc, #132]	; (80048b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f003 030c 	and.w	r3, r3, #12
 8004836:	2b04      	cmp	r3, #4
 8004838:	d002      	beq.n	8004840 <HAL_RCC_GetSysClockFreq+0x40>
 800483a:	2b08      	cmp	r3, #8
 800483c:	d003      	beq.n	8004846 <HAL_RCC_GetSysClockFreq+0x46>
 800483e:	e02b      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004840:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004842:	623b      	str	r3, [r7, #32]
      break;
 8004844:	e02b      	b.n	800489e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	0c9b      	lsrs	r3, r3, #18
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	3328      	adds	r3, #40	; 0x28
 8004850:	443b      	add	r3, r7
 8004852:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004856:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d012      	beq.n	8004888 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004862:	4b13      	ldr	r3, [pc, #76]	; (80048b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	0c5b      	lsrs	r3, r3, #17
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	3328      	adds	r3, #40	; 0x28
 800486e:	443b      	add	r3, r7
 8004870:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004874:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	4a0e      	ldr	r2, [pc, #56]	; (80048b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800487a:	fb03 f202 	mul.w	r2, r3, r2
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	fbb2 f3f3 	udiv	r3, r2, r3
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
 8004886:	e004      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	4a0b      	ldr	r2, [pc, #44]	; (80048b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800488c:	fb02 f303 	mul.w	r3, r2, r3
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	623b      	str	r3, [r7, #32]
      break;
 8004896:	e002      	b.n	800489e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004898:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800489a:	623b      	str	r3, [r7, #32]
      break;
 800489c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800489e:	6a3b      	ldr	r3, [r7, #32]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3728      	adds	r7, #40	; 0x28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc90      	pop	{r4, r7}
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	080089bc 	.word	0x080089bc
 80048b0:	40021000 	.word	0x40021000
 80048b4:	007a1200 	.word	0x007a1200
 80048b8:	003d0900 	.word	0x003d0900

080048bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048c0:	4b02      	ldr	r3, [pc, #8]	; (80048cc <HAL_RCC_GetHCLKFreq+0x10>)
 80048c2:	681b      	ldr	r3, [r3, #0]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr
 80048cc:	20000018 	.word	0x20000018

080048d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048d4:	f7ff fff2 	bl	80048bc <HAL_RCC_GetHCLKFreq>
 80048d8:	4602      	mov	r2, r0
 80048da:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	4903      	ldr	r1, [pc, #12]	; (80048f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048e6:	5ccb      	ldrb	r3, [r1, r3]
 80048e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40021000 	.word	0x40021000
 80048f4:	080089dc 	.word	0x080089dc

080048f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004900:	4b0a      	ldr	r3, [pc, #40]	; (800492c <RCC_Delay+0x34>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a0a      	ldr	r2, [pc, #40]	; (8004930 <RCC_Delay+0x38>)
 8004906:	fba2 2303 	umull	r2, r3, r2, r3
 800490a:	0a5b      	lsrs	r3, r3, #9
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	fb02 f303 	mul.w	r3, r2, r3
 8004912:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004914:	bf00      	nop
  }
  while (Delay --);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1e5a      	subs	r2, r3, #1
 800491a:	60fa      	str	r2, [r7, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d1f9      	bne.n	8004914 <RCC_Delay+0x1c>
}
 8004920:	bf00      	nop
 8004922:	bf00      	nop
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr
 800492c:	20000018 	.word	0x20000018
 8004930:	10624dd3 	.word	0x10624dd3

08004934 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e041      	b.n	80049ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d106      	bne.n	8004960 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7fd fd48 	bl	80023f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2202      	movs	r2, #2
 8004964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	3304      	adds	r3, #4
 8004970:	4619      	mov	r1, r3
 8004972:	4610      	mov	r0, r2
 8004974:	f000 fda0 	bl	80054b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
	...

080049d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d001      	beq.n	80049ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e03a      	b.n	8004a62 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2202      	movs	r2, #2
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a18      	ldr	r2, [pc, #96]	; (8004a6c <HAL_TIM_Base_Start_IT+0x98>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d00e      	beq.n	8004a2c <HAL_TIM_Base_Start_IT+0x58>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a16:	d009      	beq.n	8004a2c <HAL_TIM_Base_Start_IT+0x58>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a14      	ldr	r2, [pc, #80]	; (8004a70 <HAL_TIM_Base_Start_IT+0x9c>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d004      	beq.n	8004a2c <HAL_TIM_Base_Start_IT+0x58>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a13      	ldr	r2, [pc, #76]	; (8004a74 <HAL_TIM_Base_Start_IT+0xa0>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d111      	bne.n	8004a50 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b06      	cmp	r3, #6
 8004a3c:	d010      	beq.n	8004a60 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f042 0201 	orr.w	r2, r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4e:	e007      	b.n	8004a60 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0201 	orr.w	r2, r2, #1
 8004a5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr
 8004a6c:	40012c00 	.word	0x40012c00
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40000800 	.word	0x40000800

08004a78 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e041      	b.n	8004b0e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f839 	bl	8004b16 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3304      	adds	r3, #4
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	f000 fcfe 	bl	80054b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bc80      	pop	{r7}
 8004b26:	4770      	bx	lr

08004b28 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d104      	bne.n	8004b42 <HAL_TIM_IC_Start+0x1a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	e013      	b.n	8004b6a <HAL_TIM_IC_Start+0x42>
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d104      	bne.n	8004b52 <HAL_TIM_IC_Start+0x2a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	e00b      	b.n	8004b6a <HAL_TIM_IC_Start+0x42>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d104      	bne.n	8004b62 <HAL_TIM_IC_Start+0x3a>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	e003      	b.n	8004b6a <HAL_TIM_IC_Start+0x42>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d104      	bne.n	8004b7c <HAL_TIM_IC_Start+0x54>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	e013      	b.n	8004ba4 <HAL_TIM_IC_Start+0x7c>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d104      	bne.n	8004b8c <HAL_TIM_IC_Start+0x64>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	e00b      	b.n	8004ba4 <HAL_TIM_IC_Start+0x7c>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d104      	bne.n	8004b9c <HAL_TIM_IC_Start+0x74>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	e003      	b.n	8004ba4 <HAL_TIM_IC_Start+0x7c>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d102      	bne.n	8004bb2 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004bac:	7bbb      	ldrb	r3, [r7, #14]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d001      	beq.n	8004bb6 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e06d      	b.n	8004c92 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d104      	bne.n	8004bc6 <HAL_TIM_IC_Start+0x9e>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bc4:	e013      	b.n	8004bee <HAL_TIM_IC_Start+0xc6>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d104      	bne.n	8004bd6 <HAL_TIM_IC_Start+0xae>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bd4:	e00b      	b.n	8004bee <HAL_TIM_IC_Start+0xc6>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d104      	bne.n	8004be6 <HAL_TIM_IC_Start+0xbe>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2202      	movs	r2, #2
 8004be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be4:	e003      	b.n	8004bee <HAL_TIM_IC_Start+0xc6>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d104      	bne.n	8004bfe <HAL_TIM_IC_Start+0xd6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bfc:	e013      	b.n	8004c26 <HAL_TIM_IC_Start+0xfe>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d104      	bne.n	8004c0e <HAL_TIM_IC_Start+0xe6>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c0c:	e00b      	b.n	8004c26 <HAL_TIM_IC_Start+0xfe>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d104      	bne.n	8004c1e <HAL_TIM_IC_Start+0xf6>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c1c:	e003      	b.n	8004c26 <HAL_TIM_IC_Start+0xfe>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2202      	movs	r2, #2
 8004c22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	6839      	ldr	r1, [r7, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fed5 	bl	80059de <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a18      	ldr	r2, [pc, #96]	; (8004c9c <HAL_TIM_IC_Start+0x174>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d00e      	beq.n	8004c5c <HAL_TIM_IC_Start+0x134>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c46:	d009      	beq.n	8004c5c <HAL_TIM_IC_Start+0x134>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a14      	ldr	r2, [pc, #80]	; (8004ca0 <HAL_TIM_IC_Start+0x178>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d004      	beq.n	8004c5c <HAL_TIM_IC_Start+0x134>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a13      	ldr	r2, [pc, #76]	; (8004ca4 <HAL_TIM_IC_Start+0x17c>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d111      	bne.n	8004c80 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b06      	cmp	r3, #6
 8004c6c:	d010      	beq.n	8004c90 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0201 	orr.w	r2, r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7e:	e007      	b.n	8004c90 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	40012c00 	.word	0x40012c00
 8004ca0:	40000400 	.word	0x40000400
 8004ca4:	40000800 	.word	0x40000800

08004ca8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d104      	bne.n	8004cc2 <HAL_TIM_IC_Start_IT+0x1a>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	e013      	b.n	8004cea <HAL_TIM_IC_Start_IT+0x42>
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	2b04      	cmp	r3, #4
 8004cc6:	d104      	bne.n	8004cd2 <HAL_TIM_IC_Start_IT+0x2a>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	e00b      	b.n	8004cea <HAL_TIM_IC_Start_IT+0x42>
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d104      	bne.n	8004ce2 <HAL_TIM_IC_Start_IT+0x3a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	e003      	b.n	8004cea <HAL_TIM_IC_Start_IT+0x42>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <HAL_TIM_IC_Start_IT+0x54>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	e013      	b.n	8004d24 <HAL_TIM_IC_Start_IT+0x7c>
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d104      	bne.n	8004d0c <HAL_TIM_IC_Start_IT+0x64>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	e00b      	b.n	8004d24 <HAL_TIM_IC_Start_IT+0x7c>
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	d104      	bne.n	8004d1c <HAL_TIM_IC_Start_IT+0x74>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	e003      	b.n	8004d24 <HAL_TIM_IC_Start_IT+0x7c>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d102      	bne.n	8004d32 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004d2c:	7bbb      	ldrb	r3, [r7, #14]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d001      	beq.n	8004d36 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e0b3      	b.n	8004e9e <HAL_TIM_IC_Start_IT+0x1f6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d104      	bne.n	8004d46 <HAL_TIM_IC_Start_IT+0x9e>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d44:	e013      	b.n	8004d6e <HAL_TIM_IC_Start_IT+0xc6>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d104      	bne.n	8004d56 <HAL_TIM_IC_Start_IT+0xae>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d54:	e00b      	b.n	8004d6e <HAL_TIM_IC_Start_IT+0xc6>
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b08      	cmp	r3, #8
 8004d5a:	d104      	bne.n	8004d66 <HAL_TIM_IC_Start_IT+0xbe>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d64:	e003      	b.n	8004d6e <HAL_TIM_IC_Start_IT+0xc6>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2202      	movs	r2, #2
 8004d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d104      	bne.n	8004d7e <HAL_TIM_IC_Start_IT+0xd6>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2202      	movs	r2, #2
 8004d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d7c:	e013      	b.n	8004da6 <HAL_TIM_IC_Start_IT+0xfe>
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d104      	bne.n	8004d8e <HAL_TIM_IC_Start_IT+0xe6>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d8c:	e00b      	b.n	8004da6 <HAL_TIM_IC_Start_IT+0xfe>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d104      	bne.n	8004d9e <HAL_TIM_IC_Start_IT+0xf6>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d9c:	e003      	b.n	8004da6 <HAL_TIM_IC_Start_IT+0xfe>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2202      	movs	r2, #2
 8004da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d841      	bhi.n	8004e30 <HAL_TIM_IC_Start_IT+0x188>
 8004dac:	a201      	add	r2, pc, #4	; (adr r2, 8004db4 <HAL_TIM_IC_Start_IT+0x10c>)
 8004dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db2:	bf00      	nop
 8004db4:	08004de9 	.word	0x08004de9
 8004db8:	08004e31 	.word	0x08004e31
 8004dbc:	08004e31 	.word	0x08004e31
 8004dc0:	08004e31 	.word	0x08004e31
 8004dc4:	08004dfb 	.word	0x08004dfb
 8004dc8:	08004e31 	.word	0x08004e31
 8004dcc:	08004e31 	.word	0x08004e31
 8004dd0:	08004e31 	.word	0x08004e31
 8004dd4:	08004e0d 	.word	0x08004e0d
 8004dd8:	08004e31 	.word	0x08004e31
 8004ddc:	08004e31 	.word	0x08004e31
 8004de0:	08004e31 	.word	0x08004e31
 8004de4:	08004e1f 	.word	0x08004e1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f042 0202 	orr.w	r2, r2, #2
 8004df6:	60da      	str	r2, [r3, #12]
      break;
 8004df8:	e01b      	b.n	8004e32 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0204 	orr.w	r2, r2, #4
 8004e08:	60da      	str	r2, [r3, #12]
      break;
 8004e0a:	e012      	b.n	8004e32 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68da      	ldr	r2, [r3, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f042 0208 	orr.w	r2, r2, #8
 8004e1a:	60da      	str	r2, [r3, #12]
      break;
 8004e1c:	e009      	b.n	8004e32 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0210 	orr.w	r2, r2, #16
 8004e2c:	60da      	str	r2, [r3, #12]
      break;
 8004e2e:	e000      	b.n	8004e32 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8004e30:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2201      	movs	r2, #1
 8004e38:	6839      	ldr	r1, [r7, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 fdcf 	bl	80059de <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a18      	ldr	r2, [pc, #96]	; (8004ea8 <HAL_TIM_IC_Start_IT+0x200>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00e      	beq.n	8004e68 <HAL_TIM_IC_Start_IT+0x1c0>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e52:	d009      	beq.n	8004e68 <HAL_TIM_IC_Start_IT+0x1c0>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a14      	ldr	r2, [pc, #80]	; (8004eac <HAL_TIM_IC_Start_IT+0x204>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d004      	beq.n	8004e68 <HAL_TIM_IC_Start_IT+0x1c0>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <HAL_TIM_IC_Start_IT+0x208>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d111      	bne.n	8004e8c <HAL_TIM_IC_Start_IT+0x1e4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b06      	cmp	r3, #6
 8004e78:	d010      	beq.n	8004e9c <HAL_TIM_IC_Start_IT+0x1f4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0201 	orr.w	r2, r2, #1
 8004e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8a:	e007      	b.n	8004e9c <HAL_TIM_IC_Start_IT+0x1f4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40012c00 	.word	0x40012c00
 8004eac:	40000400 	.word	0x40000400
 8004eb0:	40000800 	.word	0x40000800

08004eb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d122      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d11b      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0202 	mvn.w	r2, #2
 8004ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7fd f990 	bl	800221c <HAL_TIM_IC_CaptureCallback>
 8004efc:	e005      	b.n	8004f0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fabe 	bl	8005480 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fac4 	bl	8005492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0304 	and.w	r3, r3, #4
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d122      	bne.n	8004f64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d11b      	bne.n	8004f64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0204 	mvn.w	r2, #4
 8004f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2202      	movs	r2, #2
 8004f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f7fd f966 	bl	800221c <HAL_TIM_IC_CaptureCallback>
 8004f50:	e005      	b.n	8004f5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fa94 	bl	8005480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fa9a 	bl	8005492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f003 0308 	and.w	r3, r3, #8
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d122      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d11b      	bne.n	8004fb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0208 	mvn.w	r2, #8
 8004f88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2204      	movs	r2, #4
 8004f8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f003 0303 	and.w	r3, r3, #3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7fd f93c 	bl	800221c <HAL_TIM_IC_CaptureCallback>
 8004fa4:	e005      	b.n	8004fb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fa6a 	bl	8005480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fa70 	bl	8005492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f003 0310 	and.w	r3, r3, #16
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d122      	bne.n	800500c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	2b10      	cmp	r3, #16
 8004fd2:	d11b      	bne.n	800500c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f06f 0210 	mvn.w	r2, #16
 8004fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2208      	movs	r2, #8
 8004fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fd f912 	bl	800221c <HAL_TIM_IC_CaptureCallback>
 8004ff8:	e005      	b.n	8005006 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fa40 	bl	8005480 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fa46 	bl	8005492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b01      	cmp	r3, #1
 8005018:	d10e      	bne.n	8005038 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f003 0301 	and.w	r3, r3, #1
 8005024:	2b01      	cmp	r3, #1
 8005026:	d107      	bne.n	8005038 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f06f 0201 	mvn.w	r2, #1
 8005030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fd f8be 	bl	80021b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005042:	2b80      	cmp	r3, #128	; 0x80
 8005044:	d10e      	bne.n	8005064 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005050:	2b80      	cmp	r3, #128	; 0x80
 8005052:	d107      	bne.n	8005064 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800505c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 fd49 	bl	8005af6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506e:	2b40      	cmp	r3, #64	; 0x40
 8005070:	d10e      	bne.n	8005090 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	d107      	bne.n	8005090 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fa0a 	bl	80054a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0320 	and.w	r3, r3, #32
 800509a:	2b20      	cmp	r3, #32
 800509c:	d10e      	bne.n	80050bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0320 	and.w	r3, r3, #32
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d107      	bne.n	80050bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 0220 	mvn.w	r2, #32
 80050b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 fd14 	bl	8005ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050bc:	bf00      	nop
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d101      	bne.n	80050de <HAL_TIM_IC_ConfigChannel+0x1a>
 80050da:	2302      	movs	r3, #2
 80050dc:	e082      	b.n	80051e4 <HAL_TIM_IC_ConfigChannel+0x120>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d11b      	bne.n	8005124 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6818      	ldr	r0, [r3, #0]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	6819      	ldr	r1, [r3, #0]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f000 facc 	bl	8005698 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f022 020c 	bic.w	r2, r2, #12
 800510e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6999      	ldr	r1, [r3, #24]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	619a      	str	r2, [r3, #24]
 8005122:	e05a      	b.n	80051da <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b04      	cmp	r3, #4
 8005128:	d11c      	bne.n	8005164 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	6819      	ldr	r1, [r3, #0]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f000 fb35 	bl	80057a8 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699a      	ldr	r2, [r3, #24]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800514c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6999      	ldr	r1, [r3, #24]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	021a      	lsls	r2, r3, #8
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	619a      	str	r2, [r3, #24]
 8005162:	e03a      	b.n	80051da <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b08      	cmp	r3, #8
 8005168:	d11b      	bne.n	80051a2 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	6819      	ldr	r1, [r3, #0]
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f000 fb80 	bl	800587e <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69da      	ldr	r2, [r3, #28]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f022 020c 	bic.w	r2, r2, #12
 800518c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	69d9      	ldr	r1, [r3, #28]
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	61da      	str	r2, [r3, #28]
 80051a0:	e01b      	b.n	80051da <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	6819      	ldr	r1, [r3, #0]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f000 fb9f 	bl	80058f4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	69da      	ldr	r2, [r3, #28]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80051c4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69d9      	ldr	r1, [r3, #28]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	021a      	lsls	r2, r3, #8
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_TIM_ConfigClockSource+0x18>
 8005200:	2302      	movs	r3, #2
 8005202:	e0b3      	b.n	800536c <HAL_TIM_ConfigClockSource+0x180>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005222:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800522a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800523c:	d03e      	beq.n	80052bc <HAL_TIM_ConfigClockSource+0xd0>
 800523e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005242:	f200 8087 	bhi.w	8005354 <HAL_TIM_ConfigClockSource+0x168>
 8005246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524a:	f000 8085 	beq.w	8005358 <HAL_TIM_ConfigClockSource+0x16c>
 800524e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005252:	d87f      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x168>
 8005254:	2b70      	cmp	r3, #112	; 0x70
 8005256:	d01a      	beq.n	800528e <HAL_TIM_ConfigClockSource+0xa2>
 8005258:	2b70      	cmp	r3, #112	; 0x70
 800525a:	d87b      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x168>
 800525c:	2b60      	cmp	r3, #96	; 0x60
 800525e:	d050      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x116>
 8005260:	2b60      	cmp	r3, #96	; 0x60
 8005262:	d877      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x168>
 8005264:	2b50      	cmp	r3, #80	; 0x50
 8005266:	d03c      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0xf6>
 8005268:	2b50      	cmp	r3, #80	; 0x50
 800526a:	d873      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x168>
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d058      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x136>
 8005270:	2b40      	cmp	r3, #64	; 0x40
 8005272:	d86f      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x168>
 8005274:	2b30      	cmp	r3, #48	; 0x30
 8005276:	d064      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x156>
 8005278:	2b30      	cmp	r3, #48	; 0x30
 800527a:	d86b      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x168>
 800527c:	2b20      	cmp	r3, #32
 800527e:	d060      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x156>
 8005280:	2b20      	cmp	r3, #32
 8005282:	d867      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x168>
 8005284:	2b00      	cmp	r3, #0
 8005286:	d05c      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x156>
 8005288:	2b10      	cmp	r3, #16
 800528a:	d05a      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800528c:	e062      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6899      	ldr	r1, [r3, #8]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f000 fb7f 	bl	80059a0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	609a      	str	r2, [r3, #8]
      break;
 80052ba:	e04e      	b.n	800535a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	6899      	ldr	r1, [r3, #8]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f000 fb68 	bl	80059a0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052de:	609a      	str	r2, [r3, #8]
      break;
 80052e0:	e03b      	b.n	800535a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6859      	ldr	r1, [r3, #4]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	461a      	mov	r2, r3
 80052f0:	f000 fa2c 	bl	800574c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2150      	movs	r1, #80	; 0x50
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fb36 	bl	800596c <TIM_ITRx_SetConfig>
      break;
 8005300:	e02b      	b.n	800535a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6859      	ldr	r1, [r3, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	461a      	mov	r2, r3
 8005310:	f000 fa86 	bl	8005820 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2160      	movs	r1, #96	; 0x60
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fb26 	bl	800596c <TIM_ITRx_SetConfig>
      break;
 8005320:	e01b      	b.n	800535a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6859      	ldr	r1, [r3, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	461a      	mov	r2, r3
 8005330:	f000 fa0c 	bl	800574c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2140      	movs	r1, #64	; 0x40
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fb16 	bl	800596c <TIM_ITRx_SetConfig>
      break;
 8005340:	e00b      	b.n	800535a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f000 fb0d 	bl	800596c <TIM_ITRx_SetConfig>
        break;
 8005352:	e002      	b.n	800535a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005354:	bf00      	nop
 8005356:	e000      	b.n	800535a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005358:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b082      	sub	sp, #8
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_TIM_SlaveConfigSynchro+0x18>
 8005388:	2302      	movs	r3, #2
 800538a:	e031      	b.n	80053f0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2202      	movs	r2, #2
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800539c:	6839      	ldr	r1, [r7, #0]
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f8ec 	bl	800557c <TIM_SlaveTimer_SetConfig>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d009      	beq.n	80053be <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e018      	b.n	80053f0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68da      	ldr	r2, [r3, #12]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053cc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053dc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	2b0c      	cmp	r3, #12
 800540a:	d831      	bhi.n	8005470 <HAL_TIM_ReadCapturedValue+0x78>
 800540c:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <HAL_TIM_ReadCapturedValue+0x1c>)
 800540e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005412:	bf00      	nop
 8005414:	08005449 	.word	0x08005449
 8005418:	08005471 	.word	0x08005471
 800541c:	08005471 	.word	0x08005471
 8005420:	08005471 	.word	0x08005471
 8005424:	08005453 	.word	0x08005453
 8005428:	08005471 	.word	0x08005471
 800542c:	08005471 	.word	0x08005471
 8005430:	08005471 	.word	0x08005471
 8005434:	0800545d 	.word	0x0800545d
 8005438:	08005471 	.word	0x08005471
 800543c:	08005471 	.word	0x08005471
 8005440:	08005471 	.word	0x08005471
 8005444:	08005467 	.word	0x08005467
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544e:	60fb      	str	r3, [r7, #12]

      break;
 8005450:	e00f      	b.n	8005472 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	60fb      	str	r3, [r7, #12]

      break;
 800545a:	e00a      	b.n	8005472 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005462:	60fb      	str	r3, [r7, #12]

      break;
 8005464:	e005      	b.n	8005472 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	60fb      	str	r3, [r7, #12]

      break;
 800546e:	e000      	b.n	8005472 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005470:	bf00      	nop
  }

  return tmpreg;
 8005472:	68fb      	ldr	r3, [r7, #12]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	bc80      	pop	{r7}
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop

08005480 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	bc80      	pop	{r7}
 8005490:	4770      	bx	lr

08005492 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005492:	b480      	push	{r7}
 8005494:	b083      	sub	sp, #12
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr

080054a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054ac:	bf00      	nop
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr
	...

080054b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a29      	ldr	r2, [pc, #164]	; (8005570 <TIM_Base_SetConfig+0xb8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00b      	beq.n	80054e8 <TIM_Base_SetConfig+0x30>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d6:	d007      	beq.n	80054e8 <TIM_Base_SetConfig+0x30>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a26      	ldr	r2, [pc, #152]	; (8005574 <TIM_Base_SetConfig+0xbc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d003      	beq.n	80054e8 <TIM_Base_SetConfig+0x30>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a25      	ldr	r2, [pc, #148]	; (8005578 <TIM_Base_SetConfig+0xc0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d108      	bne.n	80054fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a1c      	ldr	r2, [pc, #112]	; (8005570 <TIM_Base_SetConfig+0xb8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00b      	beq.n	800551a <TIM_Base_SetConfig+0x62>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005508:	d007      	beq.n	800551a <TIM_Base_SetConfig+0x62>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a19      	ldr	r2, [pc, #100]	; (8005574 <TIM_Base_SetConfig+0xbc>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d003      	beq.n	800551a <TIM_Base_SetConfig+0x62>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a18      	ldr	r2, [pc, #96]	; (8005578 <TIM_Base_SetConfig+0xc0>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d108      	bne.n	800552c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a07      	ldr	r2, [pc, #28]	; (8005570 <TIM_Base_SetConfig+0xb8>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d103      	bne.n	8005560 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	615a      	str	r2, [r3, #20]
}
 8005566:	bf00      	nop
 8005568:	3714      	adds	r7, #20
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr
 8005570:	40012c00 	.word	0x40012c00
 8005574:	40000400 	.word	0x40000400
 8005578:	40000800 	.word	0x40000800

0800557c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005594:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	f023 0307 	bic.w	r3, r3, #7
 80055a6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2b70      	cmp	r3, #112	; 0x70
 80055c0:	d01a      	beq.n	80055f8 <TIM_SlaveTimer_SetConfig+0x7c>
 80055c2:	2b70      	cmp	r3, #112	; 0x70
 80055c4:	d860      	bhi.n	8005688 <TIM_SlaveTimer_SetConfig+0x10c>
 80055c6:	2b60      	cmp	r3, #96	; 0x60
 80055c8:	d054      	beq.n	8005674 <TIM_SlaveTimer_SetConfig+0xf8>
 80055ca:	2b60      	cmp	r3, #96	; 0x60
 80055cc:	d85c      	bhi.n	8005688 <TIM_SlaveTimer_SetConfig+0x10c>
 80055ce:	2b50      	cmp	r3, #80	; 0x50
 80055d0:	d046      	beq.n	8005660 <TIM_SlaveTimer_SetConfig+0xe4>
 80055d2:	2b50      	cmp	r3, #80	; 0x50
 80055d4:	d858      	bhi.n	8005688 <TIM_SlaveTimer_SetConfig+0x10c>
 80055d6:	2b40      	cmp	r3, #64	; 0x40
 80055d8:	d019      	beq.n	800560e <TIM_SlaveTimer_SetConfig+0x92>
 80055da:	2b40      	cmp	r3, #64	; 0x40
 80055dc:	d854      	bhi.n	8005688 <TIM_SlaveTimer_SetConfig+0x10c>
 80055de:	2b30      	cmp	r3, #48	; 0x30
 80055e0:	d054      	beq.n	800568c <TIM_SlaveTimer_SetConfig+0x110>
 80055e2:	2b30      	cmp	r3, #48	; 0x30
 80055e4:	d850      	bhi.n	8005688 <TIM_SlaveTimer_SetConfig+0x10c>
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d050      	beq.n	800568c <TIM_SlaveTimer_SetConfig+0x110>
 80055ea:	2b20      	cmp	r3, #32
 80055ec:	d84c      	bhi.n	8005688 <TIM_SlaveTimer_SetConfig+0x10c>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d04c      	beq.n	800568c <TIM_SlaveTimer_SetConfig+0x110>
 80055f2:	2b10      	cmp	r3, #16
 80055f4:	d04a      	beq.n	800568c <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80055f6:	e047      	b.n	8005688 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6818      	ldr	r0, [r3, #0]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	68d9      	ldr	r1, [r3, #12]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	f000 f9ca 	bl	80059a0 <TIM_ETR_SetConfig>
      break;
 800560c:	e03f      	b.n	800568e <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b05      	cmp	r3, #5
 8005614:	d101      	bne.n	800561a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e03a      	b.n	8005690 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	6a1b      	ldr	r3, [r3, #32]
 8005620:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6a1a      	ldr	r2, [r3, #32]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0201 	bic.w	r2, r2, #1
 8005630:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005640:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	011b      	lsls	r3, r3, #4
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	621a      	str	r2, [r3, #32]
      break;
 800565e:	e016      	b.n	800568e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6818      	ldr	r0, [r3, #0]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	6899      	ldr	r1, [r3, #8]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	461a      	mov	r2, r3
 800566e:	f000 f86d 	bl	800574c <TIM_TI1_ConfigInputStage>
      break;
 8005672:	e00c      	b.n	800568e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6818      	ldr	r0, [r3, #0]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	6899      	ldr	r1, [r3, #8]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	461a      	mov	r2, r3
 8005682:	f000 f8cd 	bl	8005820 <TIM_TI2_ConfigInputStage>
      break;
 8005686:	e002      	b.n	800568e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8005688:	bf00      	nop
 800568a:	e000      	b.n	800568e <TIM_SlaveTimer_SetConfig+0x112>
        break;
 800568c:	bf00      	nop
  }
  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6a1b      	ldr	r3, [r3, #32]
 80056aa:	f023 0201 	bic.w	r2, r3, #1
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4a1f      	ldr	r2, [pc, #124]	; (8005740 <TIM_TI1_SetConfig+0xa8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00b      	beq.n	80056de <TIM_TI1_SetConfig+0x46>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056cc:	d007      	beq.n	80056de <TIM_TI1_SetConfig+0x46>
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4a1c      	ldr	r2, [pc, #112]	; (8005744 <TIM_TI1_SetConfig+0xac>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d003      	beq.n	80056de <TIM_TI1_SetConfig+0x46>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4a1b      	ldr	r2, [pc, #108]	; (8005748 <TIM_TI1_SetConfig+0xb0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d101      	bne.n	80056e2 <TIM_TI1_SetConfig+0x4a>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <TIM_TI1_SetConfig+0x4c>
 80056e2:	2300      	movs	r3, #0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d008      	beq.n	80056fa <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f023 0303 	bic.w	r3, r3, #3
 80056ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	e003      	b.n	8005702 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f043 0301 	orr.w	r3, r3, #1
 8005700:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005708:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	b2db      	uxtb	r3, r3
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	4313      	orrs	r3, r2
 8005714:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f023 030a 	bic.w	r3, r3, #10
 800571c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f003 030a 	and.w	r3, r3, #10
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	4313      	orrs	r3, r2
 8005728:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	621a      	str	r2, [r3, #32]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr
 8005740:	40012c00 	.word	0x40012c00
 8005744:	40000400 	.word	0x40000400
 8005748:	40000800 	.word	0x40000800

0800574c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f023 0201 	bic.w	r2, r3, #1
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f023 030a 	bic.w	r3, r3, #10
 8005788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	621a      	str	r2, [r3, #32]
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bc80      	pop	{r7}
 80057a6:	4770      	bx	lr

080057a8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
 80057b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f023 0210 	bic.w	r2, r3, #16
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	021b      	lsls	r3, r3, #8
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	031b      	lsls	r3, r3, #12
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057fa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	621a      	str	r2, [r3, #32]
}
 8005816:	bf00      	nop
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr

08005820 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005820:	b480      	push	{r7}
 8005822:	b087      	sub	sp, #28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	f023 0210 	bic.w	r2, r3, #16
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800584a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	031b      	lsls	r3, r3, #12
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	4313      	orrs	r3, r2
 8005854:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800585c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	693a      	ldr	r2, [r7, #16]
 8005864:	4313      	orrs	r3, r2
 8005866:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	697a      	ldr	r2, [r7, #20]
 800586c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	621a      	str	r2, [r3, #32]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	bc80      	pop	{r7}
 800587c:	4770      	bx	lr

0800587e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800587e:	b480      	push	{r7}
 8005880:	b087      	sub	sp, #28
 8005882:	af00      	add	r7, sp, #0
 8005884:	60f8      	str	r0, [r7, #12]
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	607a      	str	r2, [r7, #4]
 800588a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f023 0303 	bic.w	r3, r3, #3
 80058aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80058ac:	697a      	ldr	r2, [r7, #20]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	021b      	lsls	r3, r3, #8
 80058d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	4313      	orrs	r3, r2
 80058dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	621a      	str	r2, [r3, #32]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr

080058f4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6a1b      	ldr	r3, [r3, #32]
 8005918:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005920:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	021b      	lsls	r3, r3, #8
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005932:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	031b      	lsls	r3, r3, #12
 8005938:	b29b      	uxth	r3, r3
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	4313      	orrs	r3, r2
 800593e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005946:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	031b      	lsls	r3, r3, #12
 800594c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	4313      	orrs	r3, r2
 8005954:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	621a      	str	r2, [r3, #32]
}
 8005962:	bf00      	nop
 8005964:	371c      	adds	r7, #28
 8005966:	46bd      	mov	sp, r7
 8005968:	bc80      	pop	{r7}
 800596a:	4770      	bx	lr

0800596c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800596c:	b480      	push	{r7}
 800596e:	b085      	sub	sp, #20
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005982:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005984:	683a      	ldr	r2, [r7, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4313      	orrs	r3, r2
 800598a:	f043 0307 	orr.w	r3, r3, #7
 800598e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	609a      	str	r2, [r3, #8]
}
 8005996:	bf00      	nop
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	bc80      	pop	{r7}
 800599e:	4770      	bx	lr

080059a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	021a      	lsls	r2, r3, #8
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	697a      	ldr	r2, [r7, #20]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	609a      	str	r2, [r3, #8]
}
 80059d4:	bf00      	nop
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr

080059de <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059de:	b480      	push	{r7}
 80059e0:	b087      	sub	sp, #28
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f003 031f 	and.w	r3, r3, #31
 80059f0:	2201      	movs	r2, #1
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a1a      	ldr	r2, [r3, #32]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	43db      	mvns	r3, r3
 8005a00:	401a      	ands	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a1a      	ldr	r2, [r3, #32]
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f003 031f 	and.w	r3, r3, #31
 8005a10:	6879      	ldr	r1, [r7, #4]
 8005a12:	fa01 f303 	lsl.w	r3, r1, r3
 8005a16:	431a      	orrs	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	621a      	str	r2, [r3, #32]
}
 8005a1c:	bf00      	nop
 8005a1e:	371c      	adds	r7, #28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bc80      	pop	{r7}
 8005a24:	4770      	bx	lr
	...

08005a28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d101      	bne.n	8005a40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	e046      	b.n	8005ace <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a16      	ldr	r2, [pc, #88]	; (8005ad8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00e      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8c:	d009      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a12      	ldr	r2, [pc, #72]	; (8005adc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a10      	ldr	r2, [pc, #64]	; (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d10c      	bne.n	8005abc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr
 8005ad8:	40012c00 	.word	0x40012c00
 8005adc:	40000400 	.word	0x40000400
 8005ae0:	40000800 	.word	0x40000800

08005ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b083      	sub	sp, #12
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr

08005af6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr

08005b08 <__errno>:
 8005b08:	4b01      	ldr	r3, [pc, #4]	; (8005b10 <__errno+0x8>)
 8005b0a:	6818      	ldr	r0, [r3, #0]
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	20000024 	.word	0x20000024

08005b14 <__libc_init_array>:
 8005b14:	b570      	push	{r4, r5, r6, lr}
 8005b16:	2600      	movs	r6, #0
 8005b18:	4d0c      	ldr	r5, [pc, #48]	; (8005b4c <__libc_init_array+0x38>)
 8005b1a:	4c0d      	ldr	r4, [pc, #52]	; (8005b50 <__libc_init_array+0x3c>)
 8005b1c:	1b64      	subs	r4, r4, r5
 8005b1e:	10a4      	asrs	r4, r4, #2
 8005b20:	42a6      	cmp	r6, r4
 8005b22:	d109      	bne.n	8005b38 <__libc_init_array+0x24>
 8005b24:	f002 ff1c 	bl	8008960 <_init>
 8005b28:	2600      	movs	r6, #0
 8005b2a:	4d0a      	ldr	r5, [pc, #40]	; (8005b54 <__libc_init_array+0x40>)
 8005b2c:	4c0a      	ldr	r4, [pc, #40]	; (8005b58 <__libc_init_array+0x44>)
 8005b2e:	1b64      	subs	r4, r4, r5
 8005b30:	10a4      	asrs	r4, r4, #2
 8005b32:	42a6      	cmp	r6, r4
 8005b34:	d105      	bne.n	8005b42 <__libc_init_array+0x2e>
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3c:	4798      	blx	r3
 8005b3e:	3601      	adds	r6, #1
 8005b40:	e7ee      	b.n	8005b20 <__libc_init_array+0xc>
 8005b42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b46:	4798      	blx	r3
 8005b48:	3601      	adds	r6, #1
 8005b4a:	e7f2      	b.n	8005b32 <__libc_init_array+0x1e>
 8005b4c:	08008dbc 	.word	0x08008dbc
 8005b50:	08008dbc 	.word	0x08008dbc
 8005b54:	08008dbc 	.word	0x08008dbc
 8005b58:	08008dc0 	.word	0x08008dc0

08005b5c <memset>:
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	4402      	add	r2, r0
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d100      	bne.n	8005b66 <memset+0xa>
 8005b64:	4770      	bx	lr
 8005b66:	f803 1b01 	strb.w	r1, [r3], #1
 8005b6a:	e7f9      	b.n	8005b60 <memset+0x4>

08005b6c <__cvt>:
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b72:	461f      	mov	r7, r3
 8005b74:	bfbb      	ittet	lt
 8005b76:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005b7a:	461f      	movlt	r7, r3
 8005b7c:	2300      	movge	r3, #0
 8005b7e:	232d      	movlt	r3, #45	; 0x2d
 8005b80:	b088      	sub	sp, #32
 8005b82:	4614      	mov	r4, r2
 8005b84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b86:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005b88:	7013      	strb	r3, [r2, #0]
 8005b8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005b8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005b90:	f023 0820 	bic.w	r8, r3, #32
 8005b94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b98:	d005      	beq.n	8005ba6 <__cvt+0x3a>
 8005b9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b9e:	d100      	bne.n	8005ba2 <__cvt+0x36>
 8005ba0:	3501      	adds	r5, #1
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e000      	b.n	8005ba8 <__cvt+0x3c>
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	aa07      	add	r2, sp, #28
 8005baa:	9204      	str	r2, [sp, #16]
 8005bac:	aa06      	add	r2, sp, #24
 8005bae:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005bb2:	e9cd 3500 	strd	r3, r5, [sp]
 8005bb6:	4622      	mov	r2, r4
 8005bb8:	463b      	mov	r3, r7
 8005bba:	f000 fd05 	bl	80065c8 <_dtoa_r>
 8005bbe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	d102      	bne.n	8005bcc <__cvt+0x60>
 8005bc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005bc8:	07db      	lsls	r3, r3, #31
 8005bca:	d522      	bpl.n	8005c12 <__cvt+0xa6>
 8005bcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bd0:	eb06 0905 	add.w	r9, r6, r5
 8005bd4:	d110      	bne.n	8005bf8 <__cvt+0x8c>
 8005bd6:	7833      	ldrb	r3, [r6, #0]
 8005bd8:	2b30      	cmp	r3, #48	; 0x30
 8005bda:	d10a      	bne.n	8005bf2 <__cvt+0x86>
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2300      	movs	r3, #0
 8005be0:	4620      	mov	r0, r4
 8005be2:	4639      	mov	r1, r7
 8005be4:	f7fa feea 	bl	80009bc <__aeabi_dcmpeq>
 8005be8:	b918      	cbnz	r0, 8005bf2 <__cvt+0x86>
 8005bea:	f1c5 0501 	rsb	r5, r5, #1
 8005bee:	f8ca 5000 	str.w	r5, [sl]
 8005bf2:	f8da 3000 	ldr.w	r3, [sl]
 8005bf6:	4499      	add	r9, r3
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	4620      	mov	r0, r4
 8005bfe:	4639      	mov	r1, r7
 8005c00:	f7fa fedc 	bl	80009bc <__aeabi_dcmpeq>
 8005c04:	b108      	cbz	r0, 8005c0a <__cvt+0x9e>
 8005c06:	f8cd 901c 	str.w	r9, [sp, #28]
 8005c0a:	2230      	movs	r2, #48	; 0x30
 8005c0c:	9b07      	ldr	r3, [sp, #28]
 8005c0e:	454b      	cmp	r3, r9
 8005c10:	d307      	bcc.n	8005c22 <__cvt+0xb6>
 8005c12:	4630      	mov	r0, r6
 8005c14:	9b07      	ldr	r3, [sp, #28]
 8005c16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005c18:	1b9b      	subs	r3, r3, r6
 8005c1a:	6013      	str	r3, [r2, #0]
 8005c1c:	b008      	add	sp, #32
 8005c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c22:	1c59      	adds	r1, r3, #1
 8005c24:	9107      	str	r1, [sp, #28]
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	e7f0      	b.n	8005c0c <__cvt+0xa0>

08005c2a <__exponent>:
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c2e:	2900      	cmp	r1, #0
 8005c30:	f803 2b02 	strb.w	r2, [r3], #2
 8005c34:	bfb6      	itet	lt
 8005c36:	222d      	movlt	r2, #45	; 0x2d
 8005c38:	222b      	movge	r2, #43	; 0x2b
 8005c3a:	4249      	neglt	r1, r1
 8005c3c:	2909      	cmp	r1, #9
 8005c3e:	7042      	strb	r2, [r0, #1]
 8005c40:	dd2b      	ble.n	8005c9a <__exponent+0x70>
 8005c42:	f10d 0407 	add.w	r4, sp, #7
 8005c46:	46a4      	mov	ip, r4
 8005c48:	270a      	movs	r7, #10
 8005c4a:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c4e:	460a      	mov	r2, r1
 8005c50:	46a6      	mov	lr, r4
 8005c52:	fb07 1516 	mls	r5, r7, r6, r1
 8005c56:	2a63      	cmp	r2, #99	; 0x63
 8005c58:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8005c5c:	4631      	mov	r1, r6
 8005c5e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c62:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c66:	dcf0      	bgt.n	8005c4a <__exponent+0x20>
 8005c68:	3130      	adds	r1, #48	; 0x30
 8005c6a:	f1ae 0502 	sub.w	r5, lr, #2
 8005c6e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c72:	4629      	mov	r1, r5
 8005c74:	1c44      	adds	r4, r0, #1
 8005c76:	4561      	cmp	r1, ip
 8005c78:	d30a      	bcc.n	8005c90 <__exponent+0x66>
 8005c7a:	f10d 0209 	add.w	r2, sp, #9
 8005c7e:	eba2 020e 	sub.w	r2, r2, lr
 8005c82:	4565      	cmp	r5, ip
 8005c84:	bf88      	it	hi
 8005c86:	2200      	movhi	r2, #0
 8005c88:	4413      	add	r3, r2
 8005c8a:	1a18      	subs	r0, r3, r0
 8005c8c:	b003      	add	sp, #12
 8005c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c94:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c98:	e7ed      	b.n	8005c76 <__exponent+0x4c>
 8005c9a:	2330      	movs	r3, #48	; 0x30
 8005c9c:	3130      	adds	r1, #48	; 0x30
 8005c9e:	7083      	strb	r3, [r0, #2]
 8005ca0:	70c1      	strb	r1, [r0, #3]
 8005ca2:	1d03      	adds	r3, r0, #4
 8005ca4:	e7f1      	b.n	8005c8a <__exponent+0x60>
	...

08005ca8 <_printf_float>:
 8005ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cac:	b091      	sub	sp, #68	; 0x44
 8005cae:	460c      	mov	r4, r1
 8005cb0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005cb4:	4616      	mov	r6, r2
 8005cb6:	461f      	mov	r7, r3
 8005cb8:	4605      	mov	r5, r0
 8005cba:	f001 fa73 	bl	80071a4 <_localeconv_r>
 8005cbe:	6803      	ldr	r3, [r0, #0]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc4:	f7fa fa4e 	bl	8000164 <strlen>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	930e      	str	r3, [sp, #56]	; 0x38
 8005ccc:	f8d8 3000 	ldr.w	r3, [r8]
 8005cd0:	900a      	str	r0, [sp, #40]	; 0x28
 8005cd2:	3307      	adds	r3, #7
 8005cd4:	f023 0307 	bic.w	r3, r3, #7
 8005cd8:	f103 0208 	add.w	r2, r3, #8
 8005cdc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005ce0:	f8d4 b000 	ldr.w	fp, [r4]
 8005ce4:	f8c8 2000 	str.w	r2, [r8]
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005cf0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005cf4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005cf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfe:	4640      	mov	r0, r8
 8005d00:	4b9c      	ldr	r3, [pc, #624]	; (8005f74 <_printf_float+0x2cc>)
 8005d02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d04:	f7fa fe8c 	bl	8000a20 <__aeabi_dcmpun>
 8005d08:	bb70      	cbnz	r0, 8005d68 <_printf_float+0xc0>
 8005d0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d0e:	4640      	mov	r0, r8
 8005d10:	4b98      	ldr	r3, [pc, #608]	; (8005f74 <_printf_float+0x2cc>)
 8005d12:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d14:	f7fa fe66 	bl	80009e4 <__aeabi_dcmple>
 8005d18:	bb30      	cbnz	r0, 8005d68 <_printf_float+0xc0>
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	4640      	mov	r0, r8
 8005d20:	4651      	mov	r1, sl
 8005d22:	f7fa fe55 	bl	80009d0 <__aeabi_dcmplt>
 8005d26:	b110      	cbz	r0, 8005d2e <_printf_float+0x86>
 8005d28:	232d      	movs	r3, #45	; 0x2d
 8005d2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d2e:	4b92      	ldr	r3, [pc, #584]	; (8005f78 <_printf_float+0x2d0>)
 8005d30:	4892      	ldr	r0, [pc, #584]	; (8005f7c <_printf_float+0x2d4>)
 8005d32:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005d36:	bf94      	ite	ls
 8005d38:	4698      	movls	r8, r3
 8005d3a:	4680      	movhi	r8, r0
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	f04f 0a00 	mov.w	sl, #0
 8005d42:	6123      	str	r3, [r4, #16]
 8005d44:	f02b 0304 	bic.w	r3, fp, #4
 8005d48:	6023      	str	r3, [r4, #0]
 8005d4a:	4633      	mov	r3, r6
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	4628      	mov	r0, r5
 8005d50:	9700      	str	r7, [sp, #0]
 8005d52:	aa0f      	add	r2, sp, #60	; 0x3c
 8005d54:	f000 f9d4 	bl	8006100 <_printf_common>
 8005d58:	3001      	adds	r0, #1
 8005d5a:	f040 8090 	bne.w	8005e7e <_printf_float+0x1d6>
 8005d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d62:	b011      	add	sp, #68	; 0x44
 8005d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d68:	4642      	mov	r2, r8
 8005d6a:	4653      	mov	r3, sl
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	4651      	mov	r1, sl
 8005d70:	f7fa fe56 	bl	8000a20 <__aeabi_dcmpun>
 8005d74:	b148      	cbz	r0, 8005d8a <_printf_float+0xe2>
 8005d76:	f1ba 0f00 	cmp.w	sl, #0
 8005d7a:	bfb8      	it	lt
 8005d7c:	232d      	movlt	r3, #45	; 0x2d
 8005d7e:	4880      	ldr	r0, [pc, #512]	; (8005f80 <_printf_float+0x2d8>)
 8005d80:	bfb8      	it	lt
 8005d82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d86:	4b7f      	ldr	r3, [pc, #508]	; (8005f84 <_printf_float+0x2dc>)
 8005d88:	e7d3      	b.n	8005d32 <_printf_float+0x8a>
 8005d8a:	6863      	ldr	r3, [r4, #4]
 8005d8c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005d90:	1c5a      	adds	r2, r3, #1
 8005d92:	d142      	bne.n	8005e1a <_printf_float+0x172>
 8005d94:	2306      	movs	r3, #6
 8005d96:	6063      	str	r3, [r4, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	9206      	str	r2, [sp, #24]
 8005d9c:	aa0e      	add	r2, sp, #56	; 0x38
 8005d9e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005da2:	aa0d      	add	r2, sp, #52	; 0x34
 8005da4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005da8:	9203      	str	r2, [sp, #12]
 8005daa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8005dae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005db2:	6023      	str	r3, [r4, #0]
 8005db4:	6863      	ldr	r3, [r4, #4]
 8005db6:	4642      	mov	r2, r8
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	4628      	mov	r0, r5
 8005dbc:	4653      	mov	r3, sl
 8005dbe:	910b      	str	r1, [sp, #44]	; 0x2c
 8005dc0:	f7ff fed4 	bl	8005b6c <__cvt>
 8005dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005dc6:	4680      	mov	r8, r0
 8005dc8:	2947      	cmp	r1, #71	; 0x47
 8005dca:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005dcc:	d108      	bne.n	8005de0 <_printf_float+0x138>
 8005dce:	1cc8      	adds	r0, r1, #3
 8005dd0:	db02      	blt.n	8005dd8 <_printf_float+0x130>
 8005dd2:	6863      	ldr	r3, [r4, #4]
 8005dd4:	4299      	cmp	r1, r3
 8005dd6:	dd40      	ble.n	8005e5a <_printf_float+0x1b2>
 8005dd8:	f1a9 0902 	sub.w	r9, r9, #2
 8005ddc:	fa5f f989 	uxtb.w	r9, r9
 8005de0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005de4:	d81f      	bhi.n	8005e26 <_printf_float+0x17e>
 8005de6:	464a      	mov	r2, r9
 8005de8:	3901      	subs	r1, #1
 8005dea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005dee:	910d      	str	r1, [sp, #52]	; 0x34
 8005df0:	f7ff ff1b 	bl	8005c2a <__exponent>
 8005df4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005df6:	4682      	mov	sl, r0
 8005df8:	1813      	adds	r3, r2, r0
 8005dfa:	2a01      	cmp	r2, #1
 8005dfc:	6123      	str	r3, [r4, #16]
 8005dfe:	dc02      	bgt.n	8005e06 <_printf_float+0x15e>
 8005e00:	6822      	ldr	r2, [r4, #0]
 8005e02:	07d2      	lsls	r2, r2, #31
 8005e04:	d501      	bpl.n	8005e0a <_printf_float+0x162>
 8005e06:	3301      	adds	r3, #1
 8005e08:	6123      	str	r3, [r4, #16]
 8005e0a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d09b      	beq.n	8005d4a <_printf_float+0xa2>
 8005e12:	232d      	movs	r3, #45	; 0x2d
 8005e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e18:	e797      	b.n	8005d4a <_printf_float+0xa2>
 8005e1a:	2947      	cmp	r1, #71	; 0x47
 8005e1c:	d1bc      	bne.n	8005d98 <_printf_float+0xf0>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1ba      	bne.n	8005d98 <_printf_float+0xf0>
 8005e22:	2301      	movs	r3, #1
 8005e24:	e7b7      	b.n	8005d96 <_printf_float+0xee>
 8005e26:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8005e2a:	d118      	bne.n	8005e5e <_printf_float+0x1b6>
 8005e2c:	2900      	cmp	r1, #0
 8005e2e:	6863      	ldr	r3, [r4, #4]
 8005e30:	dd0b      	ble.n	8005e4a <_printf_float+0x1a2>
 8005e32:	6121      	str	r1, [r4, #16]
 8005e34:	b913      	cbnz	r3, 8005e3c <_printf_float+0x194>
 8005e36:	6822      	ldr	r2, [r4, #0]
 8005e38:	07d0      	lsls	r0, r2, #31
 8005e3a:	d502      	bpl.n	8005e42 <_printf_float+0x19a>
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	440b      	add	r3, r1
 8005e40:	6123      	str	r3, [r4, #16]
 8005e42:	f04f 0a00 	mov.w	sl, #0
 8005e46:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e48:	e7df      	b.n	8005e0a <_printf_float+0x162>
 8005e4a:	b913      	cbnz	r3, 8005e52 <_printf_float+0x1aa>
 8005e4c:	6822      	ldr	r2, [r4, #0]
 8005e4e:	07d2      	lsls	r2, r2, #31
 8005e50:	d501      	bpl.n	8005e56 <_printf_float+0x1ae>
 8005e52:	3302      	adds	r3, #2
 8005e54:	e7f4      	b.n	8005e40 <_printf_float+0x198>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e7f2      	b.n	8005e40 <_printf_float+0x198>
 8005e5a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e60:	4299      	cmp	r1, r3
 8005e62:	db05      	blt.n	8005e70 <_printf_float+0x1c8>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	6121      	str	r1, [r4, #16]
 8005e68:	07d8      	lsls	r0, r3, #31
 8005e6a:	d5ea      	bpl.n	8005e42 <_printf_float+0x19a>
 8005e6c:	1c4b      	adds	r3, r1, #1
 8005e6e:	e7e7      	b.n	8005e40 <_printf_float+0x198>
 8005e70:	2900      	cmp	r1, #0
 8005e72:	bfcc      	ite	gt
 8005e74:	2201      	movgt	r2, #1
 8005e76:	f1c1 0202 	rsble	r2, r1, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	e7e0      	b.n	8005e40 <_printf_float+0x198>
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	055a      	lsls	r2, r3, #21
 8005e82:	d407      	bmi.n	8005e94 <_printf_float+0x1ec>
 8005e84:	6923      	ldr	r3, [r4, #16]
 8005e86:	4642      	mov	r2, r8
 8005e88:	4631      	mov	r1, r6
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	47b8      	blx	r7
 8005e8e:	3001      	adds	r0, #1
 8005e90:	d12b      	bne.n	8005eea <_printf_float+0x242>
 8005e92:	e764      	b.n	8005d5e <_printf_float+0xb6>
 8005e94:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005e98:	f240 80dd 	bls.w	8006056 <_printf_float+0x3ae>
 8005e9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	f7fa fd8a 	bl	80009bc <__aeabi_dcmpeq>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d033      	beq.n	8005f14 <_printf_float+0x26c>
 8005eac:	2301      	movs	r3, #1
 8005eae:	4631      	mov	r1, r6
 8005eb0:	4628      	mov	r0, r5
 8005eb2:	4a35      	ldr	r2, [pc, #212]	; (8005f88 <_printf_float+0x2e0>)
 8005eb4:	47b8      	blx	r7
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	f43f af51 	beq.w	8005d5e <_printf_float+0xb6>
 8005ebc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	db02      	blt.n	8005eca <_printf_float+0x222>
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	07d8      	lsls	r0, r3, #31
 8005ec8:	d50f      	bpl.n	8005eea <_printf_float+0x242>
 8005eca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ece:	4631      	mov	r1, r6
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	47b8      	blx	r7
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	f43f af42 	beq.w	8005d5e <_printf_float+0xb6>
 8005eda:	f04f 0800 	mov.w	r8, #0
 8005ede:	f104 091a 	add.w	r9, r4, #26
 8005ee2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	4543      	cmp	r3, r8
 8005ee8:	dc09      	bgt.n	8005efe <_printf_float+0x256>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	079b      	lsls	r3, r3, #30
 8005eee:	f100 8102 	bmi.w	80060f6 <_printf_float+0x44e>
 8005ef2:	68e0      	ldr	r0, [r4, #12]
 8005ef4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ef6:	4298      	cmp	r0, r3
 8005ef8:	bfb8      	it	lt
 8005efa:	4618      	movlt	r0, r3
 8005efc:	e731      	b.n	8005d62 <_printf_float+0xba>
 8005efe:	2301      	movs	r3, #1
 8005f00:	464a      	mov	r2, r9
 8005f02:	4631      	mov	r1, r6
 8005f04:	4628      	mov	r0, r5
 8005f06:	47b8      	blx	r7
 8005f08:	3001      	adds	r0, #1
 8005f0a:	f43f af28 	beq.w	8005d5e <_printf_float+0xb6>
 8005f0e:	f108 0801 	add.w	r8, r8, #1
 8005f12:	e7e6      	b.n	8005ee2 <_printf_float+0x23a>
 8005f14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	dc38      	bgt.n	8005f8c <_printf_float+0x2e4>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	4631      	mov	r1, r6
 8005f1e:	4628      	mov	r0, r5
 8005f20:	4a19      	ldr	r2, [pc, #100]	; (8005f88 <_printf_float+0x2e0>)
 8005f22:	47b8      	blx	r7
 8005f24:	3001      	adds	r0, #1
 8005f26:	f43f af1a 	beq.w	8005d5e <_printf_float+0xb6>
 8005f2a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	d102      	bne.n	8005f38 <_printf_float+0x290>
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	07d9      	lsls	r1, r3, #31
 8005f36:	d5d8      	bpl.n	8005eea <_printf_float+0x242>
 8005f38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f3c:	4631      	mov	r1, r6
 8005f3e:	4628      	mov	r0, r5
 8005f40:	47b8      	blx	r7
 8005f42:	3001      	adds	r0, #1
 8005f44:	f43f af0b 	beq.w	8005d5e <_printf_float+0xb6>
 8005f48:	f04f 0900 	mov.w	r9, #0
 8005f4c:	f104 0a1a 	add.w	sl, r4, #26
 8005f50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f52:	425b      	negs	r3, r3
 8005f54:	454b      	cmp	r3, r9
 8005f56:	dc01      	bgt.n	8005f5c <_printf_float+0x2b4>
 8005f58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f5a:	e794      	b.n	8005e86 <_printf_float+0x1de>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	4652      	mov	r2, sl
 8005f60:	4631      	mov	r1, r6
 8005f62:	4628      	mov	r0, r5
 8005f64:	47b8      	blx	r7
 8005f66:	3001      	adds	r0, #1
 8005f68:	f43f aef9 	beq.w	8005d5e <_printf_float+0xb6>
 8005f6c:	f109 0901 	add.w	r9, r9, #1
 8005f70:	e7ee      	b.n	8005f50 <_printf_float+0x2a8>
 8005f72:	bf00      	nop
 8005f74:	7fefffff 	.word	0x7fefffff
 8005f78:	080089e8 	.word	0x080089e8
 8005f7c:	080089ec 	.word	0x080089ec
 8005f80:	080089f4 	.word	0x080089f4
 8005f84:	080089f0 	.word	0x080089f0
 8005f88:	080089f8 	.word	0x080089f8
 8005f8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005f8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f90:	429a      	cmp	r2, r3
 8005f92:	bfa8      	it	ge
 8005f94:	461a      	movge	r2, r3
 8005f96:	2a00      	cmp	r2, #0
 8005f98:	4691      	mov	r9, r2
 8005f9a:	dc37      	bgt.n	800600c <_printf_float+0x364>
 8005f9c:	f04f 0b00 	mov.w	fp, #0
 8005fa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fa4:	f104 021a 	add.w	r2, r4, #26
 8005fa8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005fac:	ebaa 0309 	sub.w	r3, sl, r9
 8005fb0:	455b      	cmp	r3, fp
 8005fb2:	dc33      	bgt.n	800601c <_printf_float+0x374>
 8005fb4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	db3b      	blt.n	8006034 <_printf_float+0x38c>
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	07da      	lsls	r2, r3, #31
 8005fc0:	d438      	bmi.n	8006034 <_printf_float+0x38c>
 8005fc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fc4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005fc6:	eba3 020a 	sub.w	r2, r3, sl
 8005fca:	eba3 0901 	sub.w	r9, r3, r1
 8005fce:	4591      	cmp	r9, r2
 8005fd0:	bfa8      	it	ge
 8005fd2:	4691      	movge	r9, r2
 8005fd4:	f1b9 0f00 	cmp.w	r9, #0
 8005fd8:	dc34      	bgt.n	8006044 <_printf_float+0x39c>
 8005fda:	f04f 0800 	mov.w	r8, #0
 8005fde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fe2:	f104 0a1a 	add.w	sl, r4, #26
 8005fe6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005fea:	1a9b      	subs	r3, r3, r2
 8005fec:	eba3 0309 	sub.w	r3, r3, r9
 8005ff0:	4543      	cmp	r3, r8
 8005ff2:	f77f af7a 	ble.w	8005eea <_printf_float+0x242>
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	4652      	mov	r2, sl
 8005ffa:	4631      	mov	r1, r6
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	47b8      	blx	r7
 8006000:	3001      	adds	r0, #1
 8006002:	f43f aeac 	beq.w	8005d5e <_printf_float+0xb6>
 8006006:	f108 0801 	add.w	r8, r8, #1
 800600a:	e7ec      	b.n	8005fe6 <_printf_float+0x33e>
 800600c:	4613      	mov	r3, r2
 800600e:	4631      	mov	r1, r6
 8006010:	4642      	mov	r2, r8
 8006012:	4628      	mov	r0, r5
 8006014:	47b8      	blx	r7
 8006016:	3001      	adds	r0, #1
 8006018:	d1c0      	bne.n	8005f9c <_printf_float+0x2f4>
 800601a:	e6a0      	b.n	8005d5e <_printf_float+0xb6>
 800601c:	2301      	movs	r3, #1
 800601e:	4631      	mov	r1, r6
 8006020:	4628      	mov	r0, r5
 8006022:	920b      	str	r2, [sp, #44]	; 0x2c
 8006024:	47b8      	blx	r7
 8006026:	3001      	adds	r0, #1
 8006028:	f43f ae99 	beq.w	8005d5e <_printf_float+0xb6>
 800602c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800602e:	f10b 0b01 	add.w	fp, fp, #1
 8006032:	e7b9      	b.n	8005fa8 <_printf_float+0x300>
 8006034:	4631      	mov	r1, r6
 8006036:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800603a:	4628      	mov	r0, r5
 800603c:	47b8      	blx	r7
 800603e:	3001      	adds	r0, #1
 8006040:	d1bf      	bne.n	8005fc2 <_printf_float+0x31a>
 8006042:	e68c      	b.n	8005d5e <_printf_float+0xb6>
 8006044:	464b      	mov	r3, r9
 8006046:	4631      	mov	r1, r6
 8006048:	4628      	mov	r0, r5
 800604a:	eb08 020a 	add.w	r2, r8, sl
 800604e:	47b8      	blx	r7
 8006050:	3001      	adds	r0, #1
 8006052:	d1c2      	bne.n	8005fda <_printf_float+0x332>
 8006054:	e683      	b.n	8005d5e <_printf_float+0xb6>
 8006056:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006058:	2a01      	cmp	r2, #1
 800605a:	dc01      	bgt.n	8006060 <_printf_float+0x3b8>
 800605c:	07db      	lsls	r3, r3, #31
 800605e:	d537      	bpl.n	80060d0 <_printf_float+0x428>
 8006060:	2301      	movs	r3, #1
 8006062:	4642      	mov	r2, r8
 8006064:	4631      	mov	r1, r6
 8006066:	4628      	mov	r0, r5
 8006068:	47b8      	blx	r7
 800606a:	3001      	adds	r0, #1
 800606c:	f43f ae77 	beq.w	8005d5e <_printf_float+0xb6>
 8006070:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006074:	4631      	mov	r1, r6
 8006076:	4628      	mov	r0, r5
 8006078:	47b8      	blx	r7
 800607a:	3001      	adds	r0, #1
 800607c:	f43f ae6f 	beq.w	8005d5e <_printf_float+0xb6>
 8006080:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006084:	2200      	movs	r2, #0
 8006086:	2300      	movs	r3, #0
 8006088:	f7fa fc98 	bl	80009bc <__aeabi_dcmpeq>
 800608c:	b9d8      	cbnz	r0, 80060c6 <_printf_float+0x41e>
 800608e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006090:	f108 0201 	add.w	r2, r8, #1
 8006094:	3b01      	subs	r3, #1
 8006096:	4631      	mov	r1, r6
 8006098:	4628      	mov	r0, r5
 800609a:	47b8      	blx	r7
 800609c:	3001      	adds	r0, #1
 800609e:	d10e      	bne.n	80060be <_printf_float+0x416>
 80060a0:	e65d      	b.n	8005d5e <_printf_float+0xb6>
 80060a2:	2301      	movs	r3, #1
 80060a4:	464a      	mov	r2, r9
 80060a6:	4631      	mov	r1, r6
 80060a8:	4628      	mov	r0, r5
 80060aa:	47b8      	blx	r7
 80060ac:	3001      	adds	r0, #1
 80060ae:	f43f ae56 	beq.w	8005d5e <_printf_float+0xb6>
 80060b2:	f108 0801 	add.w	r8, r8, #1
 80060b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060b8:	3b01      	subs	r3, #1
 80060ba:	4543      	cmp	r3, r8
 80060bc:	dcf1      	bgt.n	80060a2 <_printf_float+0x3fa>
 80060be:	4653      	mov	r3, sl
 80060c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80060c4:	e6e0      	b.n	8005e88 <_printf_float+0x1e0>
 80060c6:	f04f 0800 	mov.w	r8, #0
 80060ca:	f104 091a 	add.w	r9, r4, #26
 80060ce:	e7f2      	b.n	80060b6 <_printf_float+0x40e>
 80060d0:	2301      	movs	r3, #1
 80060d2:	4642      	mov	r2, r8
 80060d4:	e7df      	b.n	8006096 <_printf_float+0x3ee>
 80060d6:	2301      	movs	r3, #1
 80060d8:	464a      	mov	r2, r9
 80060da:	4631      	mov	r1, r6
 80060dc:	4628      	mov	r0, r5
 80060de:	47b8      	blx	r7
 80060e0:	3001      	adds	r0, #1
 80060e2:	f43f ae3c 	beq.w	8005d5e <_printf_float+0xb6>
 80060e6:	f108 0801 	add.w	r8, r8, #1
 80060ea:	68e3      	ldr	r3, [r4, #12]
 80060ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80060ee:	1a5b      	subs	r3, r3, r1
 80060f0:	4543      	cmp	r3, r8
 80060f2:	dcf0      	bgt.n	80060d6 <_printf_float+0x42e>
 80060f4:	e6fd      	b.n	8005ef2 <_printf_float+0x24a>
 80060f6:	f04f 0800 	mov.w	r8, #0
 80060fa:	f104 0919 	add.w	r9, r4, #25
 80060fe:	e7f4      	b.n	80060ea <_printf_float+0x442>

08006100 <_printf_common>:
 8006100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006104:	4616      	mov	r6, r2
 8006106:	4699      	mov	r9, r3
 8006108:	688a      	ldr	r2, [r1, #8]
 800610a:	690b      	ldr	r3, [r1, #16]
 800610c:	4607      	mov	r7, r0
 800610e:	4293      	cmp	r3, r2
 8006110:	bfb8      	it	lt
 8006112:	4613      	movlt	r3, r2
 8006114:	6033      	str	r3, [r6, #0]
 8006116:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800611a:	460c      	mov	r4, r1
 800611c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006120:	b10a      	cbz	r2, 8006126 <_printf_common+0x26>
 8006122:	3301      	adds	r3, #1
 8006124:	6033      	str	r3, [r6, #0]
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	0699      	lsls	r1, r3, #26
 800612a:	bf42      	ittt	mi
 800612c:	6833      	ldrmi	r3, [r6, #0]
 800612e:	3302      	addmi	r3, #2
 8006130:	6033      	strmi	r3, [r6, #0]
 8006132:	6825      	ldr	r5, [r4, #0]
 8006134:	f015 0506 	ands.w	r5, r5, #6
 8006138:	d106      	bne.n	8006148 <_printf_common+0x48>
 800613a:	f104 0a19 	add.w	sl, r4, #25
 800613e:	68e3      	ldr	r3, [r4, #12]
 8006140:	6832      	ldr	r2, [r6, #0]
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	42ab      	cmp	r3, r5
 8006146:	dc28      	bgt.n	800619a <_printf_common+0x9a>
 8006148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800614c:	1e13      	subs	r3, r2, #0
 800614e:	6822      	ldr	r2, [r4, #0]
 8006150:	bf18      	it	ne
 8006152:	2301      	movne	r3, #1
 8006154:	0692      	lsls	r2, r2, #26
 8006156:	d42d      	bmi.n	80061b4 <_printf_common+0xb4>
 8006158:	4649      	mov	r1, r9
 800615a:	4638      	mov	r0, r7
 800615c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006160:	47c0      	blx	r8
 8006162:	3001      	adds	r0, #1
 8006164:	d020      	beq.n	80061a8 <_printf_common+0xa8>
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	68e5      	ldr	r5, [r4, #12]
 800616a:	f003 0306 	and.w	r3, r3, #6
 800616e:	2b04      	cmp	r3, #4
 8006170:	bf18      	it	ne
 8006172:	2500      	movne	r5, #0
 8006174:	6832      	ldr	r2, [r6, #0]
 8006176:	f04f 0600 	mov.w	r6, #0
 800617a:	68a3      	ldr	r3, [r4, #8]
 800617c:	bf08      	it	eq
 800617e:	1aad      	subeq	r5, r5, r2
 8006180:	6922      	ldr	r2, [r4, #16]
 8006182:	bf08      	it	eq
 8006184:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006188:	4293      	cmp	r3, r2
 800618a:	bfc4      	itt	gt
 800618c:	1a9b      	subgt	r3, r3, r2
 800618e:	18ed      	addgt	r5, r5, r3
 8006190:	341a      	adds	r4, #26
 8006192:	42b5      	cmp	r5, r6
 8006194:	d11a      	bne.n	80061cc <_printf_common+0xcc>
 8006196:	2000      	movs	r0, #0
 8006198:	e008      	b.n	80061ac <_printf_common+0xac>
 800619a:	2301      	movs	r3, #1
 800619c:	4652      	mov	r2, sl
 800619e:	4649      	mov	r1, r9
 80061a0:	4638      	mov	r0, r7
 80061a2:	47c0      	blx	r8
 80061a4:	3001      	adds	r0, #1
 80061a6:	d103      	bne.n	80061b0 <_printf_common+0xb0>
 80061a8:	f04f 30ff 	mov.w	r0, #4294967295
 80061ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b0:	3501      	adds	r5, #1
 80061b2:	e7c4      	b.n	800613e <_printf_common+0x3e>
 80061b4:	2030      	movs	r0, #48	; 0x30
 80061b6:	18e1      	adds	r1, r4, r3
 80061b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061bc:	1c5a      	adds	r2, r3, #1
 80061be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061c2:	4422      	add	r2, r4
 80061c4:	3302      	adds	r3, #2
 80061c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061ca:	e7c5      	b.n	8006158 <_printf_common+0x58>
 80061cc:	2301      	movs	r3, #1
 80061ce:	4622      	mov	r2, r4
 80061d0:	4649      	mov	r1, r9
 80061d2:	4638      	mov	r0, r7
 80061d4:	47c0      	blx	r8
 80061d6:	3001      	adds	r0, #1
 80061d8:	d0e6      	beq.n	80061a8 <_printf_common+0xa8>
 80061da:	3601      	adds	r6, #1
 80061dc:	e7d9      	b.n	8006192 <_printf_common+0x92>
	...

080061e0 <_printf_i>:
 80061e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061e4:	7e0f      	ldrb	r7, [r1, #24]
 80061e6:	4691      	mov	r9, r2
 80061e8:	2f78      	cmp	r7, #120	; 0x78
 80061ea:	4680      	mov	r8, r0
 80061ec:	460c      	mov	r4, r1
 80061ee:	469a      	mov	sl, r3
 80061f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061f6:	d807      	bhi.n	8006208 <_printf_i+0x28>
 80061f8:	2f62      	cmp	r7, #98	; 0x62
 80061fa:	d80a      	bhi.n	8006212 <_printf_i+0x32>
 80061fc:	2f00      	cmp	r7, #0
 80061fe:	f000 80d9 	beq.w	80063b4 <_printf_i+0x1d4>
 8006202:	2f58      	cmp	r7, #88	; 0x58
 8006204:	f000 80a4 	beq.w	8006350 <_printf_i+0x170>
 8006208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800620c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006210:	e03a      	b.n	8006288 <_printf_i+0xa8>
 8006212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006216:	2b15      	cmp	r3, #21
 8006218:	d8f6      	bhi.n	8006208 <_printf_i+0x28>
 800621a:	a101      	add	r1, pc, #4	; (adr r1, 8006220 <_printf_i+0x40>)
 800621c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006220:	08006279 	.word	0x08006279
 8006224:	0800628d 	.word	0x0800628d
 8006228:	08006209 	.word	0x08006209
 800622c:	08006209 	.word	0x08006209
 8006230:	08006209 	.word	0x08006209
 8006234:	08006209 	.word	0x08006209
 8006238:	0800628d 	.word	0x0800628d
 800623c:	08006209 	.word	0x08006209
 8006240:	08006209 	.word	0x08006209
 8006244:	08006209 	.word	0x08006209
 8006248:	08006209 	.word	0x08006209
 800624c:	0800639b 	.word	0x0800639b
 8006250:	080062bd 	.word	0x080062bd
 8006254:	0800637d 	.word	0x0800637d
 8006258:	08006209 	.word	0x08006209
 800625c:	08006209 	.word	0x08006209
 8006260:	080063bd 	.word	0x080063bd
 8006264:	08006209 	.word	0x08006209
 8006268:	080062bd 	.word	0x080062bd
 800626c:	08006209 	.word	0x08006209
 8006270:	08006209 	.word	0x08006209
 8006274:	08006385 	.word	0x08006385
 8006278:	682b      	ldr	r3, [r5, #0]
 800627a:	1d1a      	adds	r2, r3, #4
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	602a      	str	r2, [r5, #0]
 8006280:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006288:	2301      	movs	r3, #1
 800628a:	e0a4      	b.n	80063d6 <_printf_i+0x1f6>
 800628c:	6820      	ldr	r0, [r4, #0]
 800628e:	6829      	ldr	r1, [r5, #0]
 8006290:	0606      	lsls	r6, r0, #24
 8006292:	f101 0304 	add.w	r3, r1, #4
 8006296:	d50a      	bpl.n	80062ae <_printf_i+0xce>
 8006298:	680e      	ldr	r6, [r1, #0]
 800629a:	602b      	str	r3, [r5, #0]
 800629c:	2e00      	cmp	r6, #0
 800629e:	da03      	bge.n	80062a8 <_printf_i+0xc8>
 80062a0:	232d      	movs	r3, #45	; 0x2d
 80062a2:	4276      	negs	r6, r6
 80062a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062a8:	230a      	movs	r3, #10
 80062aa:	485e      	ldr	r0, [pc, #376]	; (8006424 <_printf_i+0x244>)
 80062ac:	e019      	b.n	80062e2 <_printf_i+0x102>
 80062ae:	680e      	ldr	r6, [r1, #0]
 80062b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062b4:	602b      	str	r3, [r5, #0]
 80062b6:	bf18      	it	ne
 80062b8:	b236      	sxthne	r6, r6
 80062ba:	e7ef      	b.n	800629c <_printf_i+0xbc>
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	6820      	ldr	r0, [r4, #0]
 80062c0:	1d19      	adds	r1, r3, #4
 80062c2:	6029      	str	r1, [r5, #0]
 80062c4:	0601      	lsls	r1, r0, #24
 80062c6:	d501      	bpl.n	80062cc <_printf_i+0xec>
 80062c8:	681e      	ldr	r6, [r3, #0]
 80062ca:	e002      	b.n	80062d2 <_printf_i+0xf2>
 80062cc:	0646      	lsls	r6, r0, #25
 80062ce:	d5fb      	bpl.n	80062c8 <_printf_i+0xe8>
 80062d0:	881e      	ldrh	r6, [r3, #0]
 80062d2:	2f6f      	cmp	r7, #111	; 0x6f
 80062d4:	bf0c      	ite	eq
 80062d6:	2308      	moveq	r3, #8
 80062d8:	230a      	movne	r3, #10
 80062da:	4852      	ldr	r0, [pc, #328]	; (8006424 <_printf_i+0x244>)
 80062dc:	2100      	movs	r1, #0
 80062de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062e2:	6865      	ldr	r5, [r4, #4]
 80062e4:	2d00      	cmp	r5, #0
 80062e6:	bfa8      	it	ge
 80062e8:	6821      	ldrge	r1, [r4, #0]
 80062ea:	60a5      	str	r5, [r4, #8]
 80062ec:	bfa4      	itt	ge
 80062ee:	f021 0104 	bicge.w	r1, r1, #4
 80062f2:	6021      	strge	r1, [r4, #0]
 80062f4:	b90e      	cbnz	r6, 80062fa <_printf_i+0x11a>
 80062f6:	2d00      	cmp	r5, #0
 80062f8:	d04d      	beq.n	8006396 <_printf_i+0x1b6>
 80062fa:	4615      	mov	r5, r2
 80062fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8006300:	fb03 6711 	mls	r7, r3, r1, r6
 8006304:	5dc7      	ldrb	r7, [r0, r7]
 8006306:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800630a:	4637      	mov	r7, r6
 800630c:	42bb      	cmp	r3, r7
 800630e:	460e      	mov	r6, r1
 8006310:	d9f4      	bls.n	80062fc <_printf_i+0x11c>
 8006312:	2b08      	cmp	r3, #8
 8006314:	d10b      	bne.n	800632e <_printf_i+0x14e>
 8006316:	6823      	ldr	r3, [r4, #0]
 8006318:	07de      	lsls	r6, r3, #31
 800631a:	d508      	bpl.n	800632e <_printf_i+0x14e>
 800631c:	6923      	ldr	r3, [r4, #16]
 800631e:	6861      	ldr	r1, [r4, #4]
 8006320:	4299      	cmp	r1, r3
 8006322:	bfde      	ittt	le
 8006324:	2330      	movle	r3, #48	; 0x30
 8006326:	f805 3c01 	strble.w	r3, [r5, #-1]
 800632a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800632e:	1b52      	subs	r2, r2, r5
 8006330:	6122      	str	r2, [r4, #16]
 8006332:	464b      	mov	r3, r9
 8006334:	4621      	mov	r1, r4
 8006336:	4640      	mov	r0, r8
 8006338:	f8cd a000 	str.w	sl, [sp]
 800633c:	aa03      	add	r2, sp, #12
 800633e:	f7ff fedf 	bl	8006100 <_printf_common>
 8006342:	3001      	adds	r0, #1
 8006344:	d14c      	bne.n	80063e0 <_printf_i+0x200>
 8006346:	f04f 30ff 	mov.w	r0, #4294967295
 800634a:	b004      	add	sp, #16
 800634c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006350:	4834      	ldr	r0, [pc, #208]	; (8006424 <_printf_i+0x244>)
 8006352:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006356:	6829      	ldr	r1, [r5, #0]
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	f851 6b04 	ldr.w	r6, [r1], #4
 800635e:	6029      	str	r1, [r5, #0]
 8006360:	061d      	lsls	r5, r3, #24
 8006362:	d514      	bpl.n	800638e <_printf_i+0x1ae>
 8006364:	07df      	lsls	r7, r3, #31
 8006366:	bf44      	itt	mi
 8006368:	f043 0320 	orrmi.w	r3, r3, #32
 800636c:	6023      	strmi	r3, [r4, #0]
 800636e:	b91e      	cbnz	r6, 8006378 <_printf_i+0x198>
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	f023 0320 	bic.w	r3, r3, #32
 8006376:	6023      	str	r3, [r4, #0]
 8006378:	2310      	movs	r3, #16
 800637a:	e7af      	b.n	80062dc <_printf_i+0xfc>
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	f043 0320 	orr.w	r3, r3, #32
 8006382:	6023      	str	r3, [r4, #0]
 8006384:	2378      	movs	r3, #120	; 0x78
 8006386:	4828      	ldr	r0, [pc, #160]	; (8006428 <_printf_i+0x248>)
 8006388:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800638c:	e7e3      	b.n	8006356 <_printf_i+0x176>
 800638e:	0659      	lsls	r1, r3, #25
 8006390:	bf48      	it	mi
 8006392:	b2b6      	uxthmi	r6, r6
 8006394:	e7e6      	b.n	8006364 <_printf_i+0x184>
 8006396:	4615      	mov	r5, r2
 8006398:	e7bb      	b.n	8006312 <_printf_i+0x132>
 800639a:	682b      	ldr	r3, [r5, #0]
 800639c:	6826      	ldr	r6, [r4, #0]
 800639e:	1d18      	adds	r0, r3, #4
 80063a0:	6961      	ldr	r1, [r4, #20]
 80063a2:	6028      	str	r0, [r5, #0]
 80063a4:	0635      	lsls	r5, r6, #24
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	d501      	bpl.n	80063ae <_printf_i+0x1ce>
 80063aa:	6019      	str	r1, [r3, #0]
 80063ac:	e002      	b.n	80063b4 <_printf_i+0x1d4>
 80063ae:	0670      	lsls	r0, r6, #25
 80063b0:	d5fb      	bpl.n	80063aa <_printf_i+0x1ca>
 80063b2:	8019      	strh	r1, [r3, #0]
 80063b4:	2300      	movs	r3, #0
 80063b6:	4615      	mov	r5, r2
 80063b8:	6123      	str	r3, [r4, #16]
 80063ba:	e7ba      	b.n	8006332 <_printf_i+0x152>
 80063bc:	682b      	ldr	r3, [r5, #0]
 80063be:	2100      	movs	r1, #0
 80063c0:	1d1a      	adds	r2, r3, #4
 80063c2:	602a      	str	r2, [r5, #0]
 80063c4:	681d      	ldr	r5, [r3, #0]
 80063c6:	6862      	ldr	r2, [r4, #4]
 80063c8:	4628      	mov	r0, r5
 80063ca:	f000 fef7 	bl	80071bc <memchr>
 80063ce:	b108      	cbz	r0, 80063d4 <_printf_i+0x1f4>
 80063d0:	1b40      	subs	r0, r0, r5
 80063d2:	6060      	str	r0, [r4, #4]
 80063d4:	6863      	ldr	r3, [r4, #4]
 80063d6:	6123      	str	r3, [r4, #16]
 80063d8:	2300      	movs	r3, #0
 80063da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063de:	e7a8      	b.n	8006332 <_printf_i+0x152>
 80063e0:	462a      	mov	r2, r5
 80063e2:	4649      	mov	r1, r9
 80063e4:	4640      	mov	r0, r8
 80063e6:	6923      	ldr	r3, [r4, #16]
 80063e8:	47d0      	blx	sl
 80063ea:	3001      	adds	r0, #1
 80063ec:	d0ab      	beq.n	8006346 <_printf_i+0x166>
 80063ee:	6823      	ldr	r3, [r4, #0]
 80063f0:	079b      	lsls	r3, r3, #30
 80063f2:	d413      	bmi.n	800641c <_printf_i+0x23c>
 80063f4:	68e0      	ldr	r0, [r4, #12]
 80063f6:	9b03      	ldr	r3, [sp, #12]
 80063f8:	4298      	cmp	r0, r3
 80063fa:	bfb8      	it	lt
 80063fc:	4618      	movlt	r0, r3
 80063fe:	e7a4      	b.n	800634a <_printf_i+0x16a>
 8006400:	2301      	movs	r3, #1
 8006402:	4632      	mov	r2, r6
 8006404:	4649      	mov	r1, r9
 8006406:	4640      	mov	r0, r8
 8006408:	47d0      	blx	sl
 800640a:	3001      	adds	r0, #1
 800640c:	d09b      	beq.n	8006346 <_printf_i+0x166>
 800640e:	3501      	adds	r5, #1
 8006410:	68e3      	ldr	r3, [r4, #12]
 8006412:	9903      	ldr	r1, [sp, #12]
 8006414:	1a5b      	subs	r3, r3, r1
 8006416:	42ab      	cmp	r3, r5
 8006418:	dcf2      	bgt.n	8006400 <_printf_i+0x220>
 800641a:	e7eb      	b.n	80063f4 <_printf_i+0x214>
 800641c:	2500      	movs	r5, #0
 800641e:	f104 0619 	add.w	r6, r4, #25
 8006422:	e7f5      	b.n	8006410 <_printf_i+0x230>
 8006424:	080089fa 	.word	0x080089fa
 8006428:	08008a0b 	.word	0x08008a0b

0800642c <siprintf>:
 800642c:	b40e      	push	{r1, r2, r3}
 800642e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006432:	b500      	push	{lr}
 8006434:	b09c      	sub	sp, #112	; 0x70
 8006436:	ab1d      	add	r3, sp, #116	; 0x74
 8006438:	9002      	str	r0, [sp, #8]
 800643a:	9006      	str	r0, [sp, #24]
 800643c:	9107      	str	r1, [sp, #28]
 800643e:	9104      	str	r1, [sp, #16]
 8006440:	4808      	ldr	r0, [pc, #32]	; (8006464 <siprintf+0x38>)
 8006442:	4909      	ldr	r1, [pc, #36]	; (8006468 <siprintf+0x3c>)
 8006444:	f853 2b04 	ldr.w	r2, [r3], #4
 8006448:	9105      	str	r1, [sp, #20]
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	a902      	add	r1, sp, #8
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	f001 fb9e 	bl	8007b90 <_svfiprintf_r>
 8006454:	2200      	movs	r2, #0
 8006456:	9b02      	ldr	r3, [sp, #8]
 8006458:	701a      	strb	r2, [r3, #0]
 800645a:	b01c      	add	sp, #112	; 0x70
 800645c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006460:	b003      	add	sp, #12
 8006462:	4770      	bx	lr
 8006464:	20000024 	.word	0x20000024
 8006468:	ffff0208 	.word	0xffff0208

0800646c <strcat>:
 800646c:	4602      	mov	r2, r0
 800646e:	b510      	push	{r4, lr}
 8006470:	7814      	ldrb	r4, [r2, #0]
 8006472:	4613      	mov	r3, r2
 8006474:	3201      	adds	r2, #1
 8006476:	2c00      	cmp	r4, #0
 8006478:	d1fa      	bne.n	8006470 <strcat+0x4>
 800647a:	3b01      	subs	r3, #1
 800647c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006480:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006484:	2a00      	cmp	r2, #0
 8006486:	d1f9      	bne.n	800647c <strcat+0x10>
 8006488:	bd10      	pop	{r4, pc}

0800648a <strncpy>:
 800648a:	4603      	mov	r3, r0
 800648c:	b510      	push	{r4, lr}
 800648e:	3901      	subs	r1, #1
 8006490:	b132      	cbz	r2, 80064a0 <strncpy+0x16>
 8006492:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006496:	3a01      	subs	r2, #1
 8006498:	f803 4b01 	strb.w	r4, [r3], #1
 800649c:	2c00      	cmp	r4, #0
 800649e:	d1f7      	bne.n	8006490 <strncpy+0x6>
 80064a0:	2100      	movs	r1, #0
 80064a2:	441a      	add	r2, r3
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d100      	bne.n	80064aa <strncpy+0x20>
 80064a8:	bd10      	pop	{r4, pc}
 80064aa:	f803 1b01 	strb.w	r1, [r3], #1
 80064ae:	e7f9      	b.n	80064a4 <strncpy+0x1a>

080064b0 <quorem>:
 80064b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b4:	6903      	ldr	r3, [r0, #16]
 80064b6:	690c      	ldr	r4, [r1, #16]
 80064b8:	4607      	mov	r7, r0
 80064ba:	42a3      	cmp	r3, r4
 80064bc:	f2c0 8082 	blt.w	80065c4 <quorem+0x114>
 80064c0:	3c01      	subs	r4, #1
 80064c2:	f100 0514 	add.w	r5, r0, #20
 80064c6:	f101 0814 	add.w	r8, r1, #20
 80064ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064ce:	9301      	str	r3, [sp, #4]
 80064d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80064d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064d8:	3301      	adds	r3, #1
 80064da:	429a      	cmp	r2, r3
 80064dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80064e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064e8:	d331      	bcc.n	800654e <quorem+0x9e>
 80064ea:	f04f 0e00 	mov.w	lr, #0
 80064ee:	4640      	mov	r0, r8
 80064f0:	46ac      	mov	ip, r5
 80064f2:	46f2      	mov	sl, lr
 80064f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80064f8:	b293      	uxth	r3, r2
 80064fa:	fb06 e303 	mla	r3, r6, r3, lr
 80064fe:	0c12      	lsrs	r2, r2, #16
 8006500:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006504:	b29b      	uxth	r3, r3
 8006506:	fb06 e202 	mla	r2, r6, r2, lr
 800650a:	ebaa 0303 	sub.w	r3, sl, r3
 800650e:	f8dc a000 	ldr.w	sl, [ip]
 8006512:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006516:	fa1f fa8a 	uxth.w	sl, sl
 800651a:	4453      	add	r3, sl
 800651c:	f8dc a000 	ldr.w	sl, [ip]
 8006520:	b292      	uxth	r2, r2
 8006522:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006526:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800652a:	b29b      	uxth	r3, r3
 800652c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006530:	4581      	cmp	r9, r0
 8006532:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006536:	f84c 3b04 	str.w	r3, [ip], #4
 800653a:	d2db      	bcs.n	80064f4 <quorem+0x44>
 800653c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006540:	b92b      	cbnz	r3, 800654e <quorem+0x9e>
 8006542:	9b01      	ldr	r3, [sp, #4]
 8006544:	3b04      	subs	r3, #4
 8006546:	429d      	cmp	r5, r3
 8006548:	461a      	mov	r2, r3
 800654a:	d32f      	bcc.n	80065ac <quorem+0xfc>
 800654c:	613c      	str	r4, [r7, #16]
 800654e:	4638      	mov	r0, r7
 8006550:	f001 f8ce 	bl	80076f0 <__mcmp>
 8006554:	2800      	cmp	r0, #0
 8006556:	db25      	blt.n	80065a4 <quorem+0xf4>
 8006558:	4628      	mov	r0, r5
 800655a:	f04f 0c00 	mov.w	ip, #0
 800655e:	3601      	adds	r6, #1
 8006560:	f858 1b04 	ldr.w	r1, [r8], #4
 8006564:	f8d0 e000 	ldr.w	lr, [r0]
 8006568:	b28b      	uxth	r3, r1
 800656a:	ebac 0303 	sub.w	r3, ip, r3
 800656e:	fa1f f28e 	uxth.w	r2, lr
 8006572:	4413      	add	r3, r2
 8006574:	0c0a      	lsrs	r2, r1, #16
 8006576:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800657a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800657e:	b29b      	uxth	r3, r3
 8006580:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006584:	45c1      	cmp	r9, r8
 8006586:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800658a:	f840 3b04 	str.w	r3, [r0], #4
 800658e:	d2e7      	bcs.n	8006560 <quorem+0xb0>
 8006590:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006594:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006598:	b922      	cbnz	r2, 80065a4 <quorem+0xf4>
 800659a:	3b04      	subs	r3, #4
 800659c:	429d      	cmp	r5, r3
 800659e:	461a      	mov	r2, r3
 80065a0:	d30a      	bcc.n	80065b8 <quorem+0x108>
 80065a2:	613c      	str	r4, [r7, #16]
 80065a4:	4630      	mov	r0, r6
 80065a6:	b003      	add	sp, #12
 80065a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ac:	6812      	ldr	r2, [r2, #0]
 80065ae:	3b04      	subs	r3, #4
 80065b0:	2a00      	cmp	r2, #0
 80065b2:	d1cb      	bne.n	800654c <quorem+0x9c>
 80065b4:	3c01      	subs	r4, #1
 80065b6:	e7c6      	b.n	8006546 <quorem+0x96>
 80065b8:	6812      	ldr	r2, [r2, #0]
 80065ba:	3b04      	subs	r3, #4
 80065bc:	2a00      	cmp	r2, #0
 80065be:	d1f0      	bne.n	80065a2 <quorem+0xf2>
 80065c0:	3c01      	subs	r4, #1
 80065c2:	e7eb      	b.n	800659c <quorem+0xec>
 80065c4:	2000      	movs	r0, #0
 80065c6:	e7ee      	b.n	80065a6 <quorem+0xf6>

080065c8 <_dtoa_r>:
 80065c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	4616      	mov	r6, r2
 80065ce:	461f      	mov	r7, r3
 80065d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80065d2:	b099      	sub	sp, #100	; 0x64
 80065d4:	4605      	mov	r5, r0
 80065d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80065da:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80065de:	b974      	cbnz	r4, 80065fe <_dtoa_r+0x36>
 80065e0:	2010      	movs	r0, #16
 80065e2:	f000 fde3 	bl	80071ac <malloc>
 80065e6:	4602      	mov	r2, r0
 80065e8:	6268      	str	r0, [r5, #36]	; 0x24
 80065ea:	b920      	cbnz	r0, 80065f6 <_dtoa_r+0x2e>
 80065ec:	21ea      	movs	r1, #234	; 0xea
 80065ee:	4ba8      	ldr	r3, [pc, #672]	; (8006890 <_dtoa_r+0x2c8>)
 80065f0:	48a8      	ldr	r0, [pc, #672]	; (8006894 <_dtoa_r+0x2cc>)
 80065f2:	f001 fbdd 	bl	8007db0 <__assert_func>
 80065f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80065fa:	6004      	str	r4, [r0, #0]
 80065fc:	60c4      	str	r4, [r0, #12]
 80065fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006600:	6819      	ldr	r1, [r3, #0]
 8006602:	b151      	cbz	r1, 800661a <_dtoa_r+0x52>
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	2301      	movs	r3, #1
 8006608:	4093      	lsls	r3, r2
 800660a:	604a      	str	r2, [r1, #4]
 800660c:	608b      	str	r3, [r1, #8]
 800660e:	4628      	mov	r0, r5
 8006610:	f000 fe30 	bl	8007274 <_Bfree>
 8006614:	2200      	movs	r2, #0
 8006616:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	1e3b      	subs	r3, r7, #0
 800661c:	bfaf      	iteee	ge
 800661e:	2300      	movge	r3, #0
 8006620:	2201      	movlt	r2, #1
 8006622:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006626:	9305      	strlt	r3, [sp, #20]
 8006628:	bfa8      	it	ge
 800662a:	f8c8 3000 	strge.w	r3, [r8]
 800662e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006632:	4b99      	ldr	r3, [pc, #612]	; (8006898 <_dtoa_r+0x2d0>)
 8006634:	bfb8      	it	lt
 8006636:	f8c8 2000 	strlt.w	r2, [r8]
 800663a:	ea33 0309 	bics.w	r3, r3, r9
 800663e:	d119      	bne.n	8006674 <_dtoa_r+0xac>
 8006640:	f242 730f 	movw	r3, #9999	; 0x270f
 8006644:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006646:	6013      	str	r3, [r2, #0]
 8006648:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800664c:	4333      	orrs	r3, r6
 800664e:	f000 857f 	beq.w	8007150 <_dtoa_r+0xb88>
 8006652:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006654:	b953      	cbnz	r3, 800666c <_dtoa_r+0xa4>
 8006656:	4b91      	ldr	r3, [pc, #580]	; (800689c <_dtoa_r+0x2d4>)
 8006658:	e022      	b.n	80066a0 <_dtoa_r+0xd8>
 800665a:	4b91      	ldr	r3, [pc, #580]	; (80068a0 <_dtoa_r+0x2d8>)
 800665c:	9303      	str	r3, [sp, #12]
 800665e:	3308      	adds	r3, #8
 8006660:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006662:	6013      	str	r3, [r2, #0]
 8006664:	9803      	ldr	r0, [sp, #12]
 8006666:	b019      	add	sp, #100	; 0x64
 8006668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800666c:	4b8b      	ldr	r3, [pc, #556]	; (800689c <_dtoa_r+0x2d4>)
 800666e:	9303      	str	r3, [sp, #12]
 8006670:	3303      	adds	r3, #3
 8006672:	e7f5      	b.n	8006660 <_dtoa_r+0x98>
 8006674:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006678:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800667c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006680:	2200      	movs	r2, #0
 8006682:	2300      	movs	r3, #0
 8006684:	f7fa f99a 	bl	80009bc <__aeabi_dcmpeq>
 8006688:	4680      	mov	r8, r0
 800668a:	b158      	cbz	r0, 80066a4 <_dtoa_r+0xdc>
 800668c:	2301      	movs	r3, #1
 800668e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 8558 	beq.w	800714a <_dtoa_r+0xb82>
 800669a:	4882      	ldr	r0, [pc, #520]	; (80068a4 <_dtoa_r+0x2dc>)
 800669c:	6018      	str	r0, [r3, #0]
 800669e:	1e43      	subs	r3, r0, #1
 80066a0:	9303      	str	r3, [sp, #12]
 80066a2:	e7df      	b.n	8006664 <_dtoa_r+0x9c>
 80066a4:	ab16      	add	r3, sp, #88	; 0x58
 80066a6:	9301      	str	r3, [sp, #4]
 80066a8:	ab17      	add	r3, sp, #92	; 0x5c
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	4628      	mov	r0, r5
 80066ae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80066b2:	f001 f8c5 	bl	8007840 <__d2b>
 80066b6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80066ba:	4683      	mov	fp, r0
 80066bc:	2c00      	cmp	r4, #0
 80066be:	d07f      	beq.n	80067c0 <_dtoa_r+0x1f8>
 80066c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066c6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80066ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066ce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80066d2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80066d6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80066da:	2200      	movs	r2, #0
 80066dc:	4b72      	ldr	r3, [pc, #456]	; (80068a8 <_dtoa_r+0x2e0>)
 80066de:	f7f9 fd4d 	bl	800017c <__aeabi_dsub>
 80066e2:	a365      	add	r3, pc, #404	; (adr r3, 8006878 <_dtoa_r+0x2b0>)
 80066e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e8:	f7f9 ff00 	bl	80004ec <__aeabi_dmul>
 80066ec:	a364      	add	r3, pc, #400	; (adr r3, 8006880 <_dtoa_r+0x2b8>)
 80066ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f2:	f7f9 fd45 	bl	8000180 <__adddf3>
 80066f6:	4606      	mov	r6, r0
 80066f8:	4620      	mov	r0, r4
 80066fa:	460f      	mov	r7, r1
 80066fc:	f7f9 fe8c 	bl	8000418 <__aeabi_i2d>
 8006700:	a361      	add	r3, pc, #388	; (adr r3, 8006888 <_dtoa_r+0x2c0>)
 8006702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006706:	f7f9 fef1 	bl	80004ec <__aeabi_dmul>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	4630      	mov	r0, r6
 8006710:	4639      	mov	r1, r7
 8006712:	f7f9 fd35 	bl	8000180 <__adddf3>
 8006716:	4606      	mov	r6, r0
 8006718:	460f      	mov	r7, r1
 800671a:	f7fa f997 	bl	8000a4c <__aeabi_d2iz>
 800671e:	2200      	movs	r2, #0
 8006720:	4682      	mov	sl, r0
 8006722:	2300      	movs	r3, #0
 8006724:	4630      	mov	r0, r6
 8006726:	4639      	mov	r1, r7
 8006728:	f7fa f952 	bl	80009d0 <__aeabi_dcmplt>
 800672c:	b148      	cbz	r0, 8006742 <_dtoa_r+0x17a>
 800672e:	4650      	mov	r0, sl
 8006730:	f7f9 fe72 	bl	8000418 <__aeabi_i2d>
 8006734:	4632      	mov	r2, r6
 8006736:	463b      	mov	r3, r7
 8006738:	f7fa f940 	bl	80009bc <__aeabi_dcmpeq>
 800673c:	b908      	cbnz	r0, 8006742 <_dtoa_r+0x17a>
 800673e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006742:	f1ba 0f16 	cmp.w	sl, #22
 8006746:	d858      	bhi.n	80067fa <_dtoa_r+0x232>
 8006748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800674c:	4b57      	ldr	r3, [pc, #348]	; (80068ac <_dtoa_r+0x2e4>)
 800674e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	f7fa f93b 	bl	80009d0 <__aeabi_dcmplt>
 800675a:	2800      	cmp	r0, #0
 800675c:	d04f      	beq.n	80067fe <_dtoa_r+0x236>
 800675e:	2300      	movs	r3, #0
 8006760:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006764:	930f      	str	r3, [sp, #60]	; 0x3c
 8006766:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006768:	1b1c      	subs	r4, r3, r4
 800676a:	1e63      	subs	r3, r4, #1
 800676c:	9309      	str	r3, [sp, #36]	; 0x24
 800676e:	bf49      	itett	mi
 8006770:	f1c4 0301 	rsbmi	r3, r4, #1
 8006774:	2300      	movpl	r3, #0
 8006776:	9306      	strmi	r3, [sp, #24]
 8006778:	2300      	movmi	r3, #0
 800677a:	bf54      	ite	pl
 800677c:	9306      	strpl	r3, [sp, #24]
 800677e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006780:	f1ba 0f00 	cmp.w	sl, #0
 8006784:	db3d      	blt.n	8006802 <_dtoa_r+0x23a>
 8006786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006788:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800678c:	4453      	add	r3, sl
 800678e:	9309      	str	r3, [sp, #36]	; 0x24
 8006790:	2300      	movs	r3, #0
 8006792:	930a      	str	r3, [sp, #40]	; 0x28
 8006794:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006796:	2b09      	cmp	r3, #9
 8006798:	f200 808c 	bhi.w	80068b4 <_dtoa_r+0x2ec>
 800679c:	2b05      	cmp	r3, #5
 800679e:	bfc4      	itt	gt
 80067a0:	3b04      	subgt	r3, #4
 80067a2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80067a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067a6:	bfc8      	it	gt
 80067a8:	2400      	movgt	r4, #0
 80067aa:	f1a3 0302 	sub.w	r3, r3, #2
 80067ae:	bfd8      	it	le
 80067b0:	2401      	movle	r4, #1
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	f200 808a 	bhi.w	80068cc <_dtoa_r+0x304>
 80067b8:	e8df f003 	tbb	[pc, r3]
 80067bc:	5b4d4f2d 	.word	0x5b4d4f2d
 80067c0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80067c4:	441c      	add	r4, r3
 80067c6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	bfc3      	ittte	gt
 80067ce:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067d2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80067d6:	fa09 f303 	lslgt.w	r3, r9, r3
 80067da:	f1c3 0320 	rsble	r3, r3, #32
 80067de:	bfc6      	itte	gt
 80067e0:	fa26 f000 	lsrgt.w	r0, r6, r0
 80067e4:	4318      	orrgt	r0, r3
 80067e6:	fa06 f003 	lslle.w	r0, r6, r3
 80067ea:	f7f9 fe05 	bl	80003f8 <__aeabi_ui2d>
 80067ee:	2301      	movs	r3, #1
 80067f0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80067f4:	3c01      	subs	r4, #1
 80067f6:	9313      	str	r3, [sp, #76]	; 0x4c
 80067f8:	e76f      	b.n	80066da <_dtoa_r+0x112>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e7b2      	b.n	8006764 <_dtoa_r+0x19c>
 80067fe:	900f      	str	r0, [sp, #60]	; 0x3c
 8006800:	e7b1      	b.n	8006766 <_dtoa_r+0x19e>
 8006802:	9b06      	ldr	r3, [sp, #24]
 8006804:	eba3 030a 	sub.w	r3, r3, sl
 8006808:	9306      	str	r3, [sp, #24]
 800680a:	f1ca 0300 	rsb	r3, sl, #0
 800680e:	930a      	str	r3, [sp, #40]	; 0x28
 8006810:	2300      	movs	r3, #0
 8006812:	930e      	str	r3, [sp, #56]	; 0x38
 8006814:	e7be      	b.n	8006794 <_dtoa_r+0x1cc>
 8006816:	2300      	movs	r3, #0
 8006818:	930b      	str	r3, [sp, #44]	; 0x2c
 800681a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800681c:	2b00      	cmp	r3, #0
 800681e:	dc58      	bgt.n	80068d2 <_dtoa_r+0x30a>
 8006820:	f04f 0901 	mov.w	r9, #1
 8006824:	464b      	mov	r3, r9
 8006826:	f8cd 9020 	str.w	r9, [sp, #32]
 800682a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800682e:	2200      	movs	r2, #0
 8006830:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006832:	6042      	str	r2, [r0, #4]
 8006834:	2204      	movs	r2, #4
 8006836:	f102 0614 	add.w	r6, r2, #20
 800683a:	429e      	cmp	r6, r3
 800683c:	6841      	ldr	r1, [r0, #4]
 800683e:	d94e      	bls.n	80068de <_dtoa_r+0x316>
 8006840:	4628      	mov	r0, r5
 8006842:	f000 fcd7 	bl	80071f4 <_Balloc>
 8006846:	9003      	str	r0, [sp, #12]
 8006848:	2800      	cmp	r0, #0
 800684a:	d14c      	bne.n	80068e6 <_dtoa_r+0x31e>
 800684c:	4602      	mov	r2, r0
 800684e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006852:	4b17      	ldr	r3, [pc, #92]	; (80068b0 <_dtoa_r+0x2e8>)
 8006854:	e6cc      	b.n	80065f0 <_dtoa_r+0x28>
 8006856:	2301      	movs	r3, #1
 8006858:	e7de      	b.n	8006818 <_dtoa_r+0x250>
 800685a:	2300      	movs	r3, #0
 800685c:	930b      	str	r3, [sp, #44]	; 0x2c
 800685e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006860:	eb0a 0903 	add.w	r9, sl, r3
 8006864:	f109 0301 	add.w	r3, r9, #1
 8006868:	2b01      	cmp	r3, #1
 800686a:	9308      	str	r3, [sp, #32]
 800686c:	bfb8      	it	lt
 800686e:	2301      	movlt	r3, #1
 8006870:	e7dd      	b.n	800682e <_dtoa_r+0x266>
 8006872:	2301      	movs	r3, #1
 8006874:	e7f2      	b.n	800685c <_dtoa_r+0x294>
 8006876:	bf00      	nop
 8006878:	636f4361 	.word	0x636f4361
 800687c:	3fd287a7 	.word	0x3fd287a7
 8006880:	8b60c8b3 	.word	0x8b60c8b3
 8006884:	3fc68a28 	.word	0x3fc68a28
 8006888:	509f79fb 	.word	0x509f79fb
 800688c:	3fd34413 	.word	0x3fd34413
 8006890:	08008a29 	.word	0x08008a29
 8006894:	08008a40 	.word	0x08008a40
 8006898:	7ff00000 	.word	0x7ff00000
 800689c:	08008a25 	.word	0x08008a25
 80068a0:	08008a1c 	.word	0x08008a1c
 80068a4:	080089f9 	.word	0x080089f9
 80068a8:	3ff80000 	.word	0x3ff80000
 80068ac:	08008b30 	.word	0x08008b30
 80068b0:	08008a9b 	.word	0x08008a9b
 80068b4:	2401      	movs	r4, #1
 80068b6:	2300      	movs	r3, #0
 80068b8:	940b      	str	r4, [sp, #44]	; 0x2c
 80068ba:	9322      	str	r3, [sp, #136]	; 0x88
 80068bc:	f04f 39ff 	mov.w	r9, #4294967295
 80068c0:	2200      	movs	r2, #0
 80068c2:	2312      	movs	r3, #18
 80068c4:	f8cd 9020 	str.w	r9, [sp, #32]
 80068c8:	9223      	str	r2, [sp, #140]	; 0x8c
 80068ca:	e7b0      	b.n	800682e <_dtoa_r+0x266>
 80068cc:	2301      	movs	r3, #1
 80068ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80068d0:	e7f4      	b.n	80068bc <_dtoa_r+0x2f4>
 80068d2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80068d6:	464b      	mov	r3, r9
 80068d8:	f8cd 9020 	str.w	r9, [sp, #32]
 80068dc:	e7a7      	b.n	800682e <_dtoa_r+0x266>
 80068de:	3101      	adds	r1, #1
 80068e0:	6041      	str	r1, [r0, #4]
 80068e2:	0052      	lsls	r2, r2, #1
 80068e4:	e7a7      	b.n	8006836 <_dtoa_r+0x26e>
 80068e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068e8:	9a03      	ldr	r2, [sp, #12]
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	9b08      	ldr	r3, [sp, #32]
 80068ee:	2b0e      	cmp	r3, #14
 80068f0:	f200 80a8 	bhi.w	8006a44 <_dtoa_r+0x47c>
 80068f4:	2c00      	cmp	r4, #0
 80068f6:	f000 80a5 	beq.w	8006a44 <_dtoa_r+0x47c>
 80068fa:	f1ba 0f00 	cmp.w	sl, #0
 80068fe:	dd34      	ble.n	800696a <_dtoa_r+0x3a2>
 8006900:	4a9a      	ldr	r2, [pc, #616]	; (8006b6c <_dtoa_r+0x5a4>)
 8006902:	f00a 030f 	and.w	r3, sl, #15
 8006906:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800690a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800690e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006912:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006916:	ea4f 142a 	mov.w	r4, sl, asr #4
 800691a:	d016      	beq.n	800694a <_dtoa_r+0x382>
 800691c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006920:	4b93      	ldr	r3, [pc, #588]	; (8006b70 <_dtoa_r+0x5a8>)
 8006922:	2703      	movs	r7, #3
 8006924:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006928:	f7f9 ff0a 	bl	8000740 <__aeabi_ddiv>
 800692c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006930:	f004 040f 	and.w	r4, r4, #15
 8006934:	4e8e      	ldr	r6, [pc, #568]	; (8006b70 <_dtoa_r+0x5a8>)
 8006936:	b954      	cbnz	r4, 800694e <_dtoa_r+0x386>
 8006938:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800693c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006940:	f7f9 fefe 	bl	8000740 <__aeabi_ddiv>
 8006944:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006948:	e029      	b.n	800699e <_dtoa_r+0x3d6>
 800694a:	2702      	movs	r7, #2
 800694c:	e7f2      	b.n	8006934 <_dtoa_r+0x36c>
 800694e:	07e1      	lsls	r1, r4, #31
 8006950:	d508      	bpl.n	8006964 <_dtoa_r+0x39c>
 8006952:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006956:	e9d6 2300 	ldrd	r2, r3, [r6]
 800695a:	f7f9 fdc7 	bl	80004ec <__aeabi_dmul>
 800695e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006962:	3701      	adds	r7, #1
 8006964:	1064      	asrs	r4, r4, #1
 8006966:	3608      	adds	r6, #8
 8006968:	e7e5      	b.n	8006936 <_dtoa_r+0x36e>
 800696a:	f000 80a5 	beq.w	8006ab8 <_dtoa_r+0x4f0>
 800696e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006972:	f1ca 0400 	rsb	r4, sl, #0
 8006976:	4b7d      	ldr	r3, [pc, #500]	; (8006b6c <_dtoa_r+0x5a4>)
 8006978:	f004 020f 	and.w	r2, r4, #15
 800697c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	f7f9 fdb2 	bl	80004ec <__aeabi_dmul>
 8006988:	2702      	movs	r7, #2
 800698a:	2300      	movs	r3, #0
 800698c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006990:	4e77      	ldr	r6, [pc, #476]	; (8006b70 <_dtoa_r+0x5a8>)
 8006992:	1124      	asrs	r4, r4, #4
 8006994:	2c00      	cmp	r4, #0
 8006996:	f040 8084 	bne.w	8006aa2 <_dtoa_r+0x4da>
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1d2      	bne.n	8006944 <_dtoa_r+0x37c>
 800699e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 808b 	beq.w	8006abc <_dtoa_r+0x4f4>
 80069a6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80069aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80069ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069b2:	2200      	movs	r2, #0
 80069b4:	4b6f      	ldr	r3, [pc, #444]	; (8006b74 <_dtoa_r+0x5ac>)
 80069b6:	f7fa f80b 	bl	80009d0 <__aeabi_dcmplt>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d07e      	beq.n	8006abc <_dtoa_r+0x4f4>
 80069be:	9b08      	ldr	r3, [sp, #32]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d07b      	beq.n	8006abc <_dtoa_r+0x4f4>
 80069c4:	f1b9 0f00 	cmp.w	r9, #0
 80069c8:	dd38      	ble.n	8006a3c <_dtoa_r+0x474>
 80069ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069ce:	2200      	movs	r2, #0
 80069d0:	4b69      	ldr	r3, [pc, #420]	; (8006b78 <_dtoa_r+0x5b0>)
 80069d2:	f7f9 fd8b 	bl	80004ec <__aeabi_dmul>
 80069d6:	464c      	mov	r4, r9
 80069d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069dc:	f10a 38ff 	add.w	r8, sl, #4294967295
 80069e0:	3701      	adds	r7, #1
 80069e2:	4638      	mov	r0, r7
 80069e4:	f7f9 fd18 	bl	8000418 <__aeabi_i2d>
 80069e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ec:	f7f9 fd7e 	bl	80004ec <__aeabi_dmul>
 80069f0:	2200      	movs	r2, #0
 80069f2:	4b62      	ldr	r3, [pc, #392]	; (8006b7c <_dtoa_r+0x5b4>)
 80069f4:	f7f9 fbc4 	bl	8000180 <__adddf3>
 80069f8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80069fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a00:	9611      	str	r6, [sp, #68]	; 0x44
 8006a02:	2c00      	cmp	r4, #0
 8006a04:	d15d      	bne.n	8006ac2 <_dtoa_r+0x4fa>
 8006a06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	4b5c      	ldr	r3, [pc, #368]	; (8006b80 <_dtoa_r+0x5b8>)
 8006a0e:	f7f9 fbb5 	bl	800017c <__aeabi_dsub>
 8006a12:	4602      	mov	r2, r0
 8006a14:	460b      	mov	r3, r1
 8006a16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a1a:	4633      	mov	r3, r6
 8006a1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a1e:	f7f9 fff5 	bl	8000a0c <__aeabi_dcmpgt>
 8006a22:	2800      	cmp	r0, #0
 8006a24:	f040 829c 	bne.w	8006f60 <_dtoa_r+0x998>
 8006a28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a2e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006a32:	f7f9 ffcd 	bl	80009d0 <__aeabi_dcmplt>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	f040 8290 	bne.w	8006f5c <_dtoa_r+0x994>
 8006a3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006a40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f2c0 8152 	blt.w	8006cf0 <_dtoa_r+0x728>
 8006a4c:	f1ba 0f0e 	cmp.w	sl, #14
 8006a50:	f300 814e 	bgt.w	8006cf0 <_dtoa_r+0x728>
 8006a54:	4b45      	ldr	r3, [pc, #276]	; (8006b6c <_dtoa_r+0x5a4>)
 8006a56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a5e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006a62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f280 80db 	bge.w	8006c20 <_dtoa_r+0x658>
 8006a6a:	9b08      	ldr	r3, [sp, #32]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f300 80d7 	bgt.w	8006c20 <_dtoa_r+0x658>
 8006a72:	f040 8272 	bne.w	8006f5a <_dtoa_r+0x992>
 8006a76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	4b40      	ldr	r3, [pc, #256]	; (8006b80 <_dtoa_r+0x5b8>)
 8006a7e:	f7f9 fd35 	bl	80004ec <__aeabi_dmul>
 8006a82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a86:	f7f9 ffb7 	bl	80009f8 <__aeabi_dcmpge>
 8006a8a:	9c08      	ldr	r4, [sp, #32]
 8006a8c:	4626      	mov	r6, r4
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	f040 8248 	bne.w	8006f24 <_dtoa_r+0x95c>
 8006a94:	2331      	movs	r3, #49	; 0x31
 8006a96:	9f03      	ldr	r7, [sp, #12]
 8006a98:	f10a 0a01 	add.w	sl, sl, #1
 8006a9c:	f807 3b01 	strb.w	r3, [r7], #1
 8006aa0:	e244      	b.n	8006f2c <_dtoa_r+0x964>
 8006aa2:	07e2      	lsls	r2, r4, #31
 8006aa4:	d505      	bpl.n	8006ab2 <_dtoa_r+0x4ea>
 8006aa6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006aaa:	f7f9 fd1f 	bl	80004ec <__aeabi_dmul>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	3701      	adds	r7, #1
 8006ab2:	1064      	asrs	r4, r4, #1
 8006ab4:	3608      	adds	r6, #8
 8006ab6:	e76d      	b.n	8006994 <_dtoa_r+0x3cc>
 8006ab8:	2702      	movs	r7, #2
 8006aba:	e770      	b.n	800699e <_dtoa_r+0x3d6>
 8006abc:	46d0      	mov	r8, sl
 8006abe:	9c08      	ldr	r4, [sp, #32]
 8006ac0:	e78f      	b.n	80069e2 <_dtoa_r+0x41a>
 8006ac2:	9903      	ldr	r1, [sp, #12]
 8006ac4:	4b29      	ldr	r3, [pc, #164]	; (8006b6c <_dtoa_r+0x5a4>)
 8006ac6:	4421      	add	r1, r4
 8006ac8:	9112      	str	r1, [sp, #72]	; 0x48
 8006aca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006acc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ad0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006ad4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ad8:	2900      	cmp	r1, #0
 8006ada:	d055      	beq.n	8006b88 <_dtoa_r+0x5c0>
 8006adc:	2000      	movs	r0, #0
 8006ade:	4929      	ldr	r1, [pc, #164]	; (8006b84 <_dtoa_r+0x5bc>)
 8006ae0:	f7f9 fe2e 	bl	8000740 <__aeabi_ddiv>
 8006ae4:	463b      	mov	r3, r7
 8006ae6:	4632      	mov	r2, r6
 8006ae8:	f7f9 fb48 	bl	800017c <__aeabi_dsub>
 8006aec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006af0:	9f03      	ldr	r7, [sp, #12]
 8006af2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006af6:	f7f9 ffa9 	bl	8000a4c <__aeabi_d2iz>
 8006afa:	4604      	mov	r4, r0
 8006afc:	f7f9 fc8c 	bl	8000418 <__aeabi_i2d>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b08:	f7f9 fb38 	bl	800017c <__aeabi_dsub>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	3430      	adds	r4, #48	; 0x30
 8006b12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006b16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b1a:	f807 4b01 	strb.w	r4, [r7], #1
 8006b1e:	f7f9 ff57 	bl	80009d0 <__aeabi_dcmplt>
 8006b22:	2800      	cmp	r0, #0
 8006b24:	d174      	bne.n	8006c10 <_dtoa_r+0x648>
 8006b26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	4911      	ldr	r1, [pc, #68]	; (8006b74 <_dtoa_r+0x5ac>)
 8006b2e:	f7f9 fb25 	bl	800017c <__aeabi_dsub>
 8006b32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b36:	f7f9 ff4b 	bl	80009d0 <__aeabi_dcmplt>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	f040 80b7 	bne.w	8006cae <_dtoa_r+0x6e6>
 8006b40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b42:	429f      	cmp	r7, r3
 8006b44:	f43f af7a 	beq.w	8006a3c <_dtoa_r+0x474>
 8006b48:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <_dtoa_r+0x5b0>)
 8006b50:	f7f9 fccc 	bl	80004ec <__aeabi_dmul>
 8006b54:	2200      	movs	r2, #0
 8006b56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b5e:	4b06      	ldr	r3, [pc, #24]	; (8006b78 <_dtoa_r+0x5b0>)
 8006b60:	f7f9 fcc4 	bl	80004ec <__aeabi_dmul>
 8006b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b68:	e7c3      	b.n	8006af2 <_dtoa_r+0x52a>
 8006b6a:	bf00      	nop
 8006b6c:	08008b30 	.word	0x08008b30
 8006b70:	08008b08 	.word	0x08008b08
 8006b74:	3ff00000 	.word	0x3ff00000
 8006b78:	40240000 	.word	0x40240000
 8006b7c:	401c0000 	.word	0x401c0000
 8006b80:	40140000 	.word	0x40140000
 8006b84:	3fe00000 	.word	0x3fe00000
 8006b88:	4630      	mov	r0, r6
 8006b8a:	4639      	mov	r1, r7
 8006b8c:	f7f9 fcae 	bl	80004ec <__aeabi_dmul>
 8006b90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b92:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b96:	9c03      	ldr	r4, [sp, #12]
 8006b98:	9314      	str	r3, [sp, #80]	; 0x50
 8006b9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b9e:	f7f9 ff55 	bl	8000a4c <__aeabi_d2iz>
 8006ba2:	9015      	str	r0, [sp, #84]	; 0x54
 8006ba4:	f7f9 fc38 	bl	8000418 <__aeabi_i2d>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bb0:	f7f9 fae4 	bl	800017c <__aeabi_dsub>
 8006bb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bb6:	4606      	mov	r6, r0
 8006bb8:	3330      	adds	r3, #48	; 0x30
 8006bba:	f804 3b01 	strb.w	r3, [r4], #1
 8006bbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006bc0:	460f      	mov	r7, r1
 8006bc2:	429c      	cmp	r4, r3
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	d124      	bne.n	8006c14 <_dtoa_r+0x64c>
 8006bca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bce:	4bb0      	ldr	r3, [pc, #704]	; (8006e90 <_dtoa_r+0x8c8>)
 8006bd0:	f7f9 fad6 	bl	8000180 <__adddf3>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	460b      	mov	r3, r1
 8006bd8:	4630      	mov	r0, r6
 8006bda:	4639      	mov	r1, r7
 8006bdc:	f7f9 ff16 	bl	8000a0c <__aeabi_dcmpgt>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	d163      	bne.n	8006cac <_dtoa_r+0x6e4>
 8006be4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006be8:	2000      	movs	r0, #0
 8006bea:	49a9      	ldr	r1, [pc, #676]	; (8006e90 <_dtoa_r+0x8c8>)
 8006bec:	f7f9 fac6 	bl	800017c <__aeabi_dsub>
 8006bf0:	4602      	mov	r2, r0
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	4630      	mov	r0, r6
 8006bf6:	4639      	mov	r1, r7
 8006bf8:	f7f9 feea 	bl	80009d0 <__aeabi_dcmplt>
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	f43f af1d 	beq.w	8006a3c <_dtoa_r+0x474>
 8006c02:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006c04:	1e7b      	subs	r3, r7, #1
 8006c06:	9314      	str	r3, [sp, #80]	; 0x50
 8006c08:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006c0c:	2b30      	cmp	r3, #48	; 0x30
 8006c0e:	d0f8      	beq.n	8006c02 <_dtoa_r+0x63a>
 8006c10:	46c2      	mov	sl, r8
 8006c12:	e03b      	b.n	8006c8c <_dtoa_r+0x6c4>
 8006c14:	4b9f      	ldr	r3, [pc, #636]	; (8006e94 <_dtoa_r+0x8cc>)
 8006c16:	f7f9 fc69 	bl	80004ec <__aeabi_dmul>
 8006c1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c1e:	e7bc      	b.n	8006b9a <_dtoa_r+0x5d2>
 8006c20:	9f03      	ldr	r7, [sp, #12]
 8006c22:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006c26:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c2a:	4640      	mov	r0, r8
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	f7f9 fd87 	bl	8000740 <__aeabi_ddiv>
 8006c32:	f7f9 ff0b 	bl	8000a4c <__aeabi_d2iz>
 8006c36:	4604      	mov	r4, r0
 8006c38:	f7f9 fbee 	bl	8000418 <__aeabi_i2d>
 8006c3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c40:	f7f9 fc54 	bl	80004ec <__aeabi_dmul>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4640      	mov	r0, r8
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	f7f9 fa96 	bl	800017c <__aeabi_dsub>
 8006c50:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006c54:	f807 6b01 	strb.w	r6, [r7], #1
 8006c58:	9e03      	ldr	r6, [sp, #12]
 8006c5a:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006c5e:	1bbe      	subs	r6, r7, r6
 8006c60:	45b4      	cmp	ip, r6
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	d136      	bne.n	8006cd6 <_dtoa_r+0x70e>
 8006c68:	f7f9 fa8a 	bl	8000180 <__adddf3>
 8006c6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c70:	4680      	mov	r8, r0
 8006c72:	4689      	mov	r9, r1
 8006c74:	f7f9 feca 	bl	8000a0c <__aeabi_dcmpgt>
 8006c78:	bb58      	cbnz	r0, 8006cd2 <_dtoa_r+0x70a>
 8006c7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c7e:	4640      	mov	r0, r8
 8006c80:	4649      	mov	r1, r9
 8006c82:	f7f9 fe9b 	bl	80009bc <__aeabi_dcmpeq>
 8006c86:	b108      	cbz	r0, 8006c8c <_dtoa_r+0x6c4>
 8006c88:	07e1      	lsls	r1, r4, #31
 8006c8a:	d422      	bmi.n	8006cd2 <_dtoa_r+0x70a>
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	4659      	mov	r1, fp
 8006c90:	f000 faf0 	bl	8007274 <_Bfree>
 8006c94:	2300      	movs	r3, #0
 8006c96:	703b      	strb	r3, [r7, #0]
 8006c98:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006c9a:	f10a 0001 	add.w	r0, sl, #1
 8006c9e:	6018      	str	r0, [r3, #0]
 8006ca0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f43f acde 	beq.w	8006664 <_dtoa_r+0x9c>
 8006ca8:	601f      	str	r7, [r3, #0]
 8006caa:	e4db      	b.n	8006664 <_dtoa_r+0x9c>
 8006cac:	4627      	mov	r7, r4
 8006cae:	463b      	mov	r3, r7
 8006cb0:	461f      	mov	r7, r3
 8006cb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cb6:	2a39      	cmp	r2, #57	; 0x39
 8006cb8:	d107      	bne.n	8006cca <_dtoa_r+0x702>
 8006cba:	9a03      	ldr	r2, [sp, #12]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d1f7      	bne.n	8006cb0 <_dtoa_r+0x6e8>
 8006cc0:	2230      	movs	r2, #48	; 0x30
 8006cc2:	9903      	ldr	r1, [sp, #12]
 8006cc4:	f108 0801 	add.w	r8, r8, #1
 8006cc8:	700a      	strb	r2, [r1, #0]
 8006cca:	781a      	ldrb	r2, [r3, #0]
 8006ccc:	3201      	adds	r2, #1
 8006cce:	701a      	strb	r2, [r3, #0]
 8006cd0:	e79e      	b.n	8006c10 <_dtoa_r+0x648>
 8006cd2:	46d0      	mov	r8, sl
 8006cd4:	e7eb      	b.n	8006cae <_dtoa_r+0x6e6>
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	4b6e      	ldr	r3, [pc, #440]	; (8006e94 <_dtoa_r+0x8cc>)
 8006cda:	f7f9 fc07 	bl	80004ec <__aeabi_dmul>
 8006cde:	2200      	movs	r2, #0
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	4680      	mov	r8, r0
 8006ce4:	4689      	mov	r9, r1
 8006ce6:	f7f9 fe69 	bl	80009bc <__aeabi_dcmpeq>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d09b      	beq.n	8006c26 <_dtoa_r+0x65e>
 8006cee:	e7cd      	b.n	8006c8c <_dtoa_r+0x6c4>
 8006cf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006cf2:	2a00      	cmp	r2, #0
 8006cf4:	f000 80d0 	beq.w	8006e98 <_dtoa_r+0x8d0>
 8006cf8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006cfa:	2a01      	cmp	r2, #1
 8006cfc:	f300 80ae 	bgt.w	8006e5c <_dtoa_r+0x894>
 8006d00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d02:	2a00      	cmp	r2, #0
 8006d04:	f000 80a6 	beq.w	8006e54 <_dtoa_r+0x88c>
 8006d08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d0c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d0e:	9f06      	ldr	r7, [sp, #24]
 8006d10:	9a06      	ldr	r2, [sp, #24]
 8006d12:	2101      	movs	r1, #1
 8006d14:	441a      	add	r2, r3
 8006d16:	9206      	str	r2, [sp, #24]
 8006d18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	441a      	add	r2, r3
 8006d1e:	9209      	str	r2, [sp, #36]	; 0x24
 8006d20:	f000 fb5e 	bl	80073e0 <__i2b>
 8006d24:	4606      	mov	r6, r0
 8006d26:	2f00      	cmp	r7, #0
 8006d28:	dd0c      	ble.n	8006d44 <_dtoa_r+0x77c>
 8006d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	dd09      	ble.n	8006d44 <_dtoa_r+0x77c>
 8006d30:	42bb      	cmp	r3, r7
 8006d32:	bfa8      	it	ge
 8006d34:	463b      	movge	r3, r7
 8006d36:	9a06      	ldr	r2, [sp, #24]
 8006d38:	1aff      	subs	r7, r7, r3
 8006d3a:	1ad2      	subs	r2, r2, r3
 8006d3c:	9206      	str	r2, [sp, #24]
 8006d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d40:	1ad3      	subs	r3, r2, r3
 8006d42:	9309      	str	r3, [sp, #36]	; 0x24
 8006d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d46:	b1f3      	cbz	r3, 8006d86 <_dtoa_r+0x7be>
 8006d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f000 80a8 	beq.w	8006ea0 <_dtoa_r+0x8d8>
 8006d50:	2c00      	cmp	r4, #0
 8006d52:	dd10      	ble.n	8006d76 <_dtoa_r+0x7ae>
 8006d54:	4631      	mov	r1, r6
 8006d56:	4622      	mov	r2, r4
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f000 fbff 	bl	800755c <__pow5mult>
 8006d5e:	465a      	mov	r2, fp
 8006d60:	4601      	mov	r1, r0
 8006d62:	4606      	mov	r6, r0
 8006d64:	4628      	mov	r0, r5
 8006d66:	f000 fb51 	bl	800740c <__multiply>
 8006d6a:	4680      	mov	r8, r0
 8006d6c:	4659      	mov	r1, fp
 8006d6e:	4628      	mov	r0, r5
 8006d70:	f000 fa80 	bl	8007274 <_Bfree>
 8006d74:	46c3      	mov	fp, r8
 8006d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d78:	1b1a      	subs	r2, r3, r4
 8006d7a:	d004      	beq.n	8006d86 <_dtoa_r+0x7be>
 8006d7c:	4659      	mov	r1, fp
 8006d7e:	4628      	mov	r0, r5
 8006d80:	f000 fbec 	bl	800755c <__pow5mult>
 8006d84:	4683      	mov	fp, r0
 8006d86:	2101      	movs	r1, #1
 8006d88:	4628      	mov	r0, r5
 8006d8a:	f000 fb29 	bl	80073e0 <__i2b>
 8006d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d90:	4604      	mov	r4, r0
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f340 8086 	ble.w	8006ea4 <_dtoa_r+0x8dc>
 8006d98:	461a      	mov	r2, r3
 8006d9a:	4601      	mov	r1, r0
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	f000 fbdd 	bl	800755c <__pow5mult>
 8006da2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006da4:	4604      	mov	r4, r0
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	dd7f      	ble.n	8006eaa <_dtoa_r+0x8e2>
 8006daa:	f04f 0800 	mov.w	r8, #0
 8006dae:	6923      	ldr	r3, [r4, #16]
 8006db0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006db4:	6918      	ldr	r0, [r3, #16]
 8006db6:	f000 fac5 	bl	8007344 <__hi0bits>
 8006dba:	f1c0 0020 	rsb	r0, r0, #32
 8006dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc0:	4418      	add	r0, r3
 8006dc2:	f010 001f 	ands.w	r0, r0, #31
 8006dc6:	f000 8092 	beq.w	8006eee <_dtoa_r+0x926>
 8006dca:	f1c0 0320 	rsb	r3, r0, #32
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	f340 808a 	ble.w	8006ee8 <_dtoa_r+0x920>
 8006dd4:	f1c0 001c 	rsb	r0, r0, #28
 8006dd8:	9b06      	ldr	r3, [sp, #24]
 8006dda:	4407      	add	r7, r0
 8006ddc:	4403      	add	r3, r0
 8006dde:	9306      	str	r3, [sp, #24]
 8006de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de2:	4403      	add	r3, r0
 8006de4:	9309      	str	r3, [sp, #36]	; 0x24
 8006de6:	9b06      	ldr	r3, [sp, #24]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	dd05      	ble.n	8006df8 <_dtoa_r+0x830>
 8006dec:	4659      	mov	r1, fp
 8006dee:	461a      	mov	r2, r3
 8006df0:	4628      	mov	r0, r5
 8006df2:	f000 fc0d 	bl	8007610 <__lshift>
 8006df6:	4683      	mov	fp, r0
 8006df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	dd05      	ble.n	8006e0a <_dtoa_r+0x842>
 8006dfe:	4621      	mov	r1, r4
 8006e00:	461a      	mov	r2, r3
 8006e02:	4628      	mov	r0, r5
 8006e04:	f000 fc04 	bl	8007610 <__lshift>
 8006e08:	4604      	mov	r4, r0
 8006e0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d070      	beq.n	8006ef2 <_dtoa_r+0x92a>
 8006e10:	4621      	mov	r1, r4
 8006e12:	4658      	mov	r0, fp
 8006e14:	f000 fc6c 	bl	80076f0 <__mcmp>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	da6a      	bge.n	8006ef2 <_dtoa_r+0x92a>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	4659      	mov	r1, fp
 8006e20:	220a      	movs	r2, #10
 8006e22:	4628      	mov	r0, r5
 8006e24:	f000 fa48 	bl	80072b8 <__multadd>
 8006e28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e2a:	4683      	mov	fp, r0
 8006e2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 8194 	beq.w	800715e <_dtoa_r+0xb96>
 8006e36:	4631      	mov	r1, r6
 8006e38:	2300      	movs	r3, #0
 8006e3a:	220a      	movs	r2, #10
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	f000 fa3b 	bl	80072b8 <__multadd>
 8006e42:	f1b9 0f00 	cmp.w	r9, #0
 8006e46:	4606      	mov	r6, r0
 8006e48:	f300 8093 	bgt.w	8006f72 <_dtoa_r+0x9aa>
 8006e4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	dc57      	bgt.n	8006f02 <_dtoa_r+0x93a>
 8006e52:	e08e      	b.n	8006f72 <_dtoa_r+0x9aa>
 8006e54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006e56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e5a:	e757      	b.n	8006d0c <_dtoa_r+0x744>
 8006e5c:	9b08      	ldr	r3, [sp, #32]
 8006e5e:	1e5c      	subs	r4, r3, #1
 8006e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e62:	42a3      	cmp	r3, r4
 8006e64:	bfb7      	itett	lt
 8006e66:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e68:	1b1c      	subge	r4, r3, r4
 8006e6a:	1ae2      	sublt	r2, r4, r3
 8006e6c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006e6e:	bfbe      	ittt	lt
 8006e70:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006e72:	189b      	addlt	r3, r3, r2
 8006e74:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006e76:	9b08      	ldr	r3, [sp, #32]
 8006e78:	bfb8      	it	lt
 8006e7a:	2400      	movlt	r4, #0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bfbb      	ittet	lt
 8006e80:	9b06      	ldrlt	r3, [sp, #24]
 8006e82:	9a08      	ldrlt	r2, [sp, #32]
 8006e84:	9f06      	ldrge	r7, [sp, #24]
 8006e86:	1a9f      	sublt	r7, r3, r2
 8006e88:	bfac      	ite	ge
 8006e8a:	9b08      	ldrge	r3, [sp, #32]
 8006e8c:	2300      	movlt	r3, #0
 8006e8e:	e73f      	b.n	8006d10 <_dtoa_r+0x748>
 8006e90:	3fe00000 	.word	0x3fe00000
 8006e94:	40240000 	.word	0x40240000
 8006e98:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006e9a:	9f06      	ldr	r7, [sp, #24]
 8006e9c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006e9e:	e742      	b.n	8006d26 <_dtoa_r+0x75e>
 8006ea0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ea2:	e76b      	b.n	8006d7c <_dtoa_r+0x7b4>
 8006ea4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	dc19      	bgt.n	8006ede <_dtoa_r+0x916>
 8006eaa:	9b04      	ldr	r3, [sp, #16]
 8006eac:	b9bb      	cbnz	r3, 8006ede <_dtoa_r+0x916>
 8006eae:	9b05      	ldr	r3, [sp, #20]
 8006eb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006eb4:	b99b      	cbnz	r3, 8006ede <_dtoa_r+0x916>
 8006eb6:	9b05      	ldr	r3, [sp, #20]
 8006eb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ebc:	0d1b      	lsrs	r3, r3, #20
 8006ebe:	051b      	lsls	r3, r3, #20
 8006ec0:	b183      	cbz	r3, 8006ee4 <_dtoa_r+0x91c>
 8006ec2:	f04f 0801 	mov.w	r8, #1
 8006ec6:	9b06      	ldr	r3, [sp, #24]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	9306      	str	r3, [sp, #24]
 8006ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ece:	3301      	adds	r3, #1
 8006ed0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f47f af6a 	bne.w	8006dae <_dtoa_r+0x7e6>
 8006eda:	2001      	movs	r0, #1
 8006edc:	e76f      	b.n	8006dbe <_dtoa_r+0x7f6>
 8006ede:	f04f 0800 	mov.w	r8, #0
 8006ee2:	e7f6      	b.n	8006ed2 <_dtoa_r+0x90a>
 8006ee4:	4698      	mov	r8, r3
 8006ee6:	e7f4      	b.n	8006ed2 <_dtoa_r+0x90a>
 8006ee8:	f43f af7d 	beq.w	8006de6 <_dtoa_r+0x81e>
 8006eec:	4618      	mov	r0, r3
 8006eee:	301c      	adds	r0, #28
 8006ef0:	e772      	b.n	8006dd8 <_dtoa_r+0x810>
 8006ef2:	9b08      	ldr	r3, [sp, #32]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	dc36      	bgt.n	8006f66 <_dtoa_r+0x99e>
 8006ef8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	dd33      	ble.n	8006f66 <_dtoa_r+0x99e>
 8006efe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f02:	f1b9 0f00 	cmp.w	r9, #0
 8006f06:	d10d      	bne.n	8006f24 <_dtoa_r+0x95c>
 8006f08:	4621      	mov	r1, r4
 8006f0a:	464b      	mov	r3, r9
 8006f0c:	2205      	movs	r2, #5
 8006f0e:	4628      	mov	r0, r5
 8006f10:	f000 f9d2 	bl	80072b8 <__multadd>
 8006f14:	4601      	mov	r1, r0
 8006f16:	4604      	mov	r4, r0
 8006f18:	4658      	mov	r0, fp
 8006f1a:	f000 fbe9 	bl	80076f0 <__mcmp>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	f73f adb8 	bgt.w	8006a94 <_dtoa_r+0x4cc>
 8006f24:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006f26:	9f03      	ldr	r7, [sp, #12]
 8006f28:	ea6f 0a03 	mvn.w	sl, r3
 8006f2c:	f04f 0800 	mov.w	r8, #0
 8006f30:	4621      	mov	r1, r4
 8006f32:	4628      	mov	r0, r5
 8006f34:	f000 f99e 	bl	8007274 <_Bfree>
 8006f38:	2e00      	cmp	r6, #0
 8006f3a:	f43f aea7 	beq.w	8006c8c <_dtoa_r+0x6c4>
 8006f3e:	f1b8 0f00 	cmp.w	r8, #0
 8006f42:	d005      	beq.n	8006f50 <_dtoa_r+0x988>
 8006f44:	45b0      	cmp	r8, r6
 8006f46:	d003      	beq.n	8006f50 <_dtoa_r+0x988>
 8006f48:	4641      	mov	r1, r8
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	f000 f992 	bl	8007274 <_Bfree>
 8006f50:	4631      	mov	r1, r6
 8006f52:	4628      	mov	r0, r5
 8006f54:	f000 f98e 	bl	8007274 <_Bfree>
 8006f58:	e698      	b.n	8006c8c <_dtoa_r+0x6c4>
 8006f5a:	2400      	movs	r4, #0
 8006f5c:	4626      	mov	r6, r4
 8006f5e:	e7e1      	b.n	8006f24 <_dtoa_r+0x95c>
 8006f60:	46c2      	mov	sl, r8
 8006f62:	4626      	mov	r6, r4
 8006f64:	e596      	b.n	8006a94 <_dtoa_r+0x4cc>
 8006f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f000 80fd 	beq.w	800716c <_dtoa_r+0xba4>
 8006f72:	2f00      	cmp	r7, #0
 8006f74:	dd05      	ble.n	8006f82 <_dtoa_r+0x9ba>
 8006f76:	4631      	mov	r1, r6
 8006f78:	463a      	mov	r2, r7
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f000 fb48 	bl	8007610 <__lshift>
 8006f80:	4606      	mov	r6, r0
 8006f82:	f1b8 0f00 	cmp.w	r8, #0
 8006f86:	d05c      	beq.n	8007042 <_dtoa_r+0xa7a>
 8006f88:	4628      	mov	r0, r5
 8006f8a:	6871      	ldr	r1, [r6, #4]
 8006f8c:	f000 f932 	bl	80071f4 <_Balloc>
 8006f90:	4607      	mov	r7, r0
 8006f92:	b928      	cbnz	r0, 8006fa0 <_dtoa_r+0x9d8>
 8006f94:	4602      	mov	r2, r0
 8006f96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f9a:	4b7f      	ldr	r3, [pc, #508]	; (8007198 <_dtoa_r+0xbd0>)
 8006f9c:	f7ff bb28 	b.w	80065f0 <_dtoa_r+0x28>
 8006fa0:	6932      	ldr	r2, [r6, #16]
 8006fa2:	f106 010c 	add.w	r1, r6, #12
 8006fa6:	3202      	adds	r2, #2
 8006fa8:	0092      	lsls	r2, r2, #2
 8006faa:	300c      	adds	r0, #12
 8006fac:	f000 f914 	bl	80071d8 <memcpy>
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	f000 fb2b 	bl	8007610 <__lshift>
 8006fba:	46b0      	mov	r8, r6
 8006fbc:	4606      	mov	r6, r0
 8006fbe:	9b03      	ldr	r3, [sp, #12]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	9308      	str	r3, [sp, #32]
 8006fc4:	9b03      	ldr	r3, [sp, #12]
 8006fc6:	444b      	add	r3, r9
 8006fc8:	930a      	str	r3, [sp, #40]	; 0x28
 8006fca:	9b04      	ldr	r3, [sp, #16]
 8006fcc:	f003 0301 	and.w	r3, r3, #1
 8006fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd2:	9b08      	ldr	r3, [sp, #32]
 8006fd4:	4621      	mov	r1, r4
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	4658      	mov	r0, fp
 8006fda:	9304      	str	r3, [sp, #16]
 8006fdc:	f7ff fa68 	bl	80064b0 <quorem>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	4641      	mov	r1, r8
 8006fe4:	3330      	adds	r3, #48	; 0x30
 8006fe6:	9006      	str	r0, [sp, #24]
 8006fe8:	4658      	mov	r0, fp
 8006fea:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fec:	f000 fb80 	bl	80076f0 <__mcmp>
 8006ff0:	4632      	mov	r2, r6
 8006ff2:	4681      	mov	r9, r0
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f000 fb96 	bl	8007728 <__mdiff>
 8006ffc:	68c2      	ldr	r2, [r0, #12]
 8006ffe:	4607      	mov	r7, r0
 8007000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007002:	bb02      	cbnz	r2, 8007046 <_dtoa_r+0xa7e>
 8007004:	4601      	mov	r1, r0
 8007006:	4658      	mov	r0, fp
 8007008:	f000 fb72 	bl	80076f0 <__mcmp>
 800700c:	4602      	mov	r2, r0
 800700e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007010:	4639      	mov	r1, r7
 8007012:	4628      	mov	r0, r5
 8007014:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007018:	f000 f92c 	bl	8007274 <_Bfree>
 800701c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800701e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007020:	9f08      	ldr	r7, [sp, #32]
 8007022:	ea43 0102 	orr.w	r1, r3, r2
 8007026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007028:	430b      	orrs	r3, r1
 800702a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800702c:	d10d      	bne.n	800704a <_dtoa_r+0xa82>
 800702e:	2b39      	cmp	r3, #57	; 0x39
 8007030:	d029      	beq.n	8007086 <_dtoa_r+0xabe>
 8007032:	f1b9 0f00 	cmp.w	r9, #0
 8007036:	dd01      	ble.n	800703c <_dtoa_r+0xa74>
 8007038:	9b06      	ldr	r3, [sp, #24]
 800703a:	3331      	adds	r3, #49	; 0x31
 800703c:	9a04      	ldr	r2, [sp, #16]
 800703e:	7013      	strb	r3, [r2, #0]
 8007040:	e776      	b.n	8006f30 <_dtoa_r+0x968>
 8007042:	4630      	mov	r0, r6
 8007044:	e7b9      	b.n	8006fba <_dtoa_r+0x9f2>
 8007046:	2201      	movs	r2, #1
 8007048:	e7e2      	b.n	8007010 <_dtoa_r+0xa48>
 800704a:	f1b9 0f00 	cmp.w	r9, #0
 800704e:	db06      	blt.n	800705e <_dtoa_r+0xa96>
 8007050:	9922      	ldr	r1, [sp, #136]	; 0x88
 8007052:	ea41 0909 	orr.w	r9, r1, r9
 8007056:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007058:	ea59 0101 	orrs.w	r1, r9, r1
 800705c:	d120      	bne.n	80070a0 <_dtoa_r+0xad8>
 800705e:	2a00      	cmp	r2, #0
 8007060:	ddec      	ble.n	800703c <_dtoa_r+0xa74>
 8007062:	4659      	mov	r1, fp
 8007064:	2201      	movs	r2, #1
 8007066:	4628      	mov	r0, r5
 8007068:	9308      	str	r3, [sp, #32]
 800706a:	f000 fad1 	bl	8007610 <__lshift>
 800706e:	4621      	mov	r1, r4
 8007070:	4683      	mov	fp, r0
 8007072:	f000 fb3d 	bl	80076f0 <__mcmp>
 8007076:	2800      	cmp	r0, #0
 8007078:	9b08      	ldr	r3, [sp, #32]
 800707a:	dc02      	bgt.n	8007082 <_dtoa_r+0xaba>
 800707c:	d1de      	bne.n	800703c <_dtoa_r+0xa74>
 800707e:	07da      	lsls	r2, r3, #31
 8007080:	d5dc      	bpl.n	800703c <_dtoa_r+0xa74>
 8007082:	2b39      	cmp	r3, #57	; 0x39
 8007084:	d1d8      	bne.n	8007038 <_dtoa_r+0xa70>
 8007086:	2339      	movs	r3, #57	; 0x39
 8007088:	9a04      	ldr	r2, [sp, #16]
 800708a:	7013      	strb	r3, [r2, #0]
 800708c:	463b      	mov	r3, r7
 800708e:	461f      	mov	r7, r3
 8007090:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8007094:	3b01      	subs	r3, #1
 8007096:	2a39      	cmp	r2, #57	; 0x39
 8007098:	d050      	beq.n	800713c <_dtoa_r+0xb74>
 800709a:	3201      	adds	r2, #1
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	e747      	b.n	8006f30 <_dtoa_r+0x968>
 80070a0:	2a00      	cmp	r2, #0
 80070a2:	dd03      	ble.n	80070ac <_dtoa_r+0xae4>
 80070a4:	2b39      	cmp	r3, #57	; 0x39
 80070a6:	d0ee      	beq.n	8007086 <_dtoa_r+0xabe>
 80070a8:	3301      	adds	r3, #1
 80070aa:	e7c7      	b.n	800703c <_dtoa_r+0xa74>
 80070ac:	9a08      	ldr	r2, [sp, #32]
 80070ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80070b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80070b4:	428a      	cmp	r2, r1
 80070b6:	d02a      	beq.n	800710e <_dtoa_r+0xb46>
 80070b8:	4659      	mov	r1, fp
 80070ba:	2300      	movs	r3, #0
 80070bc:	220a      	movs	r2, #10
 80070be:	4628      	mov	r0, r5
 80070c0:	f000 f8fa 	bl	80072b8 <__multadd>
 80070c4:	45b0      	cmp	r8, r6
 80070c6:	4683      	mov	fp, r0
 80070c8:	f04f 0300 	mov.w	r3, #0
 80070cc:	f04f 020a 	mov.w	r2, #10
 80070d0:	4641      	mov	r1, r8
 80070d2:	4628      	mov	r0, r5
 80070d4:	d107      	bne.n	80070e6 <_dtoa_r+0xb1e>
 80070d6:	f000 f8ef 	bl	80072b8 <__multadd>
 80070da:	4680      	mov	r8, r0
 80070dc:	4606      	mov	r6, r0
 80070de:	9b08      	ldr	r3, [sp, #32]
 80070e0:	3301      	adds	r3, #1
 80070e2:	9308      	str	r3, [sp, #32]
 80070e4:	e775      	b.n	8006fd2 <_dtoa_r+0xa0a>
 80070e6:	f000 f8e7 	bl	80072b8 <__multadd>
 80070ea:	4631      	mov	r1, r6
 80070ec:	4680      	mov	r8, r0
 80070ee:	2300      	movs	r3, #0
 80070f0:	220a      	movs	r2, #10
 80070f2:	4628      	mov	r0, r5
 80070f4:	f000 f8e0 	bl	80072b8 <__multadd>
 80070f8:	4606      	mov	r6, r0
 80070fa:	e7f0      	b.n	80070de <_dtoa_r+0xb16>
 80070fc:	f1b9 0f00 	cmp.w	r9, #0
 8007100:	bfcc      	ite	gt
 8007102:	464f      	movgt	r7, r9
 8007104:	2701      	movle	r7, #1
 8007106:	f04f 0800 	mov.w	r8, #0
 800710a:	9a03      	ldr	r2, [sp, #12]
 800710c:	4417      	add	r7, r2
 800710e:	4659      	mov	r1, fp
 8007110:	2201      	movs	r2, #1
 8007112:	4628      	mov	r0, r5
 8007114:	9308      	str	r3, [sp, #32]
 8007116:	f000 fa7b 	bl	8007610 <__lshift>
 800711a:	4621      	mov	r1, r4
 800711c:	4683      	mov	fp, r0
 800711e:	f000 fae7 	bl	80076f0 <__mcmp>
 8007122:	2800      	cmp	r0, #0
 8007124:	dcb2      	bgt.n	800708c <_dtoa_r+0xac4>
 8007126:	d102      	bne.n	800712e <_dtoa_r+0xb66>
 8007128:	9b08      	ldr	r3, [sp, #32]
 800712a:	07db      	lsls	r3, r3, #31
 800712c:	d4ae      	bmi.n	800708c <_dtoa_r+0xac4>
 800712e:	463b      	mov	r3, r7
 8007130:	461f      	mov	r7, r3
 8007132:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007136:	2a30      	cmp	r2, #48	; 0x30
 8007138:	d0fa      	beq.n	8007130 <_dtoa_r+0xb68>
 800713a:	e6f9      	b.n	8006f30 <_dtoa_r+0x968>
 800713c:	9a03      	ldr	r2, [sp, #12]
 800713e:	429a      	cmp	r2, r3
 8007140:	d1a5      	bne.n	800708e <_dtoa_r+0xac6>
 8007142:	2331      	movs	r3, #49	; 0x31
 8007144:	f10a 0a01 	add.w	sl, sl, #1
 8007148:	e779      	b.n	800703e <_dtoa_r+0xa76>
 800714a:	4b14      	ldr	r3, [pc, #80]	; (800719c <_dtoa_r+0xbd4>)
 800714c:	f7ff baa8 	b.w	80066a0 <_dtoa_r+0xd8>
 8007150:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007152:	2b00      	cmp	r3, #0
 8007154:	f47f aa81 	bne.w	800665a <_dtoa_r+0x92>
 8007158:	4b11      	ldr	r3, [pc, #68]	; (80071a0 <_dtoa_r+0xbd8>)
 800715a:	f7ff baa1 	b.w	80066a0 <_dtoa_r+0xd8>
 800715e:	f1b9 0f00 	cmp.w	r9, #0
 8007162:	dc03      	bgt.n	800716c <_dtoa_r+0xba4>
 8007164:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007166:	2b02      	cmp	r3, #2
 8007168:	f73f aecb 	bgt.w	8006f02 <_dtoa_r+0x93a>
 800716c:	9f03      	ldr	r7, [sp, #12]
 800716e:	4621      	mov	r1, r4
 8007170:	4658      	mov	r0, fp
 8007172:	f7ff f99d 	bl	80064b0 <quorem>
 8007176:	9a03      	ldr	r2, [sp, #12]
 8007178:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800717c:	f807 3b01 	strb.w	r3, [r7], #1
 8007180:	1aba      	subs	r2, r7, r2
 8007182:	4591      	cmp	r9, r2
 8007184:	ddba      	ble.n	80070fc <_dtoa_r+0xb34>
 8007186:	4659      	mov	r1, fp
 8007188:	2300      	movs	r3, #0
 800718a:	220a      	movs	r2, #10
 800718c:	4628      	mov	r0, r5
 800718e:	f000 f893 	bl	80072b8 <__multadd>
 8007192:	4683      	mov	fp, r0
 8007194:	e7eb      	b.n	800716e <_dtoa_r+0xba6>
 8007196:	bf00      	nop
 8007198:	08008a9b 	.word	0x08008a9b
 800719c:	080089f8 	.word	0x080089f8
 80071a0:	08008a1c 	.word	0x08008a1c

080071a4 <_localeconv_r>:
 80071a4:	4800      	ldr	r0, [pc, #0]	; (80071a8 <_localeconv_r+0x4>)
 80071a6:	4770      	bx	lr
 80071a8:	20000178 	.word	0x20000178

080071ac <malloc>:
 80071ac:	4b02      	ldr	r3, [pc, #8]	; (80071b8 <malloc+0xc>)
 80071ae:	4601      	mov	r1, r0
 80071b0:	6818      	ldr	r0, [r3, #0]
 80071b2:	f000 bc1d 	b.w	80079f0 <_malloc_r>
 80071b6:	bf00      	nop
 80071b8:	20000024 	.word	0x20000024

080071bc <memchr>:
 80071bc:	4603      	mov	r3, r0
 80071be:	b510      	push	{r4, lr}
 80071c0:	b2c9      	uxtb	r1, r1
 80071c2:	4402      	add	r2, r0
 80071c4:	4293      	cmp	r3, r2
 80071c6:	4618      	mov	r0, r3
 80071c8:	d101      	bne.n	80071ce <memchr+0x12>
 80071ca:	2000      	movs	r0, #0
 80071cc:	e003      	b.n	80071d6 <memchr+0x1a>
 80071ce:	7804      	ldrb	r4, [r0, #0]
 80071d0:	3301      	adds	r3, #1
 80071d2:	428c      	cmp	r4, r1
 80071d4:	d1f6      	bne.n	80071c4 <memchr+0x8>
 80071d6:	bd10      	pop	{r4, pc}

080071d8 <memcpy>:
 80071d8:	440a      	add	r2, r1
 80071da:	4291      	cmp	r1, r2
 80071dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80071e0:	d100      	bne.n	80071e4 <memcpy+0xc>
 80071e2:	4770      	bx	lr
 80071e4:	b510      	push	{r4, lr}
 80071e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ea:	4291      	cmp	r1, r2
 80071ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071f0:	d1f9      	bne.n	80071e6 <memcpy+0xe>
 80071f2:	bd10      	pop	{r4, pc}

080071f4 <_Balloc>:
 80071f4:	b570      	push	{r4, r5, r6, lr}
 80071f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071f8:	4604      	mov	r4, r0
 80071fa:	460d      	mov	r5, r1
 80071fc:	b976      	cbnz	r6, 800721c <_Balloc+0x28>
 80071fe:	2010      	movs	r0, #16
 8007200:	f7ff ffd4 	bl	80071ac <malloc>
 8007204:	4602      	mov	r2, r0
 8007206:	6260      	str	r0, [r4, #36]	; 0x24
 8007208:	b920      	cbnz	r0, 8007214 <_Balloc+0x20>
 800720a:	2166      	movs	r1, #102	; 0x66
 800720c:	4b17      	ldr	r3, [pc, #92]	; (800726c <_Balloc+0x78>)
 800720e:	4818      	ldr	r0, [pc, #96]	; (8007270 <_Balloc+0x7c>)
 8007210:	f000 fdce 	bl	8007db0 <__assert_func>
 8007214:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007218:	6006      	str	r6, [r0, #0]
 800721a:	60c6      	str	r6, [r0, #12]
 800721c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800721e:	68f3      	ldr	r3, [r6, #12]
 8007220:	b183      	cbz	r3, 8007244 <_Balloc+0x50>
 8007222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800722a:	b9b8      	cbnz	r0, 800725c <_Balloc+0x68>
 800722c:	2101      	movs	r1, #1
 800722e:	fa01 f605 	lsl.w	r6, r1, r5
 8007232:	1d72      	adds	r2, r6, #5
 8007234:	4620      	mov	r0, r4
 8007236:	0092      	lsls	r2, r2, #2
 8007238:	f000 fb5e 	bl	80078f8 <_calloc_r>
 800723c:	b160      	cbz	r0, 8007258 <_Balloc+0x64>
 800723e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007242:	e00e      	b.n	8007262 <_Balloc+0x6e>
 8007244:	2221      	movs	r2, #33	; 0x21
 8007246:	2104      	movs	r1, #4
 8007248:	4620      	mov	r0, r4
 800724a:	f000 fb55 	bl	80078f8 <_calloc_r>
 800724e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007250:	60f0      	str	r0, [r6, #12]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1e4      	bne.n	8007222 <_Balloc+0x2e>
 8007258:	2000      	movs	r0, #0
 800725a:	bd70      	pop	{r4, r5, r6, pc}
 800725c:	6802      	ldr	r2, [r0, #0]
 800725e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007262:	2300      	movs	r3, #0
 8007264:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007268:	e7f7      	b.n	800725a <_Balloc+0x66>
 800726a:	bf00      	nop
 800726c:	08008a29 	.word	0x08008a29
 8007270:	08008aac 	.word	0x08008aac

08007274 <_Bfree>:
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007278:	4605      	mov	r5, r0
 800727a:	460c      	mov	r4, r1
 800727c:	b976      	cbnz	r6, 800729c <_Bfree+0x28>
 800727e:	2010      	movs	r0, #16
 8007280:	f7ff ff94 	bl	80071ac <malloc>
 8007284:	4602      	mov	r2, r0
 8007286:	6268      	str	r0, [r5, #36]	; 0x24
 8007288:	b920      	cbnz	r0, 8007294 <_Bfree+0x20>
 800728a:	218a      	movs	r1, #138	; 0x8a
 800728c:	4b08      	ldr	r3, [pc, #32]	; (80072b0 <_Bfree+0x3c>)
 800728e:	4809      	ldr	r0, [pc, #36]	; (80072b4 <_Bfree+0x40>)
 8007290:	f000 fd8e 	bl	8007db0 <__assert_func>
 8007294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007298:	6006      	str	r6, [r0, #0]
 800729a:	60c6      	str	r6, [r0, #12]
 800729c:	b13c      	cbz	r4, 80072ae <_Bfree+0x3a>
 800729e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80072a0:	6862      	ldr	r2, [r4, #4]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072a8:	6021      	str	r1, [r4, #0]
 80072aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072ae:	bd70      	pop	{r4, r5, r6, pc}
 80072b0:	08008a29 	.word	0x08008a29
 80072b4:	08008aac 	.word	0x08008aac

080072b8 <__multadd>:
 80072b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072bc:	4607      	mov	r7, r0
 80072be:	460c      	mov	r4, r1
 80072c0:	461e      	mov	r6, r3
 80072c2:	2000      	movs	r0, #0
 80072c4:	690d      	ldr	r5, [r1, #16]
 80072c6:	f101 0c14 	add.w	ip, r1, #20
 80072ca:	f8dc 3000 	ldr.w	r3, [ip]
 80072ce:	3001      	adds	r0, #1
 80072d0:	b299      	uxth	r1, r3
 80072d2:	fb02 6101 	mla	r1, r2, r1, r6
 80072d6:	0c1e      	lsrs	r6, r3, #16
 80072d8:	0c0b      	lsrs	r3, r1, #16
 80072da:	fb02 3306 	mla	r3, r2, r6, r3
 80072de:	b289      	uxth	r1, r1
 80072e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072e4:	4285      	cmp	r5, r0
 80072e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80072ea:	f84c 1b04 	str.w	r1, [ip], #4
 80072ee:	dcec      	bgt.n	80072ca <__multadd+0x12>
 80072f0:	b30e      	cbz	r6, 8007336 <__multadd+0x7e>
 80072f2:	68a3      	ldr	r3, [r4, #8]
 80072f4:	42ab      	cmp	r3, r5
 80072f6:	dc19      	bgt.n	800732c <__multadd+0x74>
 80072f8:	6861      	ldr	r1, [r4, #4]
 80072fa:	4638      	mov	r0, r7
 80072fc:	3101      	adds	r1, #1
 80072fe:	f7ff ff79 	bl	80071f4 <_Balloc>
 8007302:	4680      	mov	r8, r0
 8007304:	b928      	cbnz	r0, 8007312 <__multadd+0x5a>
 8007306:	4602      	mov	r2, r0
 8007308:	21b5      	movs	r1, #181	; 0xb5
 800730a:	4b0c      	ldr	r3, [pc, #48]	; (800733c <__multadd+0x84>)
 800730c:	480c      	ldr	r0, [pc, #48]	; (8007340 <__multadd+0x88>)
 800730e:	f000 fd4f 	bl	8007db0 <__assert_func>
 8007312:	6922      	ldr	r2, [r4, #16]
 8007314:	f104 010c 	add.w	r1, r4, #12
 8007318:	3202      	adds	r2, #2
 800731a:	0092      	lsls	r2, r2, #2
 800731c:	300c      	adds	r0, #12
 800731e:	f7ff ff5b 	bl	80071d8 <memcpy>
 8007322:	4621      	mov	r1, r4
 8007324:	4638      	mov	r0, r7
 8007326:	f7ff ffa5 	bl	8007274 <_Bfree>
 800732a:	4644      	mov	r4, r8
 800732c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007330:	3501      	adds	r5, #1
 8007332:	615e      	str	r6, [r3, #20]
 8007334:	6125      	str	r5, [r4, #16]
 8007336:	4620      	mov	r0, r4
 8007338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800733c:	08008a9b 	.word	0x08008a9b
 8007340:	08008aac 	.word	0x08008aac

08007344 <__hi0bits>:
 8007344:	0c02      	lsrs	r2, r0, #16
 8007346:	0412      	lsls	r2, r2, #16
 8007348:	4603      	mov	r3, r0
 800734a:	b9ca      	cbnz	r2, 8007380 <__hi0bits+0x3c>
 800734c:	0403      	lsls	r3, r0, #16
 800734e:	2010      	movs	r0, #16
 8007350:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007354:	bf04      	itt	eq
 8007356:	021b      	lsleq	r3, r3, #8
 8007358:	3008      	addeq	r0, #8
 800735a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800735e:	bf04      	itt	eq
 8007360:	011b      	lsleq	r3, r3, #4
 8007362:	3004      	addeq	r0, #4
 8007364:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007368:	bf04      	itt	eq
 800736a:	009b      	lsleq	r3, r3, #2
 800736c:	3002      	addeq	r0, #2
 800736e:	2b00      	cmp	r3, #0
 8007370:	db05      	blt.n	800737e <__hi0bits+0x3a>
 8007372:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007376:	f100 0001 	add.w	r0, r0, #1
 800737a:	bf08      	it	eq
 800737c:	2020      	moveq	r0, #32
 800737e:	4770      	bx	lr
 8007380:	2000      	movs	r0, #0
 8007382:	e7e5      	b.n	8007350 <__hi0bits+0xc>

08007384 <__lo0bits>:
 8007384:	6803      	ldr	r3, [r0, #0]
 8007386:	4602      	mov	r2, r0
 8007388:	f013 0007 	ands.w	r0, r3, #7
 800738c:	d00b      	beq.n	80073a6 <__lo0bits+0x22>
 800738e:	07d9      	lsls	r1, r3, #31
 8007390:	d421      	bmi.n	80073d6 <__lo0bits+0x52>
 8007392:	0798      	lsls	r0, r3, #30
 8007394:	bf49      	itett	mi
 8007396:	085b      	lsrmi	r3, r3, #1
 8007398:	089b      	lsrpl	r3, r3, #2
 800739a:	2001      	movmi	r0, #1
 800739c:	6013      	strmi	r3, [r2, #0]
 800739e:	bf5c      	itt	pl
 80073a0:	2002      	movpl	r0, #2
 80073a2:	6013      	strpl	r3, [r2, #0]
 80073a4:	4770      	bx	lr
 80073a6:	b299      	uxth	r1, r3
 80073a8:	b909      	cbnz	r1, 80073ae <__lo0bits+0x2a>
 80073aa:	2010      	movs	r0, #16
 80073ac:	0c1b      	lsrs	r3, r3, #16
 80073ae:	b2d9      	uxtb	r1, r3
 80073b0:	b909      	cbnz	r1, 80073b6 <__lo0bits+0x32>
 80073b2:	3008      	adds	r0, #8
 80073b4:	0a1b      	lsrs	r3, r3, #8
 80073b6:	0719      	lsls	r1, r3, #28
 80073b8:	bf04      	itt	eq
 80073ba:	091b      	lsreq	r3, r3, #4
 80073bc:	3004      	addeq	r0, #4
 80073be:	0799      	lsls	r1, r3, #30
 80073c0:	bf04      	itt	eq
 80073c2:	089b      	lsreq	r3, r3, #2
 80073c4:	3002      	addeq	r0, #2
 80073c6:	07d9      	lsls	r1, r3, #31
 80073c8:	d403      	bmi.n	80073d2 <__lo0bits+0x4e>
 80073ca:	085b      	lsrs	r3, r3, #1
 80073cc:	f100 0001 	add.w	r0, r0, #1
 80073d0:	d003      	beq.n	80073da <__lo0bits+0x56>
 80073d2:	6013      	str	r3, [r2, #0]
 80073d4:	4770      	bx	lr
 80073d6:	2000      	movs	r0, #0
 80073d8:	4770      	bx	lr
 80073da:	2020      	movs	r0, #32
 80073dc:	4770      	bx	lr
	...

080073e0 <__i2b>:
 80073e0:	b510      	push	{r4, lr}
 80073e2:	460c      	mov	r4, r1
 80073e4:	2101      	movs	r1, #1
 80073e6:	f7ff ff05 	bl	80071f4 <_Balloc>
 80073ea:	4602      	mov	r2, r0
 80073ec:	b928      	cbnz	r0, 80073fa <__i2b+0x1a>
 80073ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80073f2:	4b04      	ldr	r3, [pc, #16]	; (8007404 <__i2b+0x24>)
 80073f4:	4804      	ldr	r0, [pc, #16]	; (8007408 <__i2b+0x28>)
 80073f6:	f000 fcdb 	bl	8007db0 <__assert_func>
 80073fa:	2301      	movs	r3, #1
 80073fc:	6144      	str	r4, [r0, #20]
 80073fe:	6103      	str	r3, [r0, #16]
 8007400:	bd10      	pop	{r4, pc}
 8007402:	bf00      	nop
 8007404:	08008a9b 	.word	0x08008a9b
 8007408:	08008aac 	.word	0x08008aac

0800740c <__multiply>:
 800740c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007410:	4691      	mov	r9, r2
 8007412:	690a      	ldr	r2, [r1, #16]
 8007414:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007418:	460c      	mov	r4, r1
 800741a:	429a      	cmp	r2, r3
 800741c:	bfbe      	ittt	lt
 800741e:	460b      	movlt	r3, r1
 8007420:	464c      	movlt	r4, r9
 8007422:	4699      	movlt	r9, r3
 8007424:	6927      	ldr	r7, [r4, #16]
 8007426:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800742a:	68a3      	ldr	r3, [r4, #8]
 800742c:	6861      	ldr	r1, [r4, #4]
 800742e:	eb07 060a 	add.w	r6, r7, sl
 8007432:	42b3      	cmp	r3, r6
 8007434:	b085      	sub	sp, #20
 8007436:	bfb8      	it	lt
 8007438:	3101      	addlt	r1, #1
 800743a:	f7ff fedb 	bl	80071f4 <_Balloc>
 800743e:	b930      	cbnz	r0, 800744e <__multiply+0x42>
 8007440:	4602      	mov	r2, r0
 8007442:	f240 115d 	movw	r1, #349	; 0x15d
 8007446:	4b43      	ldr	r3, [pc, #268]	; (8007554 <__multiply+0x148>)
 8007448:	4843      	ldr	r0, [pc, #268]	; (8007558 <__multiply+0x14c>)
 800744a:	f000 fcb1 	bl	8007db0 <__assert_func>
 800744e:	f100 0514 	add.w	r5, r0, #20
 8007452:	462b      	mov	r3, r5
 8007454:	2200      	movs	r2, #0
 8007456:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800745a:	4543      	cmp	r3, r8
 800745c:	d321      	bcc.n	80074a2 <__multiply+0x96>
 800745e:	f104 0314 	add.w	r3, r4, #20
 8007462:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007466:	f109 0314 	add.w	r3, r9, #20
 800746a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800746e:	9202      	str	r2, [sp, #8]
 8007470:	1b3a      	subs	r2, r7, r4
 8007472:	3a15      	subs	r2, #21
 8007474:	f022 0203 	bic.w	r2, r2, #3
 8007478:	3204      	adds	r2, #4
 800747a:	f104 0115 	add.w	r1, r4, #21
 800747e:	428f      	cmp	r7, r1
 8007480:	bf38      	it	cc
 8007482:	2204      	movcc	r2, #4
 8007484:	9201      	str	r2, [sp, #4]
 8007486:	9a02      	ldr	r2, [sp, #8]
 8007488:	9303      	str	r3, [sp, #12]
 800748a:	429a      	cmp	r2, r3
 800748c:	d80c      	bhi.n	80074a8 <__multiply+0x9c>
 800748e:	2e00      	cmp	r6, #0
 8007490:	dd03      	ble.n	800749a <__multiply+0x8e>
 8007492:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007496:	2b00      	cmp	r3, #0
 8007498:	d059      	beq.n	800754e <__multiply+0x142>
 800749a:	6106      	str	r6, [r0, #16]
 800749c:	b005      	add	sp, #20
 800749e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074a2:	f843 2b04 	str.w	r2, [r3], #4
 80074a6:	e7d8      	b.n	800745a <__multiply+0x4e>
 80074a8:	f8b3 a000 	ldrh.w	sl, [r3]
 80074ac:	f1ba 0f00 	cmp.w	sl, #0
 80074b0:	d023      	beq.n	80074fa <__multiply+0xee>
 80074b2:	46a9      	mov	r9, r5
 80074b4:	f04f 0c00 	mov.w	ip, #0
 80074b8:	f104 0e14 	add.w	lr, r4, #20
 80074bc:	f85e 2b04 	ldr.w	r2, [lr], #4
 80074c0:	f8d9 1000 	ldr.w	r1, [r9]
 80074c4:	fa1f fb82 	uxth.w	fp, r2
 80074c8:	b289      	uxth	r1, r1
 80074ca:	fb0a 110b 	mla	r1, sl, fp, r1
 80074ce:	4461      	add	r1, ip
 80074d0:	f8d9 c000 	ldr.w	ip, [r9]
 80074d4:	0c12      	lsrs	r2, r2, #16
 80074d6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80074da:	fb0a c202 	mla	r2, sl, r2, ip
 80074de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80074e2:	b289      	uxth	r1, r1
 80074e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80074e8:	4577      	cmp	r7, lr
 80074ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074ee:	f849 1b04 	str.w	r1, [r9], #4
 80074f2:	d8e3      	bhi.n	80074bc <__multiply+0xb0>
 80074f4:	9a01      	ldr	r2, [sp, #4]
 80074f6:	f845 c002 	str.w	ip, [r5, r2]
 80074fa:	9a03      	ldr	r2, [sp, #12]
 80074fc:	3304      	adds	r3, #4
 80074fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007502:	f1b9 0f00 	cmp.w	r9, #0
 8007506:	d020      	beq.n	800754a <__multiply+0x13e>
 8007508:	46ae      	mov	lr, r5
 800750a:	f04f 0a00 	mov.w	sl, #0
 800750e:	6829      	ldr	r1, [r5, #0]
 8007510:	f104 0c14 	add.w	ip, r4, #20
 8007514:	f8bc b000 	ldrh.w	fp, [ip]
 8007518:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800751c:	b289      	uxth	r1, r1
 800751e:	fb09 220b 	mla	r2, r9, fp, r2
 8007522:	4492      	add	sl, r2
 8007524:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007528:	f84e 1b04 	str.w	r1, [lr], #4
 800752c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007530:	f8be 1000 	ldrh.w	r1, [lr]
 8007534:	0c12      	lsrs	r2, r2, #16
 8007536:	fb09 1102 	mla	r1, r9, r2, r1
 800753a:	4567      	cmp	r7, ip
 800753c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007540:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007544:	d8e6      	bhi.n	8007514 <__multiply+0x108>
 8007546:	9a01      	ldr	r2, [sp, #4]
 8007548:	50a9      	str	r1, [r5, r2]
 800754a:	3504      	adds	r5, #4
 800754c:	e79b      	b.n	8007486 <__multiply+0x7a>
 800754e:	3e01      	subs	r6, #1
 8007550:	e79d      	b.n	800748e <__multiply+0x82>
 8007552:	bf00      	nop
 8007554:	08008a9b 	.word	0x08008a9b
 8007558:	08008aac 	.word	0x08008aac

0800755c <__pow5mult>:
 800755c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007560:	4615      	mov	r5, r2
 8007562:	f012 0203 	ands.w	r2, r2, #3
 8007566:	4606      	mov	r6, r0
 8007568:	460f      	mov	r7, r1
 800756a:	d007      	beq.n	800757c <__pow5mult+0x20>
 800756c:	4c25      	ldr	r4, [pc, #148]	; (8007604 <__pow5mult+0xa8>)
 800756e:	3a01      	subs	r2, #1
 8007570:	2300      	movs	r3, #0
 8007572:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007576:	f7ff fe9f 	bl	80072b8 <__multadd>
 800757a:	4607      	mov	r7, r0
 800757c:	10ad      	asrs	r5, r5, #2
 800757e:	d03d      	beq.n	80075fc <__pow5mult+0xa0>
 8007580:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007582:	b97c      	cbnz	r4, 80075a4 <__pow5mult+0x48>
 8007584:	2010      	movs	r0, #16
 8007586:	f7ff fe11 	bl	80071ac <malloc>
 800758a:	4602      	mov	r2, r0
 800758c:	6270      	str	r0, [r6, #36]	; 0x24
 800758e:	b928      	cbnz	r0, 800759c <__pow5mult+0x40>
 8007590:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007594:	4b1c      	ldr	r3, [pc, #112]	; (8007608 <__pow5mult+0xac>)
 8007596:	481d      	ldr	r0, [pc, #116]	; (800760c <__pow5mult+0xb0>)
 8007598:	f000 fc0a 	bl	8007db0 <__assert_func>
 800759c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075a0:	6004      	str	r4, [r0, #0]
 80075a2:	60c4      	str	r4, [r0, #12]
 80075a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80075a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075ac:	b94c      	cbnz	r4, 80075c2 <__pow5mult+0x66>
 80075ae:	f240 2171 	movw	r1, #625	; 0x271
 80075b2:	4630      	mov	r0, r6
 80075b4:	f7ff ff14 	bl	80073e0 <__i2b>
 80075b8:	2300      	movs	r3, #0
 80075ba:	4604      	mov	r4, r0
 80075bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80075c0:	6003      	str	r3, [r0, #0]
 80075c2:	f04f 0900 	mov.w	r9, #0
 80075c6:	07eb      	lsls	r3, r5, #31
 80075c8:	d50a      	bpl.n	80075e0 <__pow5mult+0x84>
 80075ca:	4639      	mov	r1, r7
 80075cc:	4622      	mov	r2, r4
 80075ce:	4630      	mov	r0, r6
 80075d0:	f7ff ff1c 	bl	800740c <__multiply>
 80075d4:	4680      	mov	r8, r0
 80075d6:	4639      	mov	r1, r7
 80075d8:	4630      	mov	r0, r6
 80075da:	f7ff fe4b 	bl	8007274 <_Bfree>
 80075de:	4647      	mov	r7, r8
 80075e0:	106d      	asrs	r5, r5, #1
 80075e2:	d00b      	beq.n	80075fc <__pow5mult+0xa0>
 80075e4:	6820      	ldr	r0, [r4, #0]
 80075e6:	b938      	cbnz	r0, 80075f8 <__pow5mult+0x9c>
 80075e8:	4622      	mov	r2, r4
 80075ea:	4621      	mov	r1, r4
 80075ec:	4630      	mov	r0, r6
 80075ee:	f7ff ff0d 	bl	800740c <__multiply>
 80075f2:	6020      	str	r0, [r4, #0]
 80075f4:	f8c0 9000 	str.w	r9, [r0]
 80075f8:	4604      	mov	r4, r0
 80075fa:	e7e4      	b.n	80075c6 <__pow5mult+0x6a>
 80075fc:	4638      	mov	r0, r7
 80075fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007602:	bf00      	nop
 8007604:	08008bf8 	.word	0x08008bf8
 8007608:	08008a29 	.word	0x08008a29
 800760c:	08008aac 	.word	0x08008aac

08007610 <__lshift>:
 8007610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007614:	460c      	mov	r4, r1
 8007616:	4607      	mov	r7, r0
 8007618:	4691      	mov	r9, r2
 800761a:	6923      	ldr	r3, [r4, #16]
 800761c:	6849      	ldr	r1, [r1, #4]
 800761e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007622:	68a3      	ldr	r3, [r4, #8]
 8007624:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007628:	f108 0601 	add.w	r6, r8, #1
 800762c:	42b3      	cmp	r3, r6
 800762e:	db0b      	blt.n	8007648 <__lshift+0x38>
 8007630:	4638      	mov	r0, r7
 8007632:	f7ff fddf 	bl	80071f4 <_Balloc>
 8007636:	4605      	mov	r5, r0
 8007638:	b948      	cbnz	r0, 800764e <__lshift+0x3e>
 800763a:	4602      	mov	r2, r0
 800763c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007640:	4b29      	ldr	r3, [pc, #164]	; (80076e8 <__lshift+0xd8>)
 8007642:	482a      	ldr	r0, [pc, #168]	; (80076ec <__lshift+0xdc>)
 8007644:	f000 fbb4 	bl	8007db0 <__assert_func>
 8007648:	3101      	adds	r1, #1
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	e7ee      	b.n	800762c <__lshift+0x1c>
 800764e:	2300      	movs	r3, #0
 8007650:	f100 0114 	add.w	r1, r0, #20
 8007654:	f100 0210 	add.w	r2, r0, #16
 8007658:	4618      	mov	r0, r3
 800765a:	4553      	cmp	r3, sl
 800765c:	db37      	blt.n	80076ce <__lshift+0xbe>
 800765e:	6920      	ldr	r0, [r4, #16]
 8007660:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007664:	f104 0314 	add.w	r3, r4, #20
 8007668:	f019 091f 	ands.w	r9, r9, #31
 800766c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007670:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007674:	d02f      	beq.n	80076d6 <__lshift+0xc6>
 8007676:	468a      	mov	sl, r1
 8007678:	f04f 0c00 	mov.w	ip, #0
 800767c:	f1c9 0e20 	rsb	lr, r9, #32
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	fa02 f209 	lsl.w	r2, r2, r9
 8007686:	ea42 020c 	orr.w	r2, r2, ip
 800768a:	f84a 2b04 	str.w	r2, [sl], #4
 800768e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007692:	4298      	cmp	r0, r3
 8007694:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007698:	d8f2      	bhi.n	8007680 <__lshift+0x70>
 800769a:	1b03      	subs	r3, r0, r4
 800769c:	3b15      	subs	r3, #21
 800769e:	f023 0303 	bic.w	r3, r3, #3
 80076a2:	3304      	adds	r3, #4
 80076a4:	f104 0215 	add.w	r2, r4, #21
 80076a8:	4290      	cmp	r0, r2
 80076aa:	bf38      	it	cc
 80076ac:	2304      	movcc	r3, #4
 80076ae:	f841 c003 	str.w	ip, [r1, r3]
 80076b2:	f1bc 0f00 	cmp.w	ip, #0
 80076b6:	d001      	beq.n	80076bc <__lshift+0xac>
 80076b8:	f108 0602 	add.w	r6, r8, #2
 80076bc:	3e01      	subs	r6, #1
 80076be:	4638      	mov	r0, r7
 80076c0:	4621      	mov	r1, r4
 80076c2:	612e      	str	r6, [r5, #16]
 80076c4:	f7ff fdd6 	bl	8007274 <_Bfree>
 80076c8:	4628      	mov	r0, r5
 80076ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80076d2:	3301      	adds	r3, #1
 80076d4:	e7c1      	b.n	800765a <__lshift+0x4a>
 80076d6:	3904      	subs	r1, #4
 80076d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80076dc:	4298      	cmp	r0, r3
 80076de:	f841 2f04 	str.w	r2, [r1, #4]!
 80076e2:	d8f9      	bhi.n	80076d8 <__lshift+0xc8>
 80076e4:	e7ea      	b.n	80076bc <__lshift+0xac>
 80076e6:	bf00      	nop
 80076e8:	08008a9b 	.word	0x08008a9b
 80076ec:	08008aac 	.word	0x08008aac

080076f0 <__mcmp>:
 80076f0:	4603      	mov	r3, r0
 80076f2:	690a      	ldr	r2, [r1, #16]
 80076f4:	6900      	ldr	r0, [r0, #16]
 80076f6:	b530      	push	{r4, r5, lr}
 80076f8:	1a80      	subs	r0, r0, r2
 80076fa:	d10d      	bne.n	8007718 <__mcmp+0x28>
 80076fc:	3314      	adds	r3, #20
 80076fe:	3114      	adds	r1, #20
 8007700:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007704:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007708:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800770c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007710:	4295      	cmp	r5, r2
 8007712:	d002      	beq.n	800771a <__mcmp+0x2a>
 8007714:	d304      	bcc.n	8007720 <__mcmp+0x30>
 8007716:	2001      	movs	r0, #1
 8007718:	bd30      	pop	{r4, r5, pc}
 800771a:	42a3      	cmp	r3, r4
 800771c:	d3f4      	bcc.n	8007708 <__mcmp+0x18>
 800771e:	e7fb      	b.n	8007718 <__mcmp+0x28>
 8007720:	f04f 30ff 	mov.w	r0, #4294967295
 8007724:	e7f8      	b.n	8007718 <__mcmp+0x28>
	...

08007728 <__mdiff>:
 8007728:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800772c:	460d      	mov	r5, r1
 800772e:	4607      	mov	r7, r0
 8007730:	4611      	mov	r1, r2
 8007732:	4628      	mov	r0, r5
 8007734:	4614      	mov	r4, r2
 8007736:	f7ff ffdb 	bl	80076f0 <__mcmp>
 800773a:	1e06      	subs	r6, r0, #0
 800773c:	d111      	bne.n	8007762 <__mdiff+0x3a>
 800773e:	4631      	mov	r1, r6
 8007740:	4638      	mov	r0, r7
 8007742:	f7ff fd57 	bl	80071f4 <_Balloc>
 8007746:	4602      	mov	r2, r0
 8007748:	b928      	cbnz	r0, 8007756 <__mdiff+0x2e>
 800774a:	f240 2132 	movw	r1, #562	; 0x232
 800774e:	4b3a      	ldr	r3, [pc, #232]	; (8007838 <__mdiff+0x110>)
 8007750:	483a      	ldr	r0, [pc, #232]	; (800783c <__mdiff+0x114>)
 8007752:	f000 fb2d 	bl	8007db0 <__assert_func>
 8007756:	2301      	movs	r3, #1
 8007758:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800775c:	4610      	mov	r0, r2
 800775e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007762:	bfa4      	itt	ge
 8007764:	4623      	movge	r3, r4
 8007766:	462c      	movge	r4, r5
 8007768:	4638      	mov	r0, r7
 800776a:	6861      	ldr	r1, [r4, #4]
 800776c:	bfa6      	itte	ge
 800776e:	461d      	movge	r5, r3
 8007770:	2600      	movge	r6, #0
 8007772:	2601      	movlt	r6, #1
 8007774:	f7ff fd3e 	bl	80071f4 <_Balloc>
 8007778:	4602      	mov	r2, r0
 800777a:	b918      	cbnz	r0, 8007784 <__mdiff+0x5c>
 800777c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007780:	4b2d      	ldr	r3, [pc, #180]	; (8007838 <__mdiff+0x110>)
 8007782:	e7e5      	b.n	8007750 <__mdiff+0x28>
 8007784:	f102 0814 	add.w	r8, r2, #20
 8007788:	46c2      	mov	sl, r8
 800778a:	f04f 0c00 	mov.w	ip, #0
 800778e:	6927      	ldr	r7, [r4, #16]
 8007790:	60c6      	str	r6, [r0, #12]
 8007792:	692e      	ldr	r6, [r5, #16]
 8007794:	f104 0014 	add.w	r0, r4, #20
 8007798:	f105 0914 	add.w	r9, r5, #20
 800779c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80077a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80077a4:	3410      	adds	r4, #16
 80077a6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80077aa:	f859 3b04 	ldr.w	r3, [r9], #4
 80077ae:	fa1f f18b 	uxth.w	r1, fp
 80077b2:	448c      	add	ip, r1
 80077b4:	b299      	uxth	r1, r3
 80077b6:	0c1b      	lsrs	r3, r3, #16
 80077b8:	ebac 0101 	sub.w	r1, ip, r1
 80077bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80077c0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80077c4:	b289      	uxth	r1, r1
 80077c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80077ca:	454e      	cmp	r6, r9
 80077cc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80077d0:	f84a 3b04 	str.w	r3, [sl], #4
 80077d4:	d8e7      	bhi.n	80077a6 <__mdiff+0x7e>
 80077d6:	1b73      	subs	r3, r6, r5
 80077d8:	3b15      	subs	r3, #21
 80077da:	f023 0303 	bic.w	r3, r3, #3
 80077de:	3515      	adds	r5, #21
 80077e0:	3304      	adds	r3, #4
 80077e2:	42ae      	cmp	r6, r5
 80077e4:	bf38      	it	cc
 80077e6:	2304      	movcc	r3, #4
 80077e8:	4418      	add	r0, r3
 80077ea:	4443      	add	r3, r8
 80077ec:	461e      	mov	r6, r3
 80077ee:	4605      	mov	r5, r0
 80077f0:	4575      	cmp	r5, lr
 80077f2:	d30e      	bcc.n	8007812 <__mdiff+0xea>
 80077f4:	f10e 0103 	add.w	r1, lr, #3
 80077f8:	1a09      	subs	r1, r1, r0
 80077fa:	f021 0103 	bic.w	r1, r1, #3
 80077fe:	3803      	subs	r0, #3
 8007800:	4586      	cmp	lr, r0
 8007802:	bf38      	it	cc
 8007804:	2100      	movcc	r1, #0
 8007806:	4419      	add	r1, r3
 8007808:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800780c:	b18b      	cbz	r3, 8007832 <__mdiff+0x10a>
 800780e:	6117      	str	r7, [r2, #16]
 8007810:	e7a4      	b.n	800775c <__mdiff+0x34>
 8007812:	f855 8b04 	ldr.w	r8, [r5], #4
 8007816:	fa1f f188 	uxth.w	r1, r8
 800781a:	4461      	add	r1, ip
 800781c:	140c      	asrs	r4, r1, #16
 800781e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007822:	b289      	uxth	r1, r1
 8007824:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007828:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800782c:	f846 1b04 	str.w	r1, [r6], #4
 8007830:	e7de      	b.n	80077f0 <__mdiff+0xc8>
 8007832:	3f01      	subs	r7, #1
 8007834:	e7e8      	b.n	8007808 <__mdiff+0xe0>
 8007836:	bf00      	nop
 8007838:	08008a9b 	.word	0x08008a9b
 800783c:	08008aac 	.word	0x08008aac

08007840 <__d2b>:
 8007840:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007844:	2101      	movs	r1, #1
 8007846:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800784a:	4690      	mov	r8, r2
 800784c:	461d      	mov	r5, r3
 800784e:	f7ff fcd1 	bl	80071f4 <_Balloc>
 8007852:	4604      	mov	r4, r0
 8007854:	b930      	cbnz	r0, 8007864 <__d2b+0x24>
 8007856:	4602      	mov	r2, r0
 8007858:	f240 310a 	movw	r1, #778	; 0x30a
 800785c:	4b24      	ldr	r3, [pc, #144]	; (80078f0 <__d2b+0xb0>)
 800785e:	4825      	ldr	r0, [pc, #148]	; (80078f4 <__d2b+0xb4>)
 8007860:	f000 faa6 	bl	8007db0 <__assert_func>
 8007864:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007868:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800786c:	bb2d      	cbnz	r5, 80078ba <__d2b+0x7a>
 800786e:	9301      	str	r3, [sp, #4]
 8007870:	f1b8 0300 	subs.w	r3, r8, #0
 8007874:	d026      	beq.n	80078c4 <__d2b+0x84>
 8007876:	4668      	mov	r0, sp
 8007878:	9300      	str	r3, [sp, #0]
 800787a:	f7ff fd83 	bl	8007384 <__lo0bits>
 800787e:	9900      	ldr	r1, [sp, #0]
 8007880:	b1f0      	cbz	r0, 80078c0 <__d2b+0x80>
 8007882:	9a01      	ldr	r2, [sp, #4]
 8007884:	f1c0 0320 	rsb	r3, r0, #32
 8007888:	fa02 f303 	lsl.w	r3, r2, r3
 800788c:	430b      	orrs	r3, r1
 800788e:	40c2      	lsrs	r2, r0
 8007890:	6163      	str	r3, [r4, #20]
 8007892:	9201      	str	r2, [sp, #4]
 8007894:	9b01      	ldr	r3, [sp, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	bf14      	ite	ne
 800789a:	2102      	movne	r1, #2
 800789c:	2101      	moveq	r1, #1
 800789e:	61a3      	str	r3, [r4, #24]
 80078a0:	6121      	str	r1, [r4, #16]
 80078a2:	b1c5      	cbz	r5, 80078d6 <__d2b+0x96>
 80078a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80078a8:	4405      	add	r5, r0
 80078aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80078ae:	603d      	str	r5, [r7, #0]
 80078b0:	6030      	str	r0, [r6, #0]
 80078b2:	4620      	mov	r0, r4
 80078b4:	b002      	add	sp, #8
 80078b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078be:	e7d6      	b.n	800786e <__d2b+0x2e>
 80078c0:	6161      	str	r1, [r4, #20]
 80078c2:	e7e7      	b.n	8007894 <__d2b+0x54>
 80078c4:	a801      	add	r0, sp, #4
 80078c6:	f7ff fd5d 	bl	8007384 <__lo0bits>
 80078ca:	2101      	movs	r1, #1
 80078cc:	9b01      	ldr	r3, [sp, #4]
 80078ce:	6121      	str	r1, [r4, #16]
 80078d0:	6163      	str	r3, [r4, #20]
 80078d2:	3020      	adds	r0, #32
 80078d4:	e7e5      	b.n	80078a2 <__d2b+0x62>
 80078d6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80078da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078de:	6038      	str	r0, [r7, #0]
 80078e0:	6918      	ldr	r0, [r3, #16]
 80078e2:	f7ff fd2f 	bl	8007344 <__hi0bits>
 80078e6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80078ea:	6031      	str	r1, [r6, #0]
 80078ec:	e7e1      	b.n	80078b2 <__d2b+0x72>
 80078ee:	bf00      	nop
 80078f0:	08008a9b 	.word	0x08008a9b
 80078f4:	08008aac 	.word	0x08008aac

080078f8 <_calloc_r>:
 80078f8:	b570      	push	{r4, r5, r6, lr}
 80078fa:	fba1 5402 	umull	r5, r4, r1, r2
 80078fe:	b934      	cbnz	r4, 800790e <_calloc_r+0x16>
 8007900:	4629      	mov	r1, r5
 8007902:	f000 f875 	bl	80079f0 <_malloc_r>
 8007906:	4606      	mov	r6, r0
 8007908:	b928      	cbnz	r0, 8007916 <_calloc_r+0x1e>
 800790a:	4630      	mov	r0, r6
 800790c:	bd70      	pop	{r4, r5, r6, pc}
 800790e:	220c      	movs	r2, #12
 8007910:	2600      	movs	r6, #0
 8007912:	6002      	str	r2, [r0, #0]
 8007914:	e7f9      	b.n	800790a <_calloc_r+0x12>
 8007916:	462a      	mov	r2, r5
 8007918:	4621      	mov	r1, r4
 800791a:	f7fe f91f 	bl	8005b5c <memset>
 800791e:	e7f4      	b.n	800790a <_calloc_r+0x12>

08007920 <_free_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4605      	mov	r5, r0
 8007924:	2900      	cmp	r1, #0
 8007926:	d040      	beq.n	80079aa <_free_r+0x8a>
 8007928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800792c:	1f0c      	subs	r4, r1, #4
 800792e:	2b00      	cmp	r3, #0
 8007930:	bfb8      	it	lt
 8007932:	18e4      	addlt	r4, r4, r3
 8007934:	f000 fa98 	bl	8007e68 <__malloc_lock>
 8007938:	4a1c      	ldr	r2, [pc, #112]	; (80079ac <_free_r+0x8c>)
 800793a:	6813      	ldr	r3, [r2, #0]
 800793c:	b933      	cbnz	r3, 800794c <_free_r+0x2c>
 800793e:	6063      	str	r3, [r4, #4]
 8007940:	6014      	str	r4, [r2, #0]
 8007942:	4628      	mov	r0, r5
 8007944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007948:	f000 ba94 	b.w	8007e74 <__malloc_unlock>
 800794c:	42a3      	cmp	r3, r4
 800794e:	d908      	bls.n	8007962 <_free_r+0x42>
 8007950:	6820      	ldr	r0, [r4, #0]
 8007952:	1821      	adds	r1, r4, r0
 8007954:	428b      	cmp	r3, r1
 8007956:	bf01      	itttt	eq
 8007958:	6819      	ldreq	r1, [r3, #0]
 800795a:	685b      	ldreq	r3, [r3, #4]
 800795c:	1809      	addeq	r1, r1, r0
 800795e:	6021      	streq	r1, [r4, #0]
 8007960:	e7ed      	b.n	800793e <_free_r+0x1e>
 8007962:	461a      	mov	r2, r3
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	b10b      	cbz	r3, 800796c <_free_r+0x4c>
 8007968:	42a3      	cmp	r3, r4
 800796a:	d9fa      	bls.n	8007962 <_free_r+0x42>
 800796c:	6811      	ldr	r1, [r2, #0]
 800796e:	1850      	adds	r0, r2, r1
 8007970:	42a0      	cmp	r0, r4
 8007972:	d10b      	bne.n	800798c <_free_r+0x6c>
 8007974:	6820      	ldr	r0, [r4, #0]
 8007976:	4401      	add	r1, r0
 8007978:	1850      	adds	r0, r2, r1
 800797a:	4283      	cmp	r3, r0
 800797c:	6011      	str	r1, [r2, #0]
 800797e:	d1e0      	bne.n	8007942 <_free_r+0x22>
 8007980:	6818      	ldr	r0, [r3, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	4401      	add	r1, r0
 8007986:	6011      	str	r1, [r2, #0]
 8007988:	6053      	str	r3, [r2, #4]
 800798a:	e7da      	b.n	8007942 <_free_r+0x22>
 800798c:	d902      	bls.n	8007994 <_free_r+0x74>
 800798e:	230c      	movs	r3, #12
 8007990:	602b      	str	r3, [r5, #0]
 8007992:	e7d6      	b.n	8007942 <_free_r+0x22>
 8007994:	6820      	ldr	r0, [r4, #0]
 8007996:	1821      	adds	r1, r4, r0
 8007998:	428b      	cmp	r3, r1
 800799a:	bf01      	itttt	eq
 800799c:	6819      	ldreq	r1, [r3, #0]
 800799e:	685b      	ldreq	r3, [r3, #4]
 80079a0:	1809      	addeq	r1, r1, r0
 80079a2:	6021      	streq	r1, [r4, #0]
 80079a4:	6063      	str	r3, [r4, #4]
 80079a6:	6054      	str	r4, [r2, #4]
 80079a8:	e7cb      	b.n	8007942 <_free_r+0x22>
 80079aa:	bd38      	pop	{r3, r4, r5, pc}
 80079ac:	20000368 	.word	0x20000368

080079b0 <sbrk_aligned>:
 80079b0:	b570      	push	{r4, r5, r6, lr}
 80079b2:	4e0e      	ldr	r6, [pc, #56]	; (80079ec <sbrk_aligned+0x3c>)
 80079b4:	460c      	mov	r4, r1
 80079b6:	6831      	ldr	r1, [r6, #0]
 80079b8:	4605      	mov	r5, r0
 80079ba:	b911      	cbnz	r1, 80079c2 <sbrk_aligned+0x12>
 80079bc:	f000 f9e8 	bl	8007d90 <_sbrk_r>
 80079c0:	6030      	str	r0, [r6, #0]
 80079c2:	4621      	mov	r1, r4
 80079c4:	4628      	mov	r0, r5
 80079c6:	f000 f9e3 	bl	8007d90 <_sbrk_r>
 80079ca:	1c43      	adds	r3, r0, #1
 80079cc:	d00a      	beq.n	80079e4 <sbrk_aligned+0x34>
 80079ce:	1cc4      	adds	r4, r0, #3
 80079d0:	f024 0403 	bic.w	r4, r4, #3
 80079d4:	42a0      	cmp	r0, r4
 80079d6:	d007      	beq.n	80079e8 <sbrk_aligned+0x38>
 80079d8:	1a21      	subs	r1, r4, r0
 80079da:	4628      	mov	r0, r5
 80079dc:	f000 f9d8 	bl	8007d90 <_sbrk_r>
 80079e0:	3001      	adds	r0, #1
 80079e2:	d101      	bne.n	80079e8 <sbrk_aligned+0x38>
 80079e4:	f04f 34ff 	mov.w	r4, #4294967295
 80079e8:	4620      	mov	r0, r4
 80079ea:	bd70      	pop	{r4, r5, r6, pc}
 80079ec:	2000036c 	.word	0x2000036c

080079f0 <_malloc_r>:
 80079f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f4:	1ccd      	adds	r5, r1, #3
 80079f6:	f025 0503 	bic.w	r5, r5, #3
 80079fa:	3508      	adds	r5, #8
 80079fc:	2d0c      	cmp	r5, #12
 80079fe:	bf38      	it	cc
 8007a00:	250c      	movcc	r5, #12
 8007a02:	2d00      	cmp	r5, #0
 8007a04:	4607      	mov	r7, r0
 8007a06:	db01      	blt.n	8007a0c <_malloc_r+0x1c>
 8007a08:	42a9      	cmp	r1, r5
 8007a0a:	d905      	bls.n	8007a18 <_malloc_r+0x28>
 8007a0c:	230c      	movs	r3, #12
 8007a0e:	2600      	movs	r6, #0
 8007a10:	603b      	str	r3, [r7, #0]
 8007a12:	4630      	mov	r0, r6
 8007a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a18:	4e2e      	ldr	r6, [pc, #184]	; (8007ad4 <_malloc_r+0xe4>)
 8007a1a:	f000 fa25 	bl	8007e68 <__malloc_lock>
 8007a1e:	6833      	ldr	r3, [r6, #0]
 8007a20:	461c      	mov	r4, r3
 8007a22:	bb34      	cbnz	r4, 8007a72 <_malloc_r+0x82>
 8007a24:	4629      	mov	r1, r5
 8007a26:	4638      	mov	r0, r7
 8007a28:	f7ff ffc2 	bl	80079b0 <sbrk_aligned>
 8007a2c:	1c43      	adds	r3, r0, #1
 8007a2e:	4604      	mov	r4, r0
 8007a30:	d14d      	bne.n	8007ace <_malloc_r+0xde>
 8007a32:	6834      	ldr	r4, [r6, #0]
 8007a34:	4626      	mov	r6, r4
 8007a36:	2e00      	cmp	r6, #0
 8007a38:	d140      	bne.n	8007abc <_malloc_r+0xcc>
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	4638      	mov	r0, r7
 8007a40:	eb04 0803 	add.w	r8, r4, r3
 8007a44:	f000 f9a4 	bl	8007d90 <_sbrk_r>
 8007a48:	4580      	cmp	r8, r0
 8007a4a:	d13a      	bne.n	8007ac2 <_malloc_r+0xd2>
 8007a4c:	6821      	ldr	r1, [r4, #0]
 8007a4e:	3503      	adds	r5, #3
 8007a50:	1a6d      	subs	r5, r5, r1
 8007a52:	f025 0503 	bic.w	r5, r5, #3
 8007a56:	3508      	adds	r5, #8
 8007a58:	2d0c      	cmp	r5, #12
 8007a5a:	bf38      	it	cc
 8007a5c:	250c      	movcc	r5, #12
 8007a5e:	4638      	mov	r0, r7
 8007a60:	4629      	mov	r1, r5
 8007a62:	f7ff ffa5 	bl	80079b0 <sbrk_aligned>
 8007a66:	3001      	adds	r0, #1
 8007a68:	d02b      	beq.n	8007ac2 <_malloc_r+0xd2>
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	442b      	add	r3, r5
 8007a6e:	6023      	str	r3, [r4, #0]
 8007a70:	e00e      	b.n	8007a90 <_malloc_r+0xa0>
 8007a72:	6822      	ldr	r2, [r4, #0]
 8007a74:	1b52      	subs	r2, r2, r5
 8007a76:	d41e      	bmi.n	8007ab6 <_malloc_r+0xc6>
 8007a78:	2a0b      	cmp	r2, #11
 8007a7a:	d916      	bls.n	8007aaa <_malloc_r+0xba>
 8007a7c:	1961      	adds	r1, r4, r5
 8007a7e:	42a3      	cmp	r3, r4
 8007a80:	6025      	str	r5, [r4, #0]
 8007a82:	bf18      	it	ne
 8007a84:	6059      	strne	r1, [r3, #4]
 8007a86:	6863      	ldr	r3, [r4, #4]
 8007a88:	bf08      	it	eq
 8007a8a:	6031      	streq	r1, [r6, #0]
 8007a8c:	5162      	str	r2, [r4, r5]
 8007a8e:	604b      	str	r3, [r1, #4]
 8007a90:	4638      	mov	r0, r7
 8007a92:	f104 060b 	add.w	r6, r4, #11
 8007a96:	f000 f9ed 	bl	8007e74 <__malloc_unlock>
 8007a9a:	f026 0607 	bic.w	r6, r6, #7
 8007a9e:	1d23      	adds	r3, r4, #4
 8007aa0:	1af2      	subs	r2, r6, r3
 8007aa2:	d0b6      	beq.n	8007a12 <_malloc_r+0x22>
 8007aa4:	1b9b      	subs	r3, r3, r6
 8007aa6:	50a3      	str	r3, [r4, r2]
 8007aa8:	e7b3      	b.n	8007a12 <_malloc_r+0x22>
 8007aaa:	6862      	ldr	r2, [r4, #4]
 8007aac:	42a3      	cmp	r3, r4
 8007aae:	bf0c      	ite	eq
 8007ab0:	6032      	streq	r2, [r6, #0]
 8007ab2:	605a      	strne	r2, [r3, #4]
 8007ab4:	e7ec      	b.n	8007a90 <_malloc_r+0xa0>
 8007ab6:	4623      	mov	r3, r4
 8007ab8:	6864      	ldr	r4, [r4, #4]
 8007aba:	e7b2      	b.n	8007a22 <_malloc_r+0x32>
 8007abc:	4634      	mov	r4, r6
 8007abe:	6876      	ldr	r6, [r6, #4]
 8007ac0:	e7b9      	b.n	8007a36 <_malloc_r+0x46>
 8007ac2:	230c      	movs	r3, #12
 8007ac4:	4638      	mov	r0, r7
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	f000 f9d4 	bl	8007e74 <__malloc_unlock>
 8007acc:	e7a1      	b.n	8007a12 <_malloc_r+0x22>
 8007ace:	6025      	str	r5, [r4, #0]
 8007ad0:	e7de      	b.n	8007a90 <_malloc_r+0xa0>
 8007ad2:	bf00      	nop
 8007ad4:	20000368 	.word	0x20000368

08007ad8 <__ssputs_r>:
 8007ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007adc:	688e      	ldr	r6, [r1, #8]
 8007ade:	4682      	mov	sl, r0
 8007ae0:	429e      	cmp	r6, r3
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	4690      	mov	r8, r2
 8007ae6:	461f      	mov	r7, r3
 8007ae8:	d838      	bhi.n	8007b5c <__ssputs_r+0x84>
 8007aea:	898a      	ldrh	r2, [r1, #12]
 8007aec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007af0:	d032      	beq.n	8007b58 <__ssputs_r+0x80>
 8007af2:	6825      	ldr	r5, [r4, #0]
 8007af4:	6909      	ldr	r1, [r1, #16]
 8007af6:	3301      	adds	r3, #1
 8007af8:	eba5 0901 	sub.w	r9, r5, r1
 8007afc:	6965      	ldr	r5, [r4, #20]
 8007afe:	444b      	add	r3, r9
 8007b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b08:	106d      	asrs	r5, r5, #1
 8007b0a:	429d      	cmp	r5, r3
 8007b0c:	bf38      	it	cc
 8007b0e:	461d      	movcc	r5, r3
 8007b10:	0553      	lsls	r3, r2, #21
 8007b12:	d531      	bpl.n	8007b78 <__ssputs_r+0xa0>
 8007b14:	4629      	mov	r1, r5
 8007b16:	f7ff ff6b 	bl	80079f0 <_malloc_r>
 8007b1a:	4606      	mov	r6, r0
 8007b1c:	b950      	cbnz	r0, 8007b34 <__ssputs_r+0x5c>
 8007b1e:	230c      	movs	r3, #12
 8007b20:	f04f 30ff 	mov.w	r0, #4294967295
 8007b24:	f8ca 3000 	str.w	r3, [sl]
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b2e:	81a3      	strh	r3, [r4, #12]
 8007b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b34:	464a      	mov	r2, r9
 8007b36:	6921      	ldr	r1, [r4, #16]
 8007b38:	f7ff fb4e 	bl	80071d8 <memcpy>
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b46:	81a3      	strh	r3, [r4, #12]
 8007b48:	6126      	str	r6, [r4, #16]
 8007b4a:	444e      	add	r6, r9
 8007b4c:	6026      	str	r6, [r4, #0]
 8007b4e:	463e      	mov	r6, r7
 8007b50:	6165      	str	r5, [r4, #20]
 8007b52:	eba5 0509 	sub.w	r5, r5, r9
 8007b56:	60a5      	str	r5, [r4, #8]
 8007b58:	42be      	cmp	r6, r7
 8007b5a:	d900      	bls.n	8007b5e <__ssputs_r+0x86>
 8007b5c:	463e      	mov	r6, r7
 8007b5e:	4632      	mov	r2, r6
 8007b60:	4641      	mov	r1, r8
 8007b62:	6820      	ldr	r0, [r4, #0]
 8007b64:	f000 f966 	bl	8007e34 <memmove>
 8007b68:	68a3      	ldr	r3, [r4, #8]
 8007b6a:	2000      	movs	r0, #0
 8007b6c:	1b9b      	subs	r3, r3, r6
 8007b6e:	60a3      	str	r3, [r4, #8]
 8007b70:	6823      	ldr	r3, [r4, #0]
 8007b72:	4433      	add	r3, r6
 8007b74:	6023      	str	r3, [r4, #0]
 8007b76:	e7db      	b.n	8007b30 <__ssputs_r+0x58>
 8007b78:	462a      	mov	r2, r5
 8007b7a:	f000 f981 	bl	8007e80 <_realloc_r>
 8007b7e:	4606      	mov	r6, r0
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d1e1      	bne.n	8007b48 <__ssputs_r+0x70>
 8007b84:	4650      	mov	r0, sl
 8007b86:	6921      	ldr	r1, [r4, #16]
 8007b88:	f7ff feca 	bl	8007920 <_free_r>
 8007b8c:	e7c7      	b.n	8007b1e <__ssputs_r+0x46>
	...

08007b90 <_svfiprintf_r>:
 8007b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b94:	4698      	mov	r8, r3
 8007b96:	898b      	ldrh	r3, [r1, #12]
 8007b98:	4607      	mov	r7, r0
 8007b9a:	061b      	lsls	r3, r3, #24
 8007b9c:	460d      	mov	r5, r1
 8007b9e:	4614      	mov	r4, r2
 8007ba0:	b09d      	sub	sp, #116	; 0x74
 8007ba2:	d50e      	bpl.n	8007bc2 <_svfiprintf_r+0x32>
 8007ba4:	690b      	ldr	r3, [r1, #16]
 8007ba6:	b963      	cbnz	r3, 8007bc2 <_svfiprintf_r+0x32>
 8007ba8:	2140      	movs	r1, #64	; 0x40
 8007baa:	f7ff ff21 	bl	80079f0 <_malloc_r>
 8007bae:	6028      	str	r0, [r5, #0]
 8007bb0:	6128      	str	r0, [r5, #16]
 8007bb2:	b920      	cbnz	r0, 8007bbe <_svfiprintf_r+0x2e>
 8007bb4:	230c      	movs	r3, #12
 8007bb6:	603b      	str	r3, [r7, #0]
 8007bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bbc:	e0d1      	b.n	8007d62 <_svfiprintf_r+0x1d2>
 8007bbe:	2340      	movs	r3, #64	; 0x40
 8007bc0:	616b      	str	r3, [r5, #20]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8007bc6:	2320      	movs	r3, #32
 8007bc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007bcc:	2330      	movs	r3, #48	; 0x30
 8007bce:	f04f 0901 	mov.w	r9, #1
 8007bd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bd6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007d7c <_svfiprintf_r+0x1ec>
 8007bda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007bde:	4623      	mov	r3, r4
 8007be0:	469a      	mov	sl, r3
 8007be2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007be6:	b10a      	cbz	r2, 8007bec <_svfiprintf_r+0x5c>
 8007be8:	2a25      	cmp	r2, #37	; 0x25
 8007bea:	d1f9      	bne.n	8007be0 <_svfiprintf_r+0x50>
 8007bec:	ebba 0b04 	subs.w	fp, sl, r4
 8007bf0:	d00b      	beq.n	8007c0a <_svfiprintf_r+0x7a>
 8007bf2:	465b      	mov	r3, fp
 8007bf4:	4622      	mov	r2, r4
 8007bf6:	4629      	mov	r1, r5
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	f7ff ff6d 	bl	8007ad8 <__ssputs_r>
 8007bfe:	3001      	adds	r0, #1
 8007c00:	f000 80aa 	beq.w	8007d58 <_svfiprintf_r+0x1c8>
 8007c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c06:	445a      	add	r2, fp
 8007c08:	9209      	str	r2, [sp, #36]	; 0x24
 8007c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 80a2 	beq.w	8007d58 <_svfiprintf_r+0x1c8>
 8007c14:	2300      	movs	r3, #0
 8007c16:	f04f 32ff 	mov.w	r2, #4294967295
 8007c1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c1e:	f10a 0a01 	add.w	sl, sl, #1
 8007c22:	9304      	str	r3, [sp, #16]
 8007c24:	9307      	str	r3, [sp, #28]
 8007c26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c2a:	931a      	str	r3, [sp, #104]	; 0x68
 8007c2c:	4654      	mov	r4, sl
 8007c2e:	2205      	movs	r2, #5
 8007c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c34:	4851      	ldr	r0, [pc, #324]	; (8007d7c <_svfiprintf_r+0x1ec>)
 8007c36:	f7ff fac1 	bl	80071bc <memchr>
 8007c3a:	9a04      	ldr	r2, [sp, #16]
 8007c3c:	b9d8      	cbnz	r0, 8007c76 <_svfiprintf_r+0xe6>
 8007c3e:	06d0      	lsls	r0, r2, #27
 8007c40:	bf44      	itt	mi
 8007c42:	2320      	movmi	r3, #32
 8007c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c48:	0711      	lsls	r1, r2, #28
 8007c4a:	bf44      	itt	mi
 8007c4c:	232b      	movmi	r3, #43	; 0x2b
 8007c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c52:	f89a 3000 	ldrb.w	r3, [sl]
 8007c56:	2b2a      	cmp	r3, #42	; 0x2a
 8007c58:	d015      	beq.n	8007c86 <_svfiprintf_r+0xf6>
 8007c5a:	4654      	mov	r4, sl
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	f04f 0c0a 	mov.w	ip, #10
 8007c62:	9a07      	ldr	r2, [sp, #28]
 8007c64:	4621      	mov	r1, r4
 8007c66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c6a:	3b30      	subs	r3, #48	; 0x30
 8007c6c:	2b09      	cmp	r3, #9
 8007c6e:	d94e      	bls.n	8007d0e <_svfiprintf_r+0x17e>
 8007c70:	b1b0      	cbz	r0, 8007ca0 <_svfiprintf_r+0x110>
 8007c72:	9207      	str	r2, [sp, #28]
 8007c74:	e014      	b.n	8007ca0 <_svfiprintf_r+0x110>
 8007c76:	eba0 0308 	sub.w	r3, r0, r8
 8007c7a:	fa09 f303 	lsl.w	r3, r9, r3
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	46a2      	mov	sl, r4
 8007c82:	9304      	str	r3, [sp, #16]
 8007c84:	e7d2      	b.n	8007c2c <_svfiprintf_r+0x9c>
 8007c86:	9b03      	ldr	r3, [sp, #12]
 8007c88:	1d19      	adds	r1, r3, #4
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	9103      	str	r1, [sp, #12]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	bfbb      	ittet	lt
 8007c92:	425b      	neglt	r3, r3
 8007c94:	f042 0202 	orrlt.w	r2, r2, #2
 8007c98:	9307      	strge	r3, [sp, #28]
 8007c9a:	9307      	strlt	r3, [sp, #28]
 8007c9c:	bfb8      	it	lt
 8007c9e:	9204      	strlt	r2, [sp, #16]
 8007ca0:	7823      	ldrb	r3, [r4, #0]
 8007ca2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ca4:	d10c      	bne.n	8007cc0 <_svfiprintf_r+0x130>
 8007ca6:	7863      	ldrb	r3, [r4, #1]
 8007ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8007caa:	d135      	bne.n	8007d18 <_svfiprintf_r+0x188>
 8007cac:	9b03      	ldr	r3, [sp, #12]
 8007cae:	3402      	adds	r4, #2
 8007cb0:	1d1a      	adds	r2, r3, #4
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	9203      	str	r2, [sp, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bfb8      	it	lt
 8007cba:	f04f 33ff 	movlt.w	r3, #4294967295
 8007cbe:	9305      	str	r3, [sp, #20]
 8007cc0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8007d80 <_svfiprintf_r+0x1f0>
 8007cc4:	2203      	movs	r2, #3
 8007cc6:	4650      	mov	r0, sl
 8007cc8:	7821      	ldrb	r1, [r4, #0]
 8007cca:	f7ff fa77 	bl	80071bc <memchr>
 8007cce:	b140      	cbz	r0, 8007ce2 <_svfiprintf_r+0x152>
 8007cd0:	2340      	movs	r3, #64	; 0x40
 8007cd2:	eba0 000a 	sub.w	r0, r0, sl
 8007cd6:	fa03 f000 	lsl.w	r0, r3, r0
 8007cda:	9b04      	ldr	r3, [sp, #16]
 8007cdc:	3401      	adds	r4, #1
 8007cde:	4303      	orrs	r3, r0
 8007ce0:	9304      	str	r3, [sp, #16]
 8007ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ce6:	2206      	movs	r2, #6
 8007ce8:	4826      	ldr	r0, [pc, #152]	; (8007d84 <_svfiprintf_r+0x1f4>)
 8007cea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cee:	f7ff fa65 	bl	80071bc <memchr>
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d038      	beq.n	8007d68 <_svfiprintf_r+0x1d8>
 8007cf6:	4b24      	ldr	r3, [pc, #144]	; (8007d88 <_svfiprintf_r+0x1f8>)
 8007cf8:	bb1b      	cbnz	r3, 8007d42 <_svfiprintf_r+0x1b2>
 8007cfa:	9b03      	ldr	r3, [sp, #12]
 8007cfc:	3307      	adds	r3, #7
 8007cfe:	f023 0307 	bic.w	r3, r3, #7
 8007d02:	3308      	adds	r3, #8
 8007d04:	9303      	str	r3, [sp, #12]
 8007d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d08:	4433      	add	r3, r6
 8007d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d0c:	e767      	b.n	8007bde <_svfiprintf_r+0x4e>
 8007d0e:	460c      	mov	r4, r1
 8007d10:	2001      	movs	r0, #1
 8007d12:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d16:	e7a5      	b.n	8007c64 <_svfiprintf_r+0xd4>
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f04f 0c0a 	mov.w	ip, #10
 8007d1e:	4619      	mov	r1, r3
 8007d20:	3401      	adds	r4, #1
 8007d22:	9305      	str	r3, [sp, #20]
 8007d24:	4620      	mov	r0, r4
 8007d26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d2a:	3a30      	subs	r2, #48	; 0x30
 8007d2c:	2a09      	cmp	r2, #9
 8007d2e:	d903      	bls.n	8007d38 <_svfiprintf_r+0x1a8>
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d0c5      	beq.n	8007cc0 <_svfiprintf_r+0x130>
 8007d34:	9105      	str	r1, [sp, #20]
 8007d36:	e7c3      	b.n	8007cc0 <_svfiprintf_r+0x130>
 8007d38:	4604      	mov	r4, r0
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d40:	e7f0      	b.n	8007d24 <_svfiprintf_r+0x194>
 8007d42:	ab03      	add	r3, sp, #12
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	462a      	mov	r2, r5
 8007d48:	4638      	mov	r0, r7
 8007d4a:	4b10      	ldr	r3, [pc, #64]	; (8007d8c <_svfiprintf_r+0x1fc>)
 8007d4c:	a904      	add	r1, sp, #16
 8007d4e:	f7fd ffab 	bl	8005ca8 <_printf_float>
 8007d52:	1c42      	adds	r2, r0, #1
 8007d54:	4606      	mov	r6, r0
 8007d56:	d1d6      	bne.n	8007d06 <_svfiprintf_r+0x176>
 8007d58:	89ab      	ldrh	r3, [r5, #12]
 8007d5a:	065b      	lsls	r3, r3, #25
 8007d5c:	f53f af2c 	bmi.w	8007bb8 <_svfiprintf_r+0x28>
 8007d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d62:	b01d      	add	sp, #116	; 0x74
 8007d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d68:	ab03      	add	r3, sp, #12
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	462a      	mov	r2, r5
 8007d6e:	4638      	mov	r0, r7
 8007d70:	4b06      	ldr	r3, [pc, #24]	; (8007d8c <_svfiprintf_r+0x1fc>)
 8007d72:	a904      	add	r1, sp, #16
 8007d74:	f7fe fa34 	bl	80061e0 <_printf_i>
 8007d78:	e7eb      	b.n	8007d52 <_svfiprintf_r+0x1c2>
 8007d7a:	bf00      	nop
 8007d7c:	08008c04 	.word	0x08008c04
 8007d80:	08008c0a 	.word	0x08008c0a
 8007d84:	08008c0e 	.word	0x08008c0e
 8007d88:	08005ca9 	.word	0x08005ca9
 8007d8c:	08007ad9 	.word	0x08007ad9

08007d90 <_sbrk_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	2300      	movs	r3, #0
 8007d94:	4d05      	ldr	r5, [pc, #20]	; (8007dac <_sbrk_r+0x1c>)
 8007d96:	4604      	mov	r4, r0
 8007d98:	4608      	mov	r0, r1
 8007d9a:	602b      	str	r3, [r5, #0]
 8007d9c:	f7fa fc6a 	bl	8002674 <_sbrk>
 8007da0:	1c43      	adds	r3, r0, #1
 8007da2:	d102      	bne.n	8007daa <_sbrk_r+0x1a>
 8007da4:	682b      	ldr	r3, [r5, #0]
 8007da6:	b103      	cbz	r3, 8007daa <_sbrk_r+0x1a>
 8007da8:	6023      	str	r3, [r4, #0]
 8007daa:	bd38      	pop	{r3, r4, r5, pc}
 8007dac:	20000370 	.word	0x20000370

08007db0 <__assert_func>:
 8007db0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007db2:	4614      	mov	r4, r2
 8007db4:	461a      	mov	r2, r3
 8007db6:	4b09      	ldr	r3, [pc, #36]	; (8007ddc <__assert_func+0x2c>)
 8007db8:	4605      	mov	r5, r0
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68d8      	ldr	r0, [r3, #12]
 8007dbe:	b14c      	cbz	r4, 8007dd4 <__assert_func+0x24>
 8007dc0:	4b07      	ldr	r3, [pc, #28]	; (8007de0 <__assert_func+0x30>)
 8007dc2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007dc6:	9100      	str	r1, [sp, #0]
 8007dc8:	462b      	mov	r3, r5
 8007dca:	4906      	ldr	r1, [pc, #24]	; (8007de4 <__assert_func+0x34>)
 8007dcc:	f000 f80e 	bl	8007dec <fiprintf>
 8007dd0:	f000 faaa 	bl	8008328 <abort>
 8007dd4:	4b04      	ldr	r3, [pc, #16]	; (8007de8 <__assert_func+0x38>)
 8007dd6:	461c      	mov	r4, r3
 8007dd8:	e7f3      	b.n	8007dc2 <__assert_func+0x12>
 8007dda:	bf00      	nop
 8007ddc:	20000024 	.word	0x20000024
 8007de0:	08008c15 	.word	0x08008c15
 8007de4:	08008c22 	.word	0x08008c22
 8007de8:	08008c50 	.word	0x08008c50

08007dec <fiprintf>:
 8007dec:	b40e      	push	{r1, r2, r3}
 8007dee:	b503      	push	{r0, r1, lr}
 8007df0:	4601      	mov	r1, r0
 8007df2:	ab03      	add	r3, sp, #12
 8007df4:	4805      	ldr	r0, [pc, #20]	; (8007e0c <fiprintf+0x20>)
 8007df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dfa:	6800      	ldr	r0, [r0, #0]
 8007dfc:	9301      	str	r3, [sp, #4]
 8007dfe:	f000 f895 	bl	8007f2c <_vfiprintf_r>
 8007e02:	b002      	add	sp, #8
 8007e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e08:	b003      	add	sp, #12
 8007e0a:	4770      	bx	lr
 8007e0c:	20000024 	.word	0x20000024

08007e10 <__ascii_mbtowc>:
 8007e10:	b082      	sub	sp, #8
 8007e12:	b901      	cbnz	r1, 8007e16 <__ascii_mbtowc+0x6>
 8007e14:	a901      	add	r1, sp, #4
 8007e16:	b142      	cbz	r2, 8007e2a <__ascii_mbtowc+0x1a>
 8007e18:	b14b      	cbz	r3, 8007e2e <__ascii_mbtowc+0x1e>
 8007e1a:	7813      	ldrb	r3, [r2, #0]
 8007e1c:	600b      	str	r3, [r1, #0]
 8007e1e:	7812      	ldrb	r2, [r2, #0]
 8007e20:	1e10      	subs	r0, r2, #0
 8007e22:	bf18      	it	ne
 8007e24:	2001      	movne	r0, #1
 8007e26:	b002      	add	sp, #8
 8007e28:	4770      	bx	lr
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	e7fb      	b.n	8007e26 <__ascii_mbtowc+0x16>
 8007e2e:	f06f 0001 	mvn.w	r0, #1
 8007e32:	e7f8      	b.n	8007e26 <__ascii_mbtowc+0x16>

08007e34 <memmove>:
 8007e34:	4288      	cmp	r0, r1
 8007e36:	b510      	push	{r4, lr}
 8007e38:	eb01 0402 	add.w	r4, r1, r2
 8007e3c:	d902      	bls.n	8007e44 <memmove+0x10>
 8007e3e:	4284      	cmp	r4, r0
 8007e40:	4623      	mov	r3, r4
 8007e42:	d807      	bhi.n	8007e54 <memmove+0x20>
 8007e44:	1e43      	subs	r3, r0, #1
 8007e46:	42a1      	cmp	r1, r4
 8007e48:	d008      	beq.n	8007e5c <memmove+0x28>
 8007e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e52:	e7f8      	b.n	8007e46 <memmove+0x12>
 8007e54:	4601      	mov	r1, r0
 8007e56:	4402      	add	r2, r0
 8007e58:	428a      	cmp	r2, r1
 8007e5a:	d100      	bne.n	8007e5e <memmove+0x2a>
 8007e5c:	bd10      	pop	{r4, pc}
 8007e5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e66:	e7f7      	b.n	8007e58 <memmove+0x24>

08007e68 <__malloc_lock>:
 8007e68:	4801      	ldr	r0, [pc, #4]	; (8007e70 <__malloc_lock+0x8>)
 8007e6a:	f000 bc19 	b.w	80086a0 <__retarget_lock_acquire_recursive>
 8007e6e:	bf00      	nop
 8007e70:	20000374 	.word	0x20000374

08007e74 <__malloc_unlock>:
 8007e74:	4801      	ldr	r0, [pc, #4]	; (8007e7c <__malloc_unlock+0x8>)
 8007e76:	f000 bc14 	b.w	80086a2 <__retarget_lock_release_recursive>
 8007e7a:	bf00      	nop
 8007e7c:	20000374 	.word	0x20000374

08007e80 <_realloc_r>:
 8007e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e84:	4680      	mov	r8, r0
 8007e86:	4614      	mov	r4, r2
 8007e88:	460e      	mov	r6, r1
 8007e8a:	b921      	cbnz	r1, 8007e96 <_realloc_r+0x16>
 8007e8c:	4611      	mov	r1, r2
 8007e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e92:	f7ff bdad 	b.w	80079f0 <_malloc_r>
 8007e96:	b92a      	cbnz	r2, 8007ea4 <_realloc_r+0x24>
 8007e98:	f7ff fd42 	bl	8007920 <_free_r>
 8007e9c:	4625      	mov	r5, r4
 8007e9e:	4628      	mov	r0, r5
 8007ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea4:	f000 fc64 	bl	8008770 <_malloc_usable_size_r>
 8007ea8:	4284      	cmp	r4, r0
 8007eaa:	4607      	mov	r7, r0
 8007eac:	d802      	bhi.n	8007eb4 <_realloc_r+0x34>
 8007eae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007eb2:	d812      	bhi.n	8007eda <_realloc_r+0x5a>
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	4640      	mov	r0, r8
 8007eb8:	f7ff fd9a 	bl	80079f0 <_malloc_r>
 8007ebc:	4605      	mov	r5, r0
 8007ebe:	2800      	cmp	r0, #0
 8007ec0:	d0ed      	beq.n	8007e9e <_realloc_r+0x1e>
 8007ec2:	42bc      	cmp	r4, r7
 8007ec4:	4622      	mov	r2, r4
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	bf28      	it	cs
 8007eca:	463a      	movcs	r2, r7
 8007ecc:	f7ff f984 	bl	80071d8 <memcpy>
 8007ed0:	4631      	mov	r1, r6
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	f7ff fd24 	bl	8007920 <_free_r>
 8007ed8:	e7e1      	b.n	8007e9e <_realloc_r+0x1e>
 8007eda:	4635      	mov	r5, r6
 8007edc:	e7df      	b.n	8007e9e <_realloc_r+0x1e>

08007ede <__sfputc_r>:
 8007ede:	6893      	ldr	r3, [r2, #8]
 8007ee0:	b410      	push	{r4}
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	6093      	str	r3, [r2, #8]
 8007ee8:	da07      	bge.n	8007efa <__sfputc_r+0x1c>
 8007eea:	6994      	ldr	r4, [r2, #24]
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	db01      	blt.n	8007ef4 <__sfputc_r+0x16>
 8007ef0:	290a      	cmp	r1, #10
 8007ef2:	d102      	bne.n	8007efa <__sfputc_r+0x1c>
 8007ef4:	bc10      	pop	{r4}
 8007ef6:	f000 b949 	b.w	800818c <__swbuf_r>
 8007efa:	6813      	ldr	r3, [r2, #0]
 8007efc:	1c58      	adds	r0, r3, #1
 8007efe:	6010      	str	r0, [r2, #0]
 8007f00:	7019      	strb	r1, [r3, #0]
 8007f02:	4608      	mov	r0, r1
 8007f04:	bc10      	pop	{r4}
 8007f06:	4770      	bx	lr

08007f08 <__sfputs_r>:
 8007f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0a:	4606      	mov	r6, r0
 8007f0c:	460f      	mov	r7, r1
 8007f0e:	4614      	mov	r4, r2
 8007f10:	18d5      	adds	r5, r2, r3
 8007f12:	42ac      	cmp	r4, r5
 8007f14:	d101      	bne.n	8007f1a <__sfputs_r+0x12>
 8007f16:	2000      	movs	r0, #0
 8007f18:	e007      	b.n	8007f2a <__sfputs_r+0x22>
 8007f1a:	463a      	mov	r2, r7
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f22:	f7ff ffdc 	bl	8007ede <__sfputc_r>
 8007f26:	1c43      	adds	r3, r0, #1
 8007f28:	d1f3      	bne.n	8007f12 <__sfputs_r+0xa>
 8007f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f2c <_vfiprintf_r>:
 8007f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f30:	460d      	mov	r5, r1
 8007f32:	4614      	mov	r4, r2
 8007f34:	4698      	mov	r8, r3
 8007f36:	4606      	mov	r6, r0
 8007f38:	b09d      	sub	sp, #116	; 0x74
 8007f3a:	b118      	cbz	r0, 8007f44 <_vfiprintf_r+0x18>
 8007f3c:	6983      	ldr	r3, [r0, #24]
 8007f3e:	b90b      	cbnz	r3, 8007f44 <_vfiprintf_r+0x18>
 8007f40:	f000 fb10 	bl	8008564 <__sinit>
 8007f44:	4b89      	ldr	r3, [pc, #548]	; (800816c <_vfiprintf_r+0x240>)
 8007f46:	429d      	cmp	r5, r3
 8007f48:	d11b      	bne.n	8007f82 <_vfiprintf_r+0x56>
 8007f4a:	6875      	ldr	r5, [r6, #4]
 8007f4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f4e:	07d9      	lsls	r1, r3, #31
 8007f50:	d405      	bmi.n	8007f5e <_vfiprintf_r+0x32>
 8007f52:	89ab      	ldrh	r3, [r5, #12]
 8007f54:	059a      	lsls	r2, r3, #22
 8007f56:	d402      	bmi.n	8007f5e <_vfiprintf_r+0x32>
 8007f58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f5a:	f000 fba1 	bl	80086a0 <__retarget_lock_acquire_recursive>
 8007f5e:	89ab      	ldrh	r3, [r5, #12]
 8007f60:	071b      	lsls	r3, r3, #28
 8007f62:	d501      	bpl.n	8007f68 <_vfiprintf_r+0x3c>
 8007f64:	692b      	ldr	r3, [r5, #16]
 8007f66:	b9eb      	cbnz	r3, 8007fa4 <_vfiprintf_r+0x78>
 8007f68:	4629      	mov	r1, r5
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f000 f96e 	bl	800824c <__swsetup_r>
 8007f70:	b1c0      	cbz	r0, 8007fa4 <_vfiprintf_r+0x78>
 8007f72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f74:	07dc      	lsls	r4, r3, #31
 8007f76:	d50e      	bpl.n	8007f96 <_vfiprintf_r+0x6a>
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7c:	b01d      	add	sp, #116	; 0x74
 8007f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f82:	4b7b      	ldr	r3, [pc, #492]	; (8008170 <_vfiprintf_r+0x244>)
 8007f84:	429d      	cmp	r5, r3
 8007f86:	d101      	bne.n	8007f8c <_vfiprintf_r+0x60>
 8007f88:	68b5      	ldr	r5, [r6, #8]
 8007f8a:	e7df      	b.n	8007f4c <_vfiprintf_r+0x20>
 8007f8c:	4b79      	ldr	r3, [pc, #484]	; (8008174 <_vfiprintf_r+0x248>)
 8007f8e:	429d      	cmp	r5, r3
 8007f90:	bf08      	it	eq
 8007f92:	68f5      	ldreq	r5, [r6, #12]
 8007f94:	e7da      	b.n	8007f4c <_vfiprintf_r+0x20>
 8007f96:	89ab      	ldrh	r3, [r5, #12]
 8007f98:	0598      	lsls	r0, r3, #22
 8007f9a:	d4ed      	bmi.n	8007f78 <_vfiprintf_r+0x4c>
 8007f9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f9e:	f000 fb80 	bl	80086a2 <__retarget_lock_release_recursive>
 8007fa2:	e7e9      	b.n	8007f78 <_vfiprintf_r+0x4c>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa8:	2320      	movs	r3, #32
 8007faa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fae:	2330      	movs	r3, #48	; 0x30
 8007fb0:	f04f 0901 	mov.w	r9, #1
 8007fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fb8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008178 <_vfiprintf_r+0x24c>
 8007fbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fc0:	4623      	mov	r3, r4
 8007fc2:	469a      	mov	sl, r3
 8007fc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fc8:	b10a      	cbz	r2, 8007fce <_vfiprintf_r+0xa2>
 8007fca:	2a25      	cmp	r2, #37	; 0x25
 8007fcc:	d1f9      	bne.n	8007fc2 <_vfiprintf_r+0x96>
 8007fce:	ebba 0b04 	subs.w	fp, sl, r4
 8007fd2:	d00b      	beq.n	8007fec <_vfiprintf_r+0xc0>
 8007fd4:	465b      	mov	r3, fp
 8007fd6:	4622      	mov	r2, r4
 8007fd8:	4629      	mov	r1, r5
 8007fda:	4630      	mov	r0, r6
 8007fdc:	f7ff ff94 	bl	8007f08 <__sfputs_r>
 8007fe0:	3001      	adds	r0, #1
 8007fe2:	f000 80aa 	beq.w	800813a <_vfiprintf_r+0x20e>
 8007fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fe8:	445a      	add	r2, fp
 8007fea:	9209      	str	r2, [sp, #36]	; 0x24
 8007fec:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f000 80a2 	beq.w	800813a <_vfiprintf_r+0x20e>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008000:	f10a 0a01 	add.w	sl, sl, #1
 8008004:	9304      	str	r3, [sp, #16]
 8008006:	9307      	str	r3, [sp, #28]
 8008008:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800800c:	931a      	str	r3, [sp, #104]	; 0x68
 800800e:	4654      	mov	r4, sl
 8008010:	2205      	movs	r2, #5
 8008012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008016:	4858      	ldr	r0, [pc, #352]	; (8008178 <_vfiprintf_r+0x24c>)
 8008018:	f7ff f8d0 	bl	80071bc <memchr>
 800801c:	9a04      	ldr	r2, [sp, #16]
 800801e:	b9d8      	cbnz	r0, 8008058 <_vfiprintf_r+0x12c>
 8008020:	06d1      	lsls	r1, r2, #27
 8008022:	bf44      	itt	mi
 8008024:	2320      	movmi	r3, #32
 8008026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800802a:	0713      	lsls	r3, r2, #28
 800802c:	bf44      	itt	mi
 800802e:	232b      	movmi	r3, #43	; 0x2b
 8008030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008034:	f89a 3000 	ldrb.w	r3, [sl]
 8008038:	2b2a      	cmp	r3, #42	; 0x2a
 800803a:	d015      	beq.n	8008068 <_vfiprintf_r+0x13c>
 800803c:	4654      	mov	r4, sl
 800803e:	2000      	movs	r0, #0
 8008040:	f04f 0c0a 	mov.w	ip, #10
 8008044:	9a07      	ldr	r2, [sp, #28]
 8008046:	4621      	mov	r1, r4
 8008048:	f811 3b01 	ldrb.w	r3, [r1], #1
 800804c:	3b30      	subs	r3, #48	; 0x30
 800804e:	2b09      	cmp	r3, #9
 8008050:	d94e      	bls.n	80080f0 <_vfiprintf_r+0x1c4>
 8008052:	b1b0      	cbz	r0, 8008082 <_vfiprintf_r+0x156>
 8008054:	9207      	str	r2, [sp, #28]
 8008056:	e014      	b.n	8008082 <_vfiprintf_r+0x156>
 8008058:	eba0 0308 	sub.w	r3, r0, r8
 800805c:	fa09 f303 	lsl.w	r3, r9, r3
 8008060:	4313      	orrs	r3, r2
 8008062:	46a2      	mov	sl, r4
 8008064:	9304      	str	r3, [sp, #16]
 8008066:	e7d2      	b.n	800800e <_vfiprintf_r+0xe2>
 8008068:	9b03      	ldr	r3, [sp, #12]
 800806a:	1d19      	adds	r1, r3, #4
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	9103      	str	r1, [sp, #12]
 8008070:	2b00      	cmp	r3, #0
 8008072:	bfbb      	ittet	lt
 8008074:	425b      	neglt	r3, r3
 8008076:	f042 0202 	orrlt.w	r2, r2, #2
 800807a:	9307      	strge	r3, [sp, #28]
 800807c:	9307      	strlt	r3, [sp, #28]
 800807e:	bfb8      	it	lt
 8008080:	9204      	strlt	r2, [sp, #16]
 8008082:	7823      	ldrb	r3, [r4, #0]
 8008084:	2b2e      	cmp	r3, #46	; 0x2e
 8008086:	d10c      	bne.n	80080a2 <_vfiprintf_r+0x176>
 8008088:	7863      	ldrb	r3, [r4, #1]
 800808a:	2b2a      	cmp	r3, #42	; 0x2a
 800808c:	d135      	bne.n	80080fa <_vfiprintf_r+0x1ce>
 800808e:	9b03      	ldr	r3, [sp, #12]
 8008090:	3402      	adds	r4, #2
 8008092:	1d1a      	adds	r2, r3, #4
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	9203      	str	r2, [sp, #12]
 8008098:	2b00      	cmp	r3, #0
 800809a:	bfb8      	it	lt
 800809c:	f04f 33ff 	movlt.w	r3, #4294967295
 80080a0:	9305      	str	r3, [sp, #20]
 80080a2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800817c <_vfiprintf_r+0x250>
 80080a6:	2203      	movs	r2, #3
 80080a8:	4650      	mov	r0, sl
 80080aa:	7821      	ldrb	r1, [r4, #0]
 80080ac:	f7ff f886 	bl	80071bc <memchr>
 80080b0:	b140      	cbz	r0, 80080c4 <_vfiprintf_r+0x198>
 80080b2:	2340      	movs	r3, #64	; 0x40
 80080b4:	eba0 000a 	sub.w	r0, r0, sl
 80080b8:	fa03 f000 	lsl.w	r0, r3, r0
 80080bc:	9b04      	ldr	r3, [sp, #16]
 80080be:	3401      	adds	r4, #1
 80080c0:	4303      	orrs	r3, r0
 80080c2:	9304      	str	r3, [sp, #16]
 80080c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c8:	2206      	movs	r2, #6
 80080ca:	482d      	ldr	r0, [pc, #180]	; (8008180 <_vfiprintf_r+0x254>)
 80080cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080d0:	f7ff f874 	bl	80071bc <memchr>
 80080d4:	2800      	cmp	r0, #0
 80080d6:	d03f      	beq.n	8008158 <_vfiprintf_r+0x22c>
 80080d8:	4b2a      	ldr	r3, [pc, #168]	; (8008184 <_vfiprintf_r+0x258>)
 80080da:	bb1b      	cbnz	r3, 8008124 <_vfiprintf_r+0x1f8>
 80080dc:	9b03      	ldr	r3, [sp, #12]
 80080de:	3307      	adds	r3, #7
 80080e0:	f023 0307 	bic.w	r3, r3, #7
 80080e4:	3308      	adds	r3, #8
 80080e6:	9303      	str	r3, [sp, #12]
 80080e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ea:	443b      	add	r3, r7
 80080ec:	9309      	str	r3, [sp, #36]	; 0x24
 80080ee:	e767      	b.n	8007fc0 <_vfiprintf_r+0x94>
 80080f0:	460c      	mov	r4, r1
 80080f2:	2001      	movs	r0, #1
 80080f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80080f8:	e7a5      	b.n	8008046 <_vfiprintf_r+0x11a>
 80080fa:	2300      	movs	r3, #0
 80080fc:	f04f 0c0a 	mov.w	ip, #10
 8008100:	4619      	mov	r1, r3
 8008102:	3401      	adds	r4, #1
 8008104:	9305      	str	r3, [sp, #20]
 8008106:	4620      	mov	r0, r4
 8008108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800810c:	3a30      	subs	r2, #48	; 0x30
 800810e:	2a09      	cmp	r2, #9
 8008110:	d903      	bls.n	800811a <_vfiprintf_r+0x1ee>
 8008112:	2b00      	cmp	r3, #0
 8008114:	d0c5      	beq.n	80080a2 <_vfiprintf_r+0x176>
 8008116:	9105      	str	r1, [sp, #20]
 8008118:	e7c3      	b.n	80080a2 <_vfiprintf_r+0x176>
 800811a:	4604      	mov	r4, r0
 800811c:	2301      	movs	r3, #1
 800811e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008122:	e7f0      	b.n	8008106 <_vfiprintf_r+0x1da>
 8008124:	ab03      	add	r3, sp, #12
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	462a      	mov	r2, r5
 800812a:	4630      	mov	r0, r6
 800812c:	4b16      	ldr	r3, [pc, #88]	; (8008188 <_vfiprintf_r+0x25c>)
 800812e:	a904      	add	r1, sp, #16
 8008130:	f7fd fdba 	bl	8005ca8 <_printf_float>
 8008134:	4607      	mov	r7, r0
 8008136:	1c78      	adds	r0, r7, #1
 8008138:	d1d6      	bne.n	80080e8 <_vfiprintf_r+0x1bc>
 800813a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800813c:	07d9      	lsls	r1, r3, #31
 800813e:	d405      	bmi.n	800814c <_vfiprintf_r+0x220>
 8008140:	89ab      	ldrh	r3, [r5, #12]
 8008142:	059a      	lsls	r2, r3, #22
 8008144:	d402      	bmi.n	800814c <_vfiprintf_r+0x220>
 8008146:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008148:	f000 faab 	bl	80086a2 <__retarget_lock_release_recursive>
 800814c:	89ab      	ldrh	r3, [r5, #12]
 800814e:	065b      	lsls	r3, r3, #25
 8008150:	f53f af12 	bmi.w	8007f78 <_vfiprintf_r+0x4c>
 8008154:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008156:	e711      	b.n	8007f7c <_vfiprintf_r+0x50>
 8008158:	ab03      	add	r3, sp, #12
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	462a      	mov	r2, r5
 800815e:	4630      	mov	r0, r6
 8008160:	4b09      	ldr	r3, [pc, #36]	; (8008188 <_vfiprintf_r+0x25c>)
 8008162:	a904      	add	r1, sp, #16
 8008164:	f7fe f83c 	bl	80061e0 <_printf_i>
 8008168:	e7e4      	b.n	8008134 <_vfiprintf_r+0x208>
 800816a:	bf00      	nop
 800816c:	08008d7c 	.word	0x08008d7c
 8008170:	08008d9c 	.word	0x08008d9c
 8008174:	08008d5c 	.word	0x08008d5c
 8008178:	08008c04 	.word	0x08008c04
 800817c:	08008c0a 	.word	0x08008c0a
 8008180:	08008c0e 	.word	0x08008c0e
 8008184:	08005ca9 	.word	0x08005ca9
 8008188:	08007f09 	.word	0x08007f09

0800818c <__swbuf_r>:
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	460e      	mov	r6, r1
 8008190:	4614      	mov	r4, r2
 8008192:	4605      	mov	r5, r0
 8008194:	b118      	cbz	r0, 800819e <__swbuf_r+0x12>
 8008196:	6983      	ldr	r3, [r0, #24]
 8008198:	b90b      	cbnz	r3, 800819e <__swbuf_r+0x12>
 800819a:	f000 f9e3 	bl	8008564 <__sinit>
 800819e:	4b21      	ldr	r3, [pc, #132]	; (8008224 <__swbuf_r+0x98>)
 80081a0:	429c      	cmp	r4, r3
 80081a2:	d12b      	bne.n	80081fc <__swbuf_r+0x70>
 80081a4:	686c      	ldr	r4, [r5, #4]
 80081a6:	69a3      	ldr	r3, [r4, #24]
 80081a8:	60a3      	str	r3, [r4, #8]
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	071a      	lsls	r2, r3, #28
 80081ae:	d52f      	bpl.n	8008210 <__swbuf_r+0x84>
 80081b0:	6923      	ldr	r3, [r4, #16]
 80081b2:	b36b      	cbz	r3, 8008210 <__swbuf_r+0x84>
 80081b4:	6923      	ldr	r3, [r4, #16]
 80081b6:	6820      	ldr	r0, [r4, #0]
 80081b8:	b2f6      	uxtb	r6, r6
 80081ba:	1ac0      	subs	r0, r0, r3
 80081bc:	6963      	ldr	r3, [r4, #20]
 80081be:	4637      	mov	r7, r6
 80081c0:	4283      	cmp	r3, r0
 80081c2:	dc04      	bgt.n	80081ce <__swbuf_r+0x42>
 80081c4:	4621      	mov	r1, r4
 80081c6:	4628      	mov	r0, r5
 80081c8:	f000 f938 	bl	800843c <_fflush_r>
 80081cc:	bb30      	cbnz	r0, 800821c <__swbuf_r+0x90>
 80081ce:	68a3      	ldr	r3, [r4, #8]
 80081d0:	3001      	adds	r0, #1
 80081d2:	3b01      	subs	r3, #1
 80081d4:	60a3      	str	r3, [r4, #8]
 80081d6:	6823      	ldr	r3, [r4, #0]
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	6022      	str	r2, [r4, #0]
 80081dc:	701e      	strb	r6, [r3, #0]
 80081de:	6963      	ldr	r3, [r4, #20]
 80081e0:	4283      	cmp	r3, r0
 80081e2:	d004      	beq.n	80081ee <__swbuf_r+0x62>
 80081e4:	89a3      	ldrh	r3, [r4, #12]
 80081e6:	07db      	lsls	r3, r3, #31
 80081e8:	d506      	bpl.n	80081f8 <__swbuf_r+0x6c>
 80081ea:	2e0a      	cmp	r6, #10
 80081ec:	d104      	bne.n	80081f8 <__swbuf_r+0x6c>
 80081ee:	4621      	mov	r1, r4
 80081f0:	4628      	mov	r0, r5
 80081f2:	f000 f923 	bl	800843c <_fflush_r>
 80081f6:	b988      	cbnz	r0, 800821c <__swbuf_r+0x90>
 80081f8:	4638      	mov	r0, r7
 80081fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081fc:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <__swbuf_r+0x9c>)
 80081fe:	429c      	cmp	r4, r3
 8008200:	d101      	bne.n	8008206 <__swbuf_r+0x7a>
 8008202:	68ac      	ldr	r4, [r5, #8]
 8008204:	e7cf      	b.n	80081a6 <__swbuf_r+0x1a>
 8008206:	4b09      	ldr	r3, [pc, #36]	; (800822c <__swbuf_r+0xa0>)
 8008208:	429c      	cmp	r4, r3
 800820a:	bf08      	it	eq
 800820c:	68ec      	ldreq	r4, [r5, #12]
 800820e:	e7ca      	b.n	80081a6 <__swbuf_r+0x1a>
 8008210:	4621      	mov	r1, r4
 8008212:	4628      	mov	r0, r5
 8008214:	f000 f81a 	bl	800824c <__swsetup_r>
 8008218:	2800      	cmp	r0, #0
 800821a:	d0cb      	beq.n	80081b4 <__swbuf_r+0x28>
 800821c:	f04f 37ff 	mov.w	r7, #4294967295
 8008220:	e7ea      	b.n	80081f8 <__swbuf_r+0x6c>
 8008222:	bf00      	nop
 8008224:	08008d7c 	.word	0x08008d7c
 8008228:	08008d9c 	.word	0x08008d9c
 800822c:	08008d5c 	.word	0x08008d5c

08008230 <__ascii_wctomb>:
 8008230:	4603      	mov	r3, r0
 8008232:	4608      	mov	r0, r1
 8008234:	b141      	cbz	r1, 8008248 <__ascii_wctomb+0x18>
 8008236:	2aff      	cmp	r2, #255	; 0xff
 8008238:	d904      	bls.n	8008244 <__ascii_wctomb+0x14>
 800823a:	228a      	movs	r2, #138	; 0x8a
 800823c:	f04f 30ff 	mov.w	r0, #4294967295
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	4770      	bx	lr
 8008244:	2001      	movs	r0, #1
 8008246:	700a      	strb	r2, [r1, #0]
 8008248:	4770      	bx	lr
	...

0800824c <__swsetup_r>:
 800824c:	4b32      	ldr	r3, [pc, #200]	; (8008318 <__swsetup_r+0xcc>)
 800824e:	b570      	push	{r4, r5, r6, lr}
 8008250:	681d      	ldr	r5, [r3, #0]
 8008252:	4606      	mov	r6, r0
 8008254:	460c      	mov	r4, r1
 8008256:	b125      	cbz	r5, 8008262 <__swsetup_r+0x16>
 8008258:	69ab      	ldr	r3, [r5, #24]
 800825a:	b913      	cbnz	r3, 8008262 <__swsetup_r+0x16>
 800825c:	4628      	mov	r0, r5
 800825e:	f000 f981 	bl	8008564 <__sinit>
 8008262:	4b2e      	ldr	r3, [pc, #184]	; (800831c <__swsetup_r+0xd0>)
 8008264:	429c      	cmp	r4, r3
 8008266:	d10f      	bne.n	8008288 <__swsetup_r+0x3c>
 8008268:	686c      	ldr	r4, [r5, #4]
 800826a:	89a3      	ldrh	r3, [r4, #12]
 800826c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008270:	0719      	lsls	r1, r3, #28
 8008272:	d42c      	bmi.n	80082ce <__swsetup_r+0x82>
 8008274:	06dd      	lsls	r5, r3, #27
 8008276:	d411      	bmi.n	800829c <__swsetup_r+0x50>
 8008278:	2309      	movs	r3, #9
 800827a:	6033      	str	r3, [r6, #0]
 800827c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008280:	f04f 30ff 	mov.w	r0, #4294967295
 8008284:	81a3      	strh	r3, [r4, #12]
 8008286:	e03e      	b.n	8008306 <__swsetup_r+0xba>
 8008288:	4b25      	ldr	r3, [pc, #148]	; (8008320 <__swsetup_r+0xd4>)
 800828a:	429c      	cmp	r4, r3
 800828c:	d101      	bne.n	8008292 <__swsetup_r+0x46>
 800828e:	68ac      	ldr	r4, [r5, #8]
 8008290:	e7eb      	b.n	800826a <__swsetup_r+0x1e>
 8008292:	4b24      	ldr	r3, [pc, #144]	; (8008324 <__swsetup_r+0xd8>)
 8008294:	429c      	cmp	r4, r3
 8008296:	bf08      	it	eq
 8008298:	68ec      	ldreq	r4, [r5, #12]
 800829a:	e7e6      	b.n	800826a <__swsetup_r+0x1e>
 800829c:	0758      	lsls	r0, r3, #29
 800829e:	d512      	bpl.n	80082c6 <__swsetup_r+0x7a>
 80082a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082a2:	b141      	cbz	r1, 80082b6 <__swsetup_r+0x6a>
 80082a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082a8:	4299      	cmp	r1, r3
 80082aa:	d002      	beq.n	80082b2 <__swsetup_r+0x66>
 80082ac:	4630      	mov	r0, r6
 80082ae:	f7ff fb37 	bl	8007920 <_free_r>
 80082b2:	2300      	movs	r3, #0
 80082b4:	6363      	str	r3, [r4, #52]	; 0x34
 80082b6:	89a3      	ldrh	r3, [r4, #12]
 80082b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082bc:	81a3      	strh	r3, [r4, #12]
 80082be:	2300      	movs	r3, #0
 80082c0:	6063      	str	r3, [r4, #4]
 80082c2:	6923      	ldr	r3, [r4, #16]
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	f043 0308 	orr.w	r3, r3, #8
 80082cc:	81a3      	strh	r3, [r4, #12]
 80082ce:	6923      	ldr	r3, [r4, #16]
 80082d0:	b94b      	cbnz	r3, 80082e6 <__swsetup_r+0x9a>
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082dc:	d003      	beq.n	80082e6 <__swsetup_r+0x9a>
 80082de:	4621      	mov	r1, r4
 80082e0:	4630      	mov	r0, r6
 80082e2:	f000 fa05 	bl	80086f0 <__smakebuf_r>
 80082e6:	89a0      	ldrh	r0, [r4, #12]
 80082e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082ec:	f010 0301 	ands.w	r3, r0, #1
 80082f0:	d00a      	beq.n	8008308 <__swsetup_r+0xbc>
 80082f2:	2300      	movs	r3, #0
 80082f4:	60a3      	str	r3, [r4, #8]
 80082f6:	6963      	ldr	r3, [r4, #20]
 80082f8:	425b      	negs	r3, r3
 80082fa:	61a3      	str	r3, [r4, #24]
 80082fc:	6923      	ldr	r3, [r4, #16]
 80082fe:	b943      	cbnz	r3, 8008312 <__swsetup_r+0xc6>
 8008300:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008304:	d1ba      	bne.n	800827c <__swsetup_r+0x30>
 8008306:	bd70      	pop	{r4, r5, r6, pc}
 8008308:	0781      	lsls	r1, r0, #30
 800830a:	bf58      	it	pl
 800830c:	6963      	ldrpl	r3, [r4, #20]
 800830e:	60a3      	str	r3, [r4, #8]
 8008310:	e7f4      	b.n	80082fc <__swsetup_r+0xb0>
 8008312:	2000      	movs	r0, #0
 8008314:	e7f7      	b.n	8008306 <__swsetup_r+0xba>
 8008316:	bf00      	nop
 8008318:	20000024 	.word	0x20000024
 800831c:	08008d7c 	.word	0x08008d7c
 8008320:	08008d9c 	.word	0x08008d9c
 8008324:	08008d5c 	.word	0x08008d5c

08008328 <abort>:
 8008328:	2006      	movs	r0, #6
 800832a:	b508      	push	{r3, lr}
 800832c:	f000 fa50 	bl	80087d0 <raise>
 8008330:	2001      	movs	r0, #1
 8008332:	f7fa f92c 	bl	800258e <_exit>
	...

08008338 <__sflush_r>:
 8008338:	898a      	ldrh	r2, [r1, #12]
 800833a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800833c:	4605      	mov	r5, r0
 800833e:	0710      	lsls	r0, r2, #28
 8008340:	460c      	mov	r4, r1
 8008342:	d457      	bmi.n	80083f4 <__sflush_r+0xbc>
 8008344:	684b      	ldr	r3, [r1, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	dc04      	bgt.n	8008354 <__sflush_r+0x1c>
 800834a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800834c:	2b00      	cmp	r3, #0
 800834e:	dc01      	bgt.n	8008354 <__sflush_r+0x1c>
 8008350:	2000      	movs	r0, #0
 8008352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008356:	2e00      	cmp	r6, #0
 8008358:	d0fa      	beq.n	8008350 <__sflush_r+0x18>
 800835a:	2300      	movs	r3, #0
 800835c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008360:	682f      	ldr	r7, [r5, #0]
 8008362:	602b      	str	r3, [r5, #0]
 8008364:	d032      	beq.n	80083cc <__sflush_r+0x94>
 8008366:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008368:	89a3      	ldrh	r3, [r4, #12]
 800836a:	075a      	lsls	r2, r3, #29
 800836c:	d505      	bpl.n	800837a <__sflush_r+0x42>
 800836e:	6863      	ldr	r3, [r4, #4]
 8008370:	1ac0      	subs	r0, r0, r3
 8008372:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008374:	b10b      	cbz	r3, 800837a <__sflush_r+0x42>
 8008376:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008378:	1ac0      	subs	r0, r0, r3
 800837a:	2300      	movs	r3, #0
 800837c:	4602      	mov	r2, r0
 800837e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008380:	4628      	mov	r0, r5
 8008382:	6a21      	ldr	r1, [r4, #32]
 8008384:	47b0      	blx	r6
 8008386:	1c43      	adds	r3, r0, #1
 8008388:	89a3      	ldrh	r3, [r4, #12]
 800838a:	d106      	bne.n	800839a <__sflush_r+0x62>
 800838c:	6829      	ldr	r1, [r5, #0]
 800838e:	291d      	cmp	r1, #29
 8008390:	d82c      	bhi.n	80083ec <__sflush_r+0xb4>
 8008392:	4a29      	ldr	r2, [pc, #164]	; (8008438 <__sflush_r+0x100>)
 8008394:	40ca      	lsrs	r2, r1
 8008396:	07d6      	lsls	r6, r2, #31
 8008398:	d528      	bpl.n	80083ec <__sflush_r+0xb4>
 800839a:	2200      	movs	r2, #0
 800839c:	6062      	str	r2, [r4, #4]
 800839e:	6922      	ldr	r2, [r4, #16]
 80083a0:	04d9      	lsls	r1, r3, #19
 80083a2:	6022      	str	r2, [r4, #0]
 80083a4:	d504      	bpl.n	80083b0 <__sflush_r+0x78>
 80083a6:	1c42      	adds	r2, r0, #1
 80083a8:	d101      	bne.n	80083ae <__sflush_r+0x76>
 80083aa:	682b      	ldr	r3, [r5, #0]
 80083ac:	b903      	cbnz	r3, 80083b0 <__sflush_r+0x78>
 80083ae:	6560      	str	r0, [r4, #84]	; 0x54
 80083b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083b2:	602f      	str	r7, [r5, #0]
 80083b4:	2900      	cmp	r1, #0
 80083b6:	d0cb      	beq.n	8008350 <__sflush_r+0x18>
 80083b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083bc:	4299      	cmp	r1, r3
 80083be:	d002      	beq.n	80083c6 <__sflush_r+0x8e>
 80083c0:	4628      	mov	r0, r5
 80083c2:	f7ff faad 	bl	8007920 <_free_r>
 80083c6:	2000      	movs	r0, #0
 80083c8:	6360      	str	r0, [r4, #52]	; 0x34
 80083ca:	e7c2      	b.n	8008352 <__sflush_r+0x1a>
 80083cc:	6a21      	ldr	r1, [r4, #32]
 80083ce:	2301      	movs	r3, #1
 80083d0:	4628      	mov	r0, r5
 80083d2:	47b0      	blx	r6
 80083d4:	1c41      	adds	r1, r0, #1
 80083d6:	d1c7      	bne.n	8008368 <__sflush_r+0x30>
 80083d8:	682b      	ldr	r3, [r5, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d0c4      	beq.n	8008368 <__sflush_r+0x30>
 80083de:	2b1d      	cmp	r3, #29
 80083e0:	d001      	beq.n	80083e6 <__sflush_r+0xae>
 80083e2:	2b16      	cmp	r3, #22
 80083e4:	d101      	bne.n	80083ea <__sflush_r+0xb2>
 80083e6:	602f      	str	r7, [r5, #0]
 80083e8:	e7b2      	b.n	8008350 <__sflush_r+0x18>
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f0:	81a3      	strh	r3, [r4, #12]
 80083f2:	e7ae      	b.n	8008352 <__sflush_r+0x1a>
 80083f4:	690f      	ldr	r7, [r1, #16]
 80083f6:	2f00      	cmp	r7, #0
 80083f8:	d0aa      	beq.n	8008350 <__sflush_r+0x18>
 80083fa:	0793      	lsls	r3, r2, #30
 80083fc:	bf18      	it	ne
 80083fe:	2300      	movne	r3, #0
 8008400:	680e      	ldr	r6, [r1, #0]
 8008402:	bf08      	it	eq
 8008404:	694b      	ldreq	r3, [r1, #20]
 8008406:	1bf6      	subs	r6, r6, r7
 8008408:	600f      	str	r7, [r1, #0]
 800840a:	608b      	str	r3, [r1, #8]
 800840c:	2e00      	cmp	r6, #0
 800840e:	dd9f      	ble.n	8008350 <__sflush_r+0x18>
 8008410:	4633      	mov	r3, r6
 8008412:	463a      	mov	r2, r7
 8008414:	4628      	mov	r0, r5
 8008416:	6a21      	ldr	r1, [r4, #32]
 8008418:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800841c:	47e0      	blx	ip
 800841e:	2800      	cmp	r0, #0
 8008420:	dc06      	bgt.n	8008430 <__sflush_r+0xf8>
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	f04f 30ff 	mov.w	r0, #4294967295
 8008428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800842c:	81a3      	strh	r3, [r4, #12]
 800842e:	e790      	b.n	8008352 <__sflush_r+0x1a>
 8008430:	4407      	add	r7, r0
 8008432:	1a36      	subs	r6, r6, r0
 8008434:	e7ea      	b.n	800840c <__sflush_r+0xd4>
 8008436:	bf00      	nop
 8008438:	20400001 	.word	0x20400001

0800843c <_fflush_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	690b      	ldr	r3, [r1, #16]
 8008440:	4605      	mov	r5, r0
 8008442:	460c      	mov	r4, r1
 8008444:	b913      	cbnz	r3, 800844c <_fflush_r+0x10>
 8008446:	2500      	movs	r5, #0
 8008448:	4628      	mov	r0, r5
 800844a:	bd38      	pop	{r3, r4, r5, pc}
 800844c:	b118      	cbz	r0, 8008456 <_fflush_r+0x1a>
 800844e:	6983      	ldr	r3, [r0, #24]
 8008450:	b90b      	cbnz	r3, 8008456 <_fflush_r+0x1a>
 8008452:	f000 f887 	bl	8008564 <__sinit>
 8008456:	4b14      	ldr	r3, [pc, #80]	; (80084a8 <_fflush_r+0x6c>)
 8008458:	429c      	cmp	r4, r3
 800845a:	d11b      	bne.n	8008494 <_fflush_r+0x58>
 800845c:	686c      	ldr	r4, [r5, #4]
 800845e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d0ef      	beq.n	8008446 <_fflush_r+0xa>
 8008466:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008468:	07d0      	lsls	r0, r2, #31
 800846a:	d404      	bmi.n	8008476 <_fflush_r+0x3a>
 800846c:	0599      	lsls	r1, r3, #22
 800846e:	d402      	bmi.n	8008476 <_fflush_r+0x3a>
 8008470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008472:	f000 f915 	bl	80086a0 <__retarget_lock_acquire_recursive>
 8008476:	4628      	mov	r0, r5
 8008478:	4621      	mov	r1, r4
 800847a:	f7ff ff5d 	bl	8008338 <__sflush_r>
 800847e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008480:	4605      	mov	r5, r0
 8008482:	07da      	lsls	r2, r3, #31
 8008484:	d4e0      	bmi.n	8008448 <_fflush_r+0xc>
 8008486:	89a3      	ldrh	r3, [r4, #12]
 8008488:	059b      	lsls	r3, r3, #22
 800848a:	d4dd      	bmi.n	8008448 <_fflush_r+0xc>
 800848c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800848e:	f000 f908 	bl	80086a2 <__retarget_lock_release_recursive>
 8008492:	e7d9      	b.n	8008448 <_fflush_r+0xc>
 8008494:	4b05      	ldr	r3, [pc, #20]	; (80084ac <_fflush_r+0x70>)
 8008496:	429c      	cmp	r4, r3
 8008498:	d101      	bne.n	800849e <_fflush_r+0x62>
 800849a:	68ac      	ldr	r4, [r5, #8]
 800849c:	e7df      	b.n	800845e <_fflush_r+0x22>
 800849e:	4b04      	ldr	r3, [pc, #16]	; (80084b0 <_fflush_r+0x74>)
 80084a0:	429c      	cmp	r4, r3
 80084a2:	bf08      	it	eq
 80084a4:	68ec      	ldreq	r4, [r5, #12]
 80084a6:	e7da      	b.n	800845e <_fflush_r+0x22>
 80084a8:	08008d7c 	.word	0x08008d7c
 80084ac:	08008d9c 	.word	0x08008d9c
 80084b0:	08008d5c 	.word	0x08008d5c

080084b4 <std>:
 80084b4:	2300      	movs	r3, #0
 80084b6:	b510      	push	{r4, lr}
 80084b8:	4604      	mov	r4, r0
 80084ba:	e9c0 3300 	strd	r3, r3, [r0]
 80084be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084c2:	6083      	str	r3, [r0, #8]
 80084c4:	8181      	strh	r1, [r0, #12]
 80084c6:	6643      	str	r3, [r0, #100]	; 0x64
 80084c8:	81c2      	strh	r2, [r0, #14]
 80084ca:	6183      	str	r3, [r0, #24]
 80084cc:	4619      	mov	r1, r3
 80084ce:	2208      	movs	r2, #8
 80084d0:	305c      	adds	r0, #92	; 0x5c
 80084d2:	f7fd fb43 	bl	8005b5c <memset>
 80084d6:	4b05      	ldr	r3, [pc, #20]	; (80084ec <std+0x38>)
 80084d8:	6224      	str	r4, [r4, #32]
 80084da:	6263      	str	r3, [r4, #36]	; 0x24
 80084dc:	4b04      	ldr	r3, [pc, #16]	; (80084f0 <std+0x3c>)
 80084de:	62a3      	str	r3, [r4, #40]	; 0x28
 80084e0:	4b04      	ldr	r3, [pc, #16]	; (80084f4 <std+0x40>)
 80084e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084e4:	4b04      	ldr	r3, [pc, #16]	; (80084f8 <std+0x44>)
 80084e6:	6323      	str	r3, [r4, #48]	; 0x30
 80084e8:	bd10      	pop	{r4, pc}
 80084ea:	bf00      	nop
 80084ec:	08008809 	.word	0x08008809
 80084f0:	0800882b 	.word	0x0800882b
 80084f4:	08008863 	.word	0x08008863
 80084f8:	08008887 	.word	0x08008887

080084fc <_cleanup_r>:
 80084fc:	4901      	ldr	r1, [pc, #4]	; (8008504 <_cleanup_r+0x8>)
 80084fe:	f000 b8af 	b.w	8008660 <_fwalk_reent>
 8008502:	bf00      	nop
 8008504:	0800843d 	.word	0x0800843d

08008508 <__sfmoreglue>:
 8008508:	2268      	movs	r2, #104	; 0x68
 800850a:	b570      	push	{r4, r5, r6, lr}
 800850c:	1e4d      	subs	r5, r1, #1
 800850e:	4355      	muls	r5, r2
 8008510:	460e      	mov	r6, r1
 8008512:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008516:	f7ff fa6b 	bl	80079f0 <_malloc_r>
 800851a:	4604      	mov	r4, r0
 800851c:	b140      	cbz	r0, 8008530 <__sfmoreglue+0x28>
 800851e:	2100      	movs	r1, #0
 8008520:	e9c0 1600 	strd	r1, r6, [r0]
 8008524:	300c      	adds	r0, #12
 8008526:	60a0      	str	r0, [r4, #8]
 8008528:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800852c:	f7fd fb16 	bl	8005b5c <memset>
 8008530:	4620      	mov	r0, r4
 8008532:	bd70      	pop	{r4, r5, r6, pc}

08008534 <__sfp_lock_acquire>:
 8008534:	4801      	ldr	r0, [pc, #4]	; (800853c <__sfp_lock_acquire+0x8>)
 8008536:	f000 b8b3 	b.w	80086a0 <__retarget_lock_acquire_recursive>
 800853a:	bf00      	nop
 800853c:	20000375 	.word	0x20000375

08008540 <__sfp_lock_release>:
 8008540:	4801      	ldr	r0, [pc, #4]	; (8008548 <__sfp_lock_release+0x8>)
 8008542:	f000 b8ae 	b.w	80086a2 <__retarget_lock_release_recursive>
 8008546:	bf00      	nop
 8008548:	20000375 	.word	0x20000375

0800854c <__sinit_lock_acquire>:
 800854c:	4801      	ldr	r0, [pc, #4]	; (8008554 <__sinit_lock_acquire+0x8>)
 800854e:	f000 b8a7 	b.w	80086a0 <__retarget_lock_acquire_recursive>
 8008552:	bf00      	nop
 8008554:	20000376 	.word	0x20000376

08008558 <__sinit_lock_release>:
 8008558:	4801      	ldr	r0, [pc, #4]	; (8008560 <__sinit_lock_release+0x8>)
 800855a:	f000 b8a2 	b.w	80086a2 <__retarget_lock_release_recursive>
 800855e:	bf00      	nop
 8008560:	20000376 	.word	0x20000376

08008564 <__sinit>:
 8008564:	b510      	push	{r4, lr}
 8008566:	4604      	mov	r4, r0
 8008568:	f7ff fff0 	bl	800854c <__sinit_lock_acquire>
 800856c:	69a3      	ldr	r3, [r4, #24]
 800856e:	b11b      	cbz	r3, 8008578 <__sinit+0x14>
 8008570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008574:	f7ff bff0 	b.w	8008558 <__sinit_lock_release>
 8008578:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800857c:	6523      	str	r3, [r4, #80]	; 0x50
 800857e:	4b13      	ldr	r3, [pc, #76]	; (80085cc <__sinit+0x68>)
 8008580:	4a13      	ldr	r2, [pc, #76]	; (80085d0 <__sinit+0x6c>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	62a2      	str	r2, [r4, #40]	; 0x28
 8008586:	42a3      	cmp	r3, r4
 8008588:	bf08      	it	eq
 800858a:	2301      	moveq	r3, #1
 800858c:	4620      	mov	r0, r4
 800858e:	bf08      	it	eq
 8008590:	61a3      	streq	r3, [r4, #24]
 8008592:	f000 f81f 	bl	80085d4 <__sfp>
 8008596:	6060      	str	r0, [r4, #4]
 8008598:	4620      	mov	r0, r4
 800859a:	f000 f81b 	bl	80085d4 <__sfp>
 800859e:	60a0      	str	r0, [r4, #8]
 80085a0:	4620      	mov	r0, r4
 80085a2:	f000 f817 	bl	80085d4 <__sfp>
 80085a6:	2200      	movs	r2, #0
 80085a8:	2104      	movs	r1, #4
 80085aa:	60e0      	str	r0, [r4, #12]
 80085ac:	6860      	ldr	r0, [r4, #4]
 80085ae:	f7ff ff81 	bl	80084b4 <std>
 80085b2:	2201      	movs	r2, #1
 80085b4:	2109      	movs	r1, #9
 80085b6:	68a0      	ldr	r0, [r4, #8]
 80085b8:	f7ff ff7c 	bl	80084b4 <std>
 80085bc:	2202      	movs	r2, #2
 80085be:	2112      	movs	r1, #18
 80085c0:	68e0      	ldr	r0, [r4, #12]
 80085c2:	f7ff ff77 	bl	80084b4 <std>
 80085c6:	2301      	movs	r3, #1
 80085c8:	61a3      	str	r3, [r4, #24]
 80085ca:	e7d1      	b.n	8008570 <__sinit+0xc>
 80085cc:	080089e4 	.word	0x080089e4
 80085d0:	080084fd 	.word	0x080084fd

080085d4 <__sfp>:
 80085d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d6:	4607      	mov	r7, r0
 80085d8:	f7ff ffac 	bl	8008534 <__sfp_lock_acquire>
 80085dc:	4b1e      	ldr	r3, [pc, #120]	; (8008658 <__sfp+0x84>)
 80085de:	681e      	ldr	r6, [r3, #0]
 80085e0:	69b3      	ldr	r3, [r6, #24]
 80085e2:	b913      	cbnz	r3, 80085ea <__sfp+0x16>
 80085e4:	4630      	mov	r0, r6
 80085e6:	f7ff ffbd 	bl	8008564 <__sinit>
 80085ea:	3648      	adds	r6, #72	; 0x48
 80085ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085f0:	3b01      	subs	r3, #1
 80085f2:	d503      	bpl.n	80085fc <__sfp+0x28>
 80085f4:	6833      	ldr	r3, [r6, #0]
 80085f6:	b30b      	cbz	r3, 800863c <__sfp+0x68>
 80085f8:	6836      	ldr	r6, [r6, #0]
 80085fa:	e7f7      	b.n	80085ec <__sfp+0x18>
 80085fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008600:	b9d5      	cbnz	r5, 8008638 <__sfp+0x64>
 8008602:	4b16      	ldr	r3, [pc, #88]	; (800865c <__sfp+0x88>)
 8008604:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008608:	60e3      	str	r3, [r4, #12]
 800860a:	6665      	str	r5, [r4, #100]	; 0x64
 800860c:	f000 f847 	bl	800869e <__retarget_lock_init_recursive>
 8008610:	f7ff ff96 	bl	8008540 <__sfp_lock_release>
 8008614:	2208      	movs	r2, #8
 8008616:	4629      	mov	r1, r5
 8008618:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800861c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008620:	6025      	str	r5, [r4, #0]
 8008622:	61a5      	str	r5, [r4, #24]
 8008624:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008628:	f7fd fa98 	bl	8005b5c <memset>
 800862c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008630:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008634:	4620      	mov	r0, r4
 8008636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008638:	3468      	adds	r4, #104	; 0x68
 800863a:	e7d9      	b.n	80085f0 <__sfp+0x1c>
 800863c:	2104      	movs	r1, #4
 800863e:	4638      	mov	r0, r7
 8008640:	f7ff ff62 	bl	8008508 <__sfmoreglue>
 8008644:	4604      	mov	r4, r0
 8008646:	6030      	str	r0, [r6, #0]
 8008648:	2800      	cmp	r0, #0
 800864a:	d1d5      	bne.n	80085f8 <__sfp+0x24>
 800864c:	f7ff ff78 	bl	8008540 <__sfp_lock_release>
 8008650:	230c      	movs	r3, #12
 8008652:	603b      	str	r3, [r7, #0]
 8008654:	e7ee      	b.n	8008634 <__sfp+0x60>
 8008656:	bf00      	nop
 8008658:	080089e4 	.word	0x080089e4
 800865c:	ffff0001 	.word	0xffff0001

08008660 <_fwalk_reent>:
 8008660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008664:	4606      	mov	r6, r0
 8008666:	4688      	mov	r8, r1
 8008668:	2700      	movs	r7, #0
 800866a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800866e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008672:	f1b9 0901 	subs.w	r9, r9, #1
 8008676:	d505      	bpl.n	8008684 <_fwalk_reent+0x24>
 8008678:	6824      	ldr	r4, [r4, #0]
 800867a:	2c00      	cmp	r4, #0
 800867c:	d1f7      	bne.n	800866e <_fwalk_reent+0xe>
 800867e:	4638      	mov	r0, r7
 8008680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008684:	89ab      	ldrh	r3, [r5, #12]
 8008686:	2b01      	cmp	r3, #1
 8008688:	d907      	bls.n	800869a <_fwalk_reent+0x3a>
 800868a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800868e:	3301      	adds	r3, #1
 8008690:	d003      	beq.n	800869a <_fwalk_reent+0x3a>
 8008692:	4629      	mov	r1, r5
 8008694:	4630      	mov	r0, r6
 8008696:	47c0      	blx	r8
 8008698:	4307      	orrs	r7, r0
 800869a:	3568      	adds	r5, #104	; 0x68
 800869c:	e7e9      	b.n	8008672 <_fwalk_reent+0x12>

0800869e <__retarget_lock_init_recursive>:
 800869e:	4770      	bx	lr

080086a0 <__retarget_lock_acquire_recursive>:
 80086a0:	4770      	bx	lr

080086a2 <__retarget_lock_release_recursive>:
 80086a2:	4770      	bx	lr

080086a4 <__swhatbuf_r>:
 80086a4:	b570      	push	{r4, r5, r6, lr}
 80086a6:	460e      	mov	r6, r1
 80086a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ac:	4614      	mov	r4, r2
 80086ae:	2900      	cmp	r1, #0
 80086b0:	461d      	mov	r5, r3
 80086b2:	b096      	sub	sp, #88	; 0x58
 80086b4:	da08      	bge.n	80086c8 <__swhatbuf_r+0x24>
 80086b6:	2200      	movs	r2, #0
 80086b8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80086bc:	602a      	str	r2, [r5, #0]
 80086be:	061a      	lsls	r2, r3, #24
 80086c0:	d410      	bmi.n	80086e4 <__swhatbuf_r+0x40>
 80086c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086c6:	e00e      	b.n	80086e6 <__swhatbuf_r+0x42>
 80086c8:	466a      	mov	r2, sp
 80086ca:	f000 f903 	bl	80088d4 <_fstat_r>
 80086ce:	2800      	cmp	r0, #0
 80086d0:	dbf1      	blt.n	80086b6 <__swhatbuf_r+0x12>
 80086d2:	9a01      	ldr	r2, [sp, #4]
 80086d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086dc:	425a      	negs	r2, r3
 80086de:	415a      	adcs	r2, r3
 80086e0:	602a      	str	r2, [r5, #0]
 80086e2:	e7ee      	b.n	80086c2 <__swhatbuf_r+0x1e>
 80086e4:	2340      	movs	r3, #64	; 0x40
 80086e6:	2000      	movs	r0, #0
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	b016      	add	sp, #88	; 0x58
 80086ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080086f0 <__smakebuf_r>:
 80086f0:	898b      	ldrh	r3, [r1, #12]
 80086f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086f4:	079d      	lsls	r5, r3, #30
 80086f6:	4606      	mov	r6, r0
 80086f8:	460c      	mov	r4, r1
 80086fa:	d507      	bpl.n	800870c <__smakebuf_r+0x1c>
 80086fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	6123      	str	r3, [r4, #16]
 8008704:	2301      	movs	r3, #1
 8008706:	6163      	str	r3, [r4, #20]
 8008708:	b002      	add	sp, #8
 800870a:	bd70      	pop	{r4, r5, r6, pc}
 800870c:	466a      	mov	r2, sp
 800870e:	ab01      	add	r3, sp, #4
 8008710:	f7ff ffc8 	bl	80086a4 <__swhatbuf_r>
 8008714:	9900      	ldr	r1, [sp, #0]
 8008716:	4605      	mov	r5, r0
 8008718:	4630      	mov	r0, r6
 800871a:	f7ff f969 	bl	80079f0 <_malloc_r>
 800871e:	b948      	cbnz	r0, 8008734 <__smakebuf_r+0x44>
 8008720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008724:	059a      	lsls	r2, r3, #22
 8008726:	d4ef      	bmi.n	8008708 <__smakebuf_r+0x18>
 8008728:	f023 0303 	bic.w	r3, r3, #3
 800872c:	f043 0302 	orr.w	r3, r3, #2
 8008730:	81a3      	strh	r3, [r4, #12]
 8008732:	e7e3      	b.n	80086fc <__smakebuf_r+0xc>
 8008734:	4b0d      	ldr	r3, [pc, #52]	; (800876c <__smakebuf_r+0x7c>)
 8008736:	62b3      	str	r3, [r6, #40]	; 0x28
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	6020      	str	r0, [r4, #0]
 800873c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	9b00      	ldr	r3, [sp, #0]
 8008744:	6120      	str	r0, [r4, #16]
 8008746:	6163      	str	r3, [r4, #20]
 8008748:	9b01      	ldr	r3, [sp, #4]
 800874a:	b15b      	cbz	r3, 8008764 <__smakebuf_r+0x74>
 800874c:	4630      	mov	r0, r6
 800874e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008752:	f000 f8d1 	bl	80088f8 <_isatty_r>
 8008756:	b128      	cbz	r0, 8008764 <__smakebuf_r+0x74>
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	f023 0303 	bic.w	r3, r3, #3
 800875e:	f043 0301 	orr.w	r3, r3, #1
 8008762:	81a3      	strh	r3, [r4, #12]
 8008764:	89a0      	ldrh	r0, [r4, #12]
 8008766:	4305      	orrs	r5, r0
 8008768:	81a5      	strh	r5, [r4, #12]
 800876a:	e7cd      	b.n	8008708 <__smakebuf_r+0x18>
 800876c:	080084fd 	.word	0x080084fd

08008770 <_malloc_usable_size_r>:
 8008770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008774:	1f18      	subs	r0, r3, #4
 8008776:	2b00      	cmp	r3, #0
 8008778:	bfbc      	itt	lt
 800877a:	580b      	ldrlt	r3, [r1, r0]
 800877c:	18c0      	addlt	r0, r0, r3
 800877e:	4770      	bx	lr

08008780 <_raise_r>:
 8008780:	291f      	cmp	r1, #31
 8008782:	b538      	push	{r3, r4, r5, lr}
 8008784:	4604      	mov	r4, r0
 8008786:	460d      	mov	r5, r1
 8008788:	d904      	bls.n	8008794 <_raise_r+0x14>
 800878a:	2316      	movs	r3, #22
 800878c:	6003      	str	r3, [r0, #0]
 800878e:	f04f 30ff 	mov.w	r0, #4294967295
 8008792:	bd38      	pop	{r3, r4, r5, pc}
 8008794:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008796:	b112      	cbz	r2, 800879e <_raise_r+0x1e>
 8008798:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800879c:	b94b      	cbnz	r3, 80087b2 <_raise_r+0x32>
 800879e:	4620      	mov	r0, r4
 80087a0:	f000 f830 	bl	8008804 <_getpid_r>
 80087a4:	462a      	mov	r2, r5
 80087a6:	4601      	mov	r1, r0
 80087a8:	4620      	mov	r0, r4
 80087aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087ae:	f000 b817 	b.w	80087e0 <_kill_r>
 80087b2:	2b01      	cmp	r3, #1
 80087b4:	d00a      	beq.n	80087cc <_raise_r+0x4c>
 80087b6:	1c59      	adds	r1, r3, #1
 80087b8:	d103      	bne.n	80087c2 <_raise_r+0x42>
 80087ba:	2316      	movs	r3, #22
 80087bc:	6003      	str	r3, [r0, #0]
 80087be:	2001      	movs	r0, #1
 80087c0:	e7e7      	b.n	8008792 <_raise_r+0x12>
 80087c2:	2400      	movs	r4, #0
 80087c4:	4628      	mov	r0, r5
 80087c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80087ca:	4798      	blx	r3
 80087cc:	2000      	movs	r0, #0
 80087ce:	e7e0      	b.n	8008792 <_raise_r+0x12>

080087d0 <raise>:
 80087d0:	4b02      	ldr	r3, [pc, #8]	; (80087dc <raise+0xc>)
 80087d2:	4601      	mov	r1, r0
 80087d4:	6818      	ldr	r0, [r3, #0]
 80087d6:	f7ff bfd3 	b.w	8008780 <_raise_r>
 80087da:	bf00      	nop
 80087dc:	20000024 	.word	0x20000024

080087e0 <_kill_r>:
 80087e0:	b538      	push	{r3, r4, r5, lr}
 80087e2:	2300      	movs	r3, #0
 80087e4:	4d06      	ldr	r5, [pc, #24]	; (8008800 <_kill_r+0x20>)
 80087e6:	4604      	mov	r4, r0
 80087e8:	4608      	mov	r0, r1
 80087ea:	4611      	mov	r1, r2
 80087ec:	602b      	str	r3, [r5, #0]
 80087ee:	f7f9 febe 	bl	800256e <_kill>
 80087f2:	1c43      	adds	r3, r0, #1
 80087f4:	d102      	bne.n	80087fc <_kill_r+0x1c>
 80087f6:	682b      	ldr	r3, [r5, #0]
 80087f8:	b103      	cbz	r3, 80087fc <_kill_r+0x1c>
 80087fa:	6023      	str	r3, [r4, #0]
 80087fc:	bd38      	pop	{r3, r4, r5, pc}
 80087fe:	bf00      	nop
 8008800:	20000370 	.word	0x20000370

08008804 <_getpid_r>:
 8008804:	f7f9 beac 	b.w	8002560 <_getpid>

08008808 <__sread>:
 8008808:	b510      	push	{r4, lr}
 800880a:	460c      	mov	r4, r1
 800880c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008810:	f000 f894 	bl	800893c <_read_r>
 8008814:	2800      	cmp	r0, #0
 8008816:	bfab      	itete	ge
 8008818:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800881a:	89a3      	ldrhlt	r3, [r4, #12]
 800881c:	181b      	addge	r3, r3, r0
 800881e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008822:	bfac      	ite	ge
 8008824:	6563      	strge	r3, [r4, #84]	; 0x54
 8008826:	81a3      	strhlt	r3, [r4, #12]
 8008828:	bd10      	pop	{r4, pc}

0800882a <__swrite>:
 800882a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800882e:	461f      	mov	r7, r3
 8008830:	898b      	ldrh	r3, [r1, #12]
 8008832:	4605      	mov	r5, r0
 8008834:	05db      	lsls	r3, r3, #23
 8008836:	460c      	mov	r4, r1
 8008838:	4616      	mov	r6, r2
 800883a:	d505      	bpl.n	8008848 <__swrite+0x1e>
 800883c:	2302      	movs	r3, #2
 800883e:	2200      	movs	r2, #0
 8008840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008844:	f000 f868 	bl	8008918 <_lseek_r>
 8008848:	89a3      	ldrh	r3, [r4, #12]
 800884a:	4632      	mov	r2, r6
 800884c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008850:	81a3      	strh	r3, [r4, #12]
 8008852:	4628      	mov	r0, r5
 8008854:	463b      	mov	r3, r7
 8008856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800885a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800885e:	f000 b817 	b.w	8008890 <_write_r>

08008862 <__sseek>:
 8008862:	b510      	push	{r4, lr}
 8008864:	460c      	mov	r4, r1
 8008866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800886a:	f000 f855 	bl	8008918 <_lseek_r>
 800886e:	1c43      	adds	r3, r0, #1
 8008870:	89a3      	ldrh	r3, [r4, #12]
 8008872:	bf15      	itete	ne
 8008874:	6560      	strne	r0, [r4, #84]	; 0x54
 8008876:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800887a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800887e:	81a3      	strheq	r3, [r4, #12]
 8008880:	bf18      	it	ne
 8008882:	81a3      	strhne	r3, [r4, #12]
 8008884:	bd10      	pop	{r4, pc}

08008886 <__sclose>:
 8008886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800888a:	f000 b813 	b.w	80088b4 <_close_r>
	...

08008890 <_write_r>:
 8008890:	b538      	push	{r3, r4, r5, lr}
 8008892:	4604      	mov	r4, r0
 8008894:	4608      	mov	r0, r1
 8008896:	4611      	mov	r1, r2
 8008898:	2200      	movs	r2, #0
 800889a:	4d05      	ldr	r5, [pc, #20]	; (80088b0 <_write_r+0x20>)
 800889c:	602a      	str	r2, [r5, #0]
 800889e:	461a      	mov	r2, r3
 80088a0:	f7f9 fe9c 	bl	80025dc <_write>
 80088a4:	1c43      	adds	r3, r0, #1
 80088a6:	d102      	bne.n	80088ae <_write_r+0x1e>
 80088a8:	682b      	ldr	r3, [r5, #0]
 80088aa:	b103      	cbz	r3, 80088ae <_write_r+0x1e>
 80088ac:	6023      	str	r3, [r4, #0]
 80088ae:	bd38      	pop	{r3, r4, r5, pc}
 80088b0:	20000370 	.word	0x20000370

080088b4 <_close_r>:
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	2300      	movs	r3, #0
 80088b8:	4d05      	ldr	r5, [pc, #20]	; (80088d0 <_close_r+0x1c>)
 80088ba:	4604      	mov	r4, r0
 80088bc:	4608      	mov	r0, r1
 80088be:	602b      	str	r3, [r5, #0]
 80088c0:	f7f9 fea8 	bl	8002614 <_close>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	d102      	bne.n	80088ce <_close_r+0x1a>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	b103      	cbz	r3, 80088ce <_close_r+0x1a>
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	20000370 	.word	0x20000370

080088d4 <_fstat_r>:
 80088d4:	b538      	push	{r3, r4, r5, lr}
 80088d6:	2300      	movs	r3, #0
 80088d8:	4d06      	ldr	r5, [pc, #24]	; (80088f4 <_fstat_r+0x20>)
 80088da:	4604      	mov	r4, r0
 80088dc:	4608      	mov	r0, r1
 80088de:	4611      	mov	r1, r2
 80088e0:	602b      	str	r3, [r5, #0]
 80088e2:	f7f9 fea2 	bl	800262a <_fstat>
 80088e6:	1c43      	adds	r3, r0, #1
 80088e8:	d102      	bne.n	80088f0 <_fstat_r+0x1c>
 80088ea:	682b      	ldr	r3, [r5, #0]
 80088ec:	b103      	cbz	r3, 80088f0 <_fstat_r+0x1c>
 80088ee:	6023      	str	r3, [r4, #0]
 80088f0:	bd38      	pop	{r3, r4, r5, pc}
 80088f2:	bf00      	nop
 80088f4:	20000370 	.word	0x20000370

080088f8 <_isatty_r>:
 80088f8:	b538      	push	{r3, r4, r5, lr}
 80088fa:	2300      	movs	r3, #0
 80088fc:	4d05      	ldr	r5, [pc, #20]	; (8008914 <_isatty_r+0x1c>)
 80088fe:	4604      	mov	r4, r0
 8008900:	4608      	mov	r0, r1
 8008902:	602b      	str	r3, [r5, #0]
 8008904:	f7f9 fea0 	bl	8002648 <_isatty>
 8008908:	1c43      	adds	r3, r0, #1
 800890a:	d102      	bne.n	8008912 <_isatty_r+0x1a>
 800890c:	682b      	ldr	r3, [r5, #0]
 800890e:	b103      	cbz	r3, 8008912 <_isatty_r+0x1a>
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	bd38      	pop	{r3, r4, r5, pc}
 8008914:	20000370 	.word	0x20000370

08008918 <_lseek_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4604      	mov	r4, r0
 800891c:	4608      	mov	r0, r1
 800891e:	4611      	mov	r1, r2
 8008920:	2200      	movs	r2, #0
 8008922:	4d05      	ldr	r5, [pc, #20]	; (8008938 <_lseek_r+0x20>)
 8008924:	602a      	str	r2, [r5, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	f7f9 fe98 	bl	800265c <_lseek>
 800892c:	1c43      	adds	r3, r0, #1
 800892e:	d102      	bne.n	8008936 <_lseek_r+0x1e>
 8008930:	682b      	ldr	r3, [r5, #0]
 8008932:	b103      	cbz	r3, 8008936 <_lseek_r+0x1e>
 8008934:	6023      	str	r3, [r4, #0]
 8008936:	bd38      	pop	{r3, r4, r5, pc}
 8008938:	20000370 	.word	0x20000370

0800893c <_read_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	4604      	mov	r4, r0
 8008940:	4608      	mov	r0, r1
 8008942:	4611      	mov	r1, r2
 8008944:	2200      	movs	r2, #0
 8008946:	4d05      	ldr	r5, [pc, #20]	; (800895c <_read_r+0x20>)
 8008948:	602a      	str	r2, [r5, #0]
 800894a:	461a      	mov	r2, r3
 800894c:	f7f9 fe29 	bl	80025a2 <_read>
 8008950:	1c43      	adds	r3, r0, #1
 8008952:	d102      	bne.n	800895a <_read_r+0x1e>
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	b103      	cbz	r3, 800895a <_read_r+0x1e>
 8008958:	6023      	str	r3, [r4, #0]
 800895a:	bd38      	pop	{r3, r4, r5, pc}
 800895c:	20000370 	.word	0x20000370

08008960 <_init>:
 8008960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008962:	bf00      	nop
 8008964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008966:	bc08      	pop	{r3}
 8008968:	469e      	mov	lr, r3
 800896a:	4770      	bx	lr

0800896c <_fini>:
 800896c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896e:	bf00      	nop
 8008970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008972:	bc08      	pop	{r3}
 8008974:	469e      	mov	lr, r3
 8008976:	4770      	bx	lr
